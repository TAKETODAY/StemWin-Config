
Test_LCD4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f3c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dac  080090e8  080090e8  000190e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be94  0800be94  0001be94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be9c  0800be9c  0001be9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bea0  0800bea0  0001bea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000003c  20000000  0800bea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
  8 .bss          00028f80  2000003c  2000003c  0002003c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20028fbc  20028fbc  0002003c  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004748d  00000000  00000000  0002006a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000451e  00000000  00000000  000674f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000c23e  00000000  00000000  0006ba15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  00077c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a8  00000000  00000000  00078b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ab60  00000000  00000000  00079fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00007b20  00000000  00000000  00084b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000fe  00000000  00000000  0008c638  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002c7c  00000000  00000000  0008c738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000003c 	.word	0x2000003c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080090d0 	.word	0x080090d0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000040 	.word	0x20000040
 80001e8:	080090d0 	.word	0x080090d0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80004fc:	b508      	push	{r3, lr}
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80004fe:	f000 f9ab 	bl	8000858 <LCD_IO_Init>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8000502:	20ca      	movs	r0, #202	; 0xca
 8000504:	f000 fa20 	bl	8000948 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 8000508:	20c3      	movs	r0, #195	; 0xc3
 800050a:	f000 fa01 	bl	8000910 <LCD_IO_WriteData>
 800050e:	2008      	movs	r0, #8
 8000510:	f000 f9fe 	bl	8000910 <LCD_IO_WriteData>
 8000514:	2050      	movs	r0, #80	; 0x50
 8000516:	f000 f9fb 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800051a:	20cf      	movs	r0, #207	; 0xcf
 800051c:	f000 fa14 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000520:	2000      	movs	r0, #0
 8000522:	f000 f9f5 	bl	8000910 <LCD_IO_WriteData>
 8000526:	20c1      	movs	r0, #193	; 0xc1
 8000528:	f000 f9f2 	bl	8000910 <LCD_IO_WriteData>
 800052c:	2030      	movs	r0, #48	; 0x30
 800052e:	f000 f9ef 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000532:	20ed      	movs	r0, #237	; 0xed
 8000534:	f000 fa08 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000538:	2064      	movs	r0, #100	; 0x64
 800053a:	f000 f9e9 	bl	8000910 <LCD_IO_WriteData>
 800053e:	2003      	movs	r0, #3
 8000540:	f000 f9e6 	bl	8000910 <LCD_IO_WriteData>
 8000544:	2012      	movs	r0, #18
 8000546:	f000 f9e3 	bl	8000910 <LCD_IO_WriteData>
 800054a:	2081      	movs	r0, #129	; 0x81
 800054c:	f000 f9e0 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000550:	20e8      	movs	r0, #232	; 0xe8
 8000552:	f000 f9f9 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000556:	2085      	movs	r0, #133	; 0x85
 8000558:	f000 f9da 	bl	8000910 <LCD_IO_WriteData>
 800055c:	2000      	movs	r0, #0
 800055e:	f000 f9d7 	bl	8000910 <LCD_IO_WriteData>
 8000562:	2078      	movs	r0, #120	; 0x78
 8000564:	f000 f9d4 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000568:	20cb      	movs	r0, #203	; 0xcb
 800056a:	f000 f9ed 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800056e:	2039      	movs	r0, #57	; 0x39
 8000570:	f000 f9ce 	bl	8000910 <LCD_IO_WriteData>
 8000574:	202c      	movs	r0, #44	; 0x2c
 8000576:	f000 f9cb 	bl	8000910 <LCD_IO_WriteData>
 800057a:	2000      	movs	r0, #0
 800057c:	f000 f9c8 	bl	8000910 <LCD_IO_WriteData>
 8000580:	2034      	movs	r0, #52	; 0x34
 8000582:	f000 f9c5 	bl	8000910 <LCD_IO_WriteData>
 8000586:	2002      	movs	r0, #2
 8000588:	f000 f9c2 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800058c:	20f7      	movs	r0, #247	; 0xf7
 800058e:	f000 f9db 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000592:	2020      	movs	r0, #32
 8000594:	f000 f9bc 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000598:	20ea      	movs	r0, #234	; 0xea
 800059a:	f000 f9d5 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f9b6 	bl	8000910 <LCD_IO_WriteData>
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 f9b3 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005aa:	20b1      	movs	r0, #177	; 0xb1
 80005ac:	f000 f9cc 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 f9ad 	bl	8000910 <LCD_IO_WriteData>
 80005b6:	201b      	movs	r0, #27
 80005b8:	f000 f9aa 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005bc:	20b6      	movs	r0, #182	; 0xb6
 80005be:	f000 f9c3 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005c2:	200a      	movs	r0, #10
 80005c4:	f000 f9a4 	bl	8000910 <LCD_IO_WriteData>
 80005c8:	20a2      	movs	r0, #162	; 0xa2
 80005ca:	f000 f9a1 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005ce:	20c0      	movs	r0, #192	; 0xc0
 80005d0:	f000 f9ba 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005d4:	2010      	movs	r0, #16
 80005d6:	f000 f99b 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005da:	20c1      	movs	r0, #193	; 0xc1
 80005dc:	f000 f9b4 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005e0:	2010      	movs	r0, #16
 80005e2:	f000 f995 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005e6:	20c5      	movs	r0, #197	; 0xc5
 80005e8:	f000 f9ae 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005ec:	2045      	movs	r0, #69	; 0x45
 80005ee:	f000 f98f 	bl	8000910 <LCD_IO_WriteData>
 80005f2:	2015      	movs	r0, #21
 80005f4:	f000 f98c 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005f8:	20c7      	movs	r0, #199	; 0xc7
 80005fa:	f000 f9a5 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005fe:	2090      	movs	r0, #144	; 0x90
 8000600:	f000 f986 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000604:	2036      	movs	r0, #54	; 0x36
 8000606:	f000 f99f 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800060a:	20c8      	movs	r0, #200	; 0xc8
 800060c:	f000 f980 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000610:	20f2      	movs	r0, #242	; 0xf2
 8000612:	f000 f999 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000616:	2000      	movs	r0, #0
 8000618:	f000 f97a 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800061c:	20b0      	movs	r0, #176	; 0xb0
 800061e:	f000 f993 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000622:	20c2      	movs	r0, #194	; 0xc2
 8000624:	f000 f974 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000628:	20b6      	movs	r0, #182	; 0xb6
 800062a:	f000 f98d 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800062e:	200a      	movs	r0, #10
 8000630:	f000 f96e 	bl	8000910 <LCD_IO_WriteData>
 8000634:	20a7      	movs	r0, #167	; 0xa7
 8000636:	f000 f96b 	bl	8000910 <LCD_IO_WriteData>
 800063a:	2027      	movs	r0, #39	; 0x27
 800063c:	f000 f968 	bl	8000910 <LCD_IO_WriteData>
 8000640:	2004      	movs	r0, #4
 8000642:	f000 f965 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000646:	202a      	movs	r0, #42	; 0x2a
 8000648:	f000 f97e 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800064c:	2000      	movs	r0, #0
 800064e:	f000 f95f 	bl	8000910 <LCD_IO_WriteData>
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f95c 	bl	8000910 <LCD_IO_WriteData>
 8000658:	2000      	movs	r0, #0
 800065a:	f000 f959 	bl	8000910 <LCD_IO_WriteData>
 800065e:	20ef      	movs	r0, #239	; 0xef
 8000660:	f000 f956 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000664:	202b      	movs	r0, #43	; 0x2b
 8000666:	f000 f96f 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f950 	bl	8000910 <LCD_IO_WriteData>
 8000670:	2000      	movs	r0, #0
 8000672:	f000 f94d 	bl	8000910 <LCD_IO_WriteData>
 8000676:	2001      	movs	r0, #1
 8000678:	f000 f94a 	bl	8000910 <LCD_IO_WriteData>
 800067c:	203f      	movs	r0, #63	; 0x3f
 800067e:	f000 f947 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000682:	20f6      	movs	r0, #246	; 0xf6
 8000684:	f000 f960 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000688:	2001      	movs	r0, #1
 800068a:	f000 f941 	bl	8000910 <LCD_IO_WriteData>
 800068e:	2000      	movs	r0, #0
 8000690:	f000 f93e 	bl	8000910 <LCD_IO_WriteData>
 8000694:	2006      	movs	r0, #6
 8000696:	f000 f93b 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800069a:	202c      	movs	r0, #44	; 0x2c
 800069c:	f000 f954 	bl	8000948 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80006a0:	20c8      	movs	r0, #200	; 0xc8
 80006a2:	f000 f96d 	bl	8000980 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80006a6:	2026      	movs	r0, #38	; 0x26
 80006a8:	f000 f94e 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 f92f 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006b2:	20e0      	movs	r0, #224	; 0xe0
 80006b4:	f000 f948 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006b8:	200f      	movs	r0, #15
 80006ba:	f000 f929 	bl	8000910 <LCD_IO_WriteData>
 80006be:	2029      	movs	r0, #41	; 0x29
 80006c0:	f000 f926 	bl	8000910 <LCD_IO_WriteData>
 80006c4:	2024      	movs	r0, #36	; 0x24
 80006c6:	f000 f923 	bl	8000910 <LCD_IO_WriteData>
 80006ca:	200c      	movs	r0, #12
 80006cc:	f000 f920 	bl	8000910 <LCD_IO_WriteData>
 80006d0:	200e      	movs	r0, #14
 80006d2:	f000 f91d 	bl	8000910 <LCD_IO_WriteData>
 80006d6:	2009      	movs	r0, #9
 80006d8:	f000 f91a 	bl	8000910 <LCD_IO_WriteData>
 80006dc:	204e      	movs	r0, #78	; 0x4e
 80006de:	f000 f917 	bl	8000910 <LCD_IO_WriteData>
 80006e2:	2078      	movs	r0, #120	; 0x78
 80006e4:	f000 f914 	bl	8000910 <LCD_IO_WriteData>
 80006e8:	203c      	movs	r0, #60	; 0x3c
 80006ea:	f000 f911 	bl	8000910 <LCD_IO_WriteData>
 80006ee:	2009      	movs	r0, #9
 80006f0:	f000 f90e 	bl	8000910 <LCD_IO_WriteData>
 80006f4:	2013      	movs	r0, #19
 80006f6:	f000 f90b 	bl	8000910 <LCD_IO_WriteData>
 80006fa:	2005      	movs	r0, #5
 80006fc:	f000 f908 	bl	8000910 <LCD_IO_WriteData>
 8000700:	2017      	movs	r0, #23
 8000702:	f000 f905 	bl	8000910 <LCD_IO_WriteData>
 8000706:	2011      	movs	r0, #17
 8000708:	f000 f902 	bl	8000910 <LCD_IO_WriteData>
 800070c:	2000      	movs	r0, #0
 800070e:	f000 f8ff 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000712:	20e1      	movs	r0, #225	; 0xe1
 8000714:	f000 f918 	bl	8000948 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000718:	2000      	movs	r0, #0
 800071a:	f000 f8f9 	bl	8000910 <LCD_IO_WriteData>
 800071e:	2016      	movs	r0, #22
 8000720:	f000 f8f6 	bl	8000910 <LCD_IO_WriteData>
 8000724:	201b      	movs	r0, #27
 8000726:	f000 f8f3 	bl	8000910 <LCD_IO_WriteData>
 800072a:	2004      	movs	r0, #4
 800072c:	f000 f8f0 	bl	8000910 <LCD_IO_WriteData>
 8000730:	2011      	movs	r0, #17
 8000732:	f000 f8ed 	bl	8000910 <LCD_IO_WriteData>
 8000736:	2007      	movs	r0, #7
 8000738:	f000 f8ea 	bl	8000910 <LCD_IO_WriteData>
 800073c:	2031      	movs	r0, #49	; 0x31
 800073e:	f000 f8e7 	bl	8000910 <LCD_IO_WriteData>
 8000742:	2033      	movs	r0, #51	; 0x33
 8000744:	f000 f8e4 	bl	8000910 <LCD_IO_WriteData>
 8000748:	2042      	movs	r0, #66	; 0x42
 800074a:	f000 f8e1 	bl	8000910 <LCD_IO_WriteData>
 800074e:	2005      	movs	r0, #5
 8000750:	f000 f8de 	bl	8000910 <LCD_IO_WriteData>
 8000754:	200c      	movs	r0, #12
 8000756:	f000 f8db 	bl	8000910 <LCD_IO_WriteData>
 800075a:	200a      	movs	r0, #10
 800075c:	f000 f8d8 	bl	8000910 <LCD_IO_WriteData>
 8000760:	2028      	movs	r0, #40	; 0x28
 8000762:	f000 f8d5 	bl	8000910 <LCD_IO_WriteData>
 8000766:	202f      	movs	r0, #47	; 0x2f
 8000768:	f000 f8d2 	bl	8000910 <LCD_IO_WriteData>
 800076c:	200f      	movs	r0, #15
 800076e:	f000 f8cf 	bl	8000910 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000772:	2011      	movs	r0, #17
 8000774:	f000 f8e8 	bl	8000948 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8000778:	20c8      	movs	r0, #200	; 0xc8
 800077a:	f000 f901 	bl	8000980 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 800077e:	2029      	movs	r0, #41	; 0x29
 8000780:	f000 f8e2 	bl	8000948 <LCD_IO_WriteReg>
 8000784:	202c      	movs	r0, #44	; 0x2c
}
 8000786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 800078a:	f000 b8dd 	b.w	8000948 <LCD_IO_WriteReg>
	...

08000790 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000790:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000792:	4c21      	ldr	r4, [pc, #132]	; (8000818 <SPIx_Init+0x88>)
{
 8000794:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000796:	4620      	mov	r0, r4
 8000798:	f001 fdfe 	bl	8002398 <HAL_SPI_GetState>
 800079c:	2800      	cmp	r0, #0
 800079e:	d138      	bne.n	8000812 <SPIx_Init+0x82>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <SPIx_Init+0x8c>)
 80007a2:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007a4:	2318      	movs	r3, #24
 80007a6:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 80007a8:	2307      	movs	r3, #7
 80007aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80007ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b0:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80007b2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007b6:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <SPIx_Init+0x90>)
 80007ba:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80007bc:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80007be:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80007c0:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80007c2:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80007c4:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80007c6:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80007c8:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 80007ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80007d0:	645a      	str	r2, [r3, #68]	; 0x44
 80007d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80007d8:	9201      	str	r2, [sp, #4]
 80007da:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80007dc:	9002      	str	r0, [sp, #8]
 80007de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80007e0:	4810      	ldr	r0, [pc, #64]	; (8000824 <SPIx_Init+0x94>)
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80007e2:	f042 0220 	orr.w	r2, r2, #32
 80007e6:	631a      	str	r2, [r3, #48]	; 0x30
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0320 	and.w	r3, r3, #32
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80007f2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80007f6:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80007fc:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80007fe:	2301      	movs	r3, #1
 8000800:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000802:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000804:	2305      	movs	r3, #5
 8000806:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000808:	f000 fc24 	bl	8001054 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 800080c:	4620      	mov	r0, r4
 800080e:	f001 fcc7 	bl	80021a0 <HAL_SPI_Init>
}
 8000812:	b008      	add	sp, #32
 8000814:	bd10      	pop	{r4, pc}
 8000816:	bf00      	nop
 8000818:	2000005c 	.word	0x2000005c
 800081c:	40015000 	.word	0x40015000
 8000820:	40023800 	.word	0x40023800
 8000824:	40021400 	.word	0x40021400

08000828 <SPIx_Write>:
{
 8000828:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <SPIx_Write+0x28>)
{
 800082c:	a902      	add	r1, sp, #8
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800082e:	681b      	ldr	r3, [r3, #0]
{
 8000830:	f821 0d02 	strh.w	r0, [r1, #-2]!
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000834:	2201      	movs	r2, #1
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <SPIx_Write+0x2c>)
 8000838:	f001 fd05 	bl	8002246 <HAL_SPI_Transmit>
  if(status != HAL_OK)
 800083c:	b120      	cbz	r0, 8000848 <SPIx_Write+0x20>
  HAL_SPI_DeInit(&SpiHandle);
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <SPIx_Write+0x2c>)
 8000840:	f001 fceb 	bl	800221a <HAL_SPI_DeInit>
  SPIx_Init();
 8000844:	f7ff ffa4 	bl	8000790 <SPIx_Init>
}
 8000848:	b003      	add	sp, #12
 800084a:	f85d fb04 	ldr.w	pc, [sp], #4
 800084e:	bf00      	nop
 8000850:	20000000 	.word	0x20000000
 8000854:	2000005c 	.word	0x2000005c

08000858 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <LCD_IO_Init+0xa8>)
 800085c:	781d      	ldrb	r5, [r3, #0]
{
 800085e:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 8000860:	2d00      	cmp	r5, #0
 8000862:	d14a      	bne.n	80008fa <LCD_IO_Init+0xa2>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000864:	4c27      	ldr	r4, [pc, #156]	; (8000904 <LCD_IO_Init+0xac>)
 8000866:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 8000868:	2601      	movs	r6, #1
 800086a:	701e      	strb	r6, [r3, #0]
    LCD_WRX_GPIO_CLK_ENABLE();
 800086c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800086e:	4826      	ldr	r0, [pc, #152]	; (8000908 <LCD_IO_Init+0xb0>)
    LCD_WRX_GPIO_CLK_ENABLE();
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6323      	str	r3, [r4, #48]	; 0x30
 8000876:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000878:	9604      	str	r6, [sp, #16]
    LCD_WRX_GPIO_CLK_ENABLE();
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000880:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 8000882:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000884:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800088a:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800088c:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800088e:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000890:	f000 fbe0 	bl	8001054 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000894:	9501      	str	r5, [sp, #4]
 8000896:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000898:	481b      	ldr	r0, [pc, #108]	; (8000908 <LCD_IO_Init+0xb0>)
    LCD_RDX_GPIO_CLK_ENABLE();
 800089a:	f043 0308 	orr.w	r3, r3, #8
 800089e:	6323      	str	r3, [r4, #48]	; 0x30
 80008a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80008a2:	9604      	str	r6, [sp, #16]
    LCD_RDX_GPIO_CLK_ENABLE();
 80008a4:	f003 0308 	and.w	r3, r3, #8
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80008ac:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008b2:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80008b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008b6:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008b8:	f000 fbcc 	bl	8001054 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80008bc:	9502      	str	r5, [sp, #8]
 80008be:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80008c0:	4812      	ldr	r0, [pc, #72]	; (800090c <LCD_IO_Init+0xb4>)
    LCD_NCS_GPIO_CLK_ENABLE();
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6323      	str	r3, [r4, #48]	; 0x30
 80008c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80008ca:	9604      	str	r6, [sp, #16]
    LCD_NCS_GPIO_CLK_ENABLE();
 80008cc:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80008d0:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 80008d2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80008d4:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 80008d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80008d8:	9403      	str	r4, [sp, #12]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80008da:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008dc:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80008de:	f000 fbb9 	bl	8001054 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80008e2:	462a      	mov	r2, r5
 80008e4:	4621      	mov	r1, r4
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <LCD_IO_Init+0xb4>)
 80008e8:	f000 fd44 	bl	8001374 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80008ec:	4632      	mov	r2, r6
 80008ee:	4621      	mov	r1, r4
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <LCD_IO_Init+0xb4>)
 80008f2:	f000 fd3f 	bl	8001374 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80008f6:	f7ff ff4b 	bl	8000790 <SPIx_Init>
  }
}
 80008fa:	b009      	add	sp, #36	; 0x24
 80008fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000058 	.word	0x20000058
 8000904:	40023800 	.word	0x40023800
 8000908:	40020c00 	.word	0x40020c00
 800090c:	40020800 	.word	0x40020800

08000910 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000910:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000912:	4c0b      	ldr	r4, [pc, #44]	; (8000940 <LCD_IO_WriteData+0x30>)
{
 8000914:	4605      	mov	r5, r0
  LCD_WRX_HIGH();
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <LCD_IO_WriteData+0x34>)
 800091e:	f000 fd29 	bl	8001374 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8000922:	2200      	movs	r2, #0
 8000924:	2104      	movs	r1, #4
 8000926:	4620      	mov	r0, r4
 8000928:	f000 fd24 	bl	8001374 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800092c:	4628      	mov	r0, r5
 800092e:	f7ff ff7b 	bl	8000828 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000932:	4620      	mov	r0, r4
 8000934:	2201      	movs	r2, #1
 8000936:	2104      	movs	r1, #4
}
 8000938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 800093c:	f000 bd1a 	b.w	8001374 <HAL_GPIO_WritePin>
 8000940:	40020800 	.word	0x40020800
 8000944:	40020c00 	.word	0x40020c00

08000948 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000948:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800094a:	4c0b      	ldr	r4, [pc, #44]	; (8000978 <LCD_IO_WriteReg+0x30>)
{
 800094c:	4605      	mov	r5, r0
  LCD_WRX_LOW();
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <LCD_IO_WriteReg+0x34>)
 8000956:	f000 fd0d 	bl	8001374 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 800095a:	2200      	movs	r2, #0
 800095c:	2104      	movs	r1, #4
 800095e:	4620      	mov	r0, r4
 8000960:	f000 fd08 	bl	8001374 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000964:	4628      	mov	r0, r5
 8000966:	f7ff ff5f 	bl	8000828 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800096a:	4620      	mov	r0, r4
 800096c:	2201      	movs	r2, #1
 800096e:	2104      	movs	r1, #4
}
 8000970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8000974:	f000 bcfe 	b.w	8001374 <HAL_GPIO_WritePin>
 8000978:	40020800 	.word	0x40020800
 800097c:	40020c00 	.word	0x40020c00

08000980 <LCD_Delay>:
 8000980:	f000 b9a4 	b.w	8000ccc <HAL_Delay>

08000984 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000984:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd =0;
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8000988:	4c23      	ldr	r4, [pc, #140]	; (8000a18 <BSP_SDRAM_Initialization_sequence+0x94>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800098a:	4d24      	ldr	r5, [pc, #144]	; (8000a1c <BSP_SDRAM_Initialization_sequence+0x98>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800098c:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd =0;
 800098e:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000992:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000994:	4621      	mov	r1, r4
{
 8000996:	4682      	mov	sl, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099c:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd =0;
 800099e:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80009a2:	e884 00c0 	stmia.w	r4, {r6, r7}
  Command.AutoRefreshNumber       = 1;
 80009a6:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 80009a8:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80009ac:	f001 fb78 	bl	80020a0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80009b0:	4630      	mov	r0, r6
 80009b2:	f000 f98b 	bl	8000ccc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80009b6:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80009b8:	4621      	mov	r1, r4
 80009ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009be:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80009c0:	e884 0088 	stmia.w	r4, {r3, r7}
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 80009c4:	f04f 0904 	mov.w	r9, #4
  Command.AutoRefreshNumber       = 1;
 80009c8:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 80009ca:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80009ce:	f001 fb67 	bl	80020a0 <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80009d2:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80009d4:	4621      	mov	r1, r4
 80009d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009da:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80009dc:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber       = 4;
 80009e0:	f8c4 9008 	str.w	r9, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 80009e4:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80009e8:	f001 fb5a 	bl	80020a0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80009ec:	f44f 730c 	mov.w	r3, #560	; 0x230
 80009f0:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 80009f2:	9b01      	ldr	r3, [sp, #4]
 80009f4:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80009f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009fa:	4621      	mov	r1, r4
 80009fc:	4628      	mov	r0, r5
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80009fe:	f8c4 9000 	str.w	r9, [r4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000a02:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 8000a04:	60a6      	str	r6, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000a06:	f001 fb4b 	bl	80020a0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8000a0a:	4651      	mov	r1, sl
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	f001 fb5e 	bl	80020ce <HAL_SDRAM_ProgramRefreshRate>
}
 8000a12:	b002      	add	sp, #8
 8000a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a18:	200000b4 	.word	0x200000b4
 8000a1c:	200000c4 	.word	0x200000c4

08000a20 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8000a20:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8000a22:	4606      	mov	r6, r0
{
 8000a24:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8000a26:	2800      	cmp	r0, #0
 8000a28:	f000 80ad 	beq.w	8000b86 <BSP_SDRAM_MspInit+0x166>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a2c:	4b57      	ldr	r3, [pc, #348]	; (8000b8c <BSP_SDRAM_MspInit+0x16c>)
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8000a2e:	4858      	ldr	r0, [pc, #352]	; (8000b90 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a30:	2500      	movs	r5, #0
 8000a32:	9501      	str	r5, [sp, #4]
 8000a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a36:	f042 0201 	orr.w	r2, r2, #1
 8000a3a:	639a      	str	r2, [r3, #56]	; 0x38
 8000a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a3e:	f002 0201 	and.w	r2, r2, #1
 8000a42:	9201      	str	r2, [sp, #4]
 8000a44:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8000a46:	9502      	str	r5, [sp, #8]
 8000a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a4a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8000a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a52:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000a56:	9202      	str	r2, [sp, #8]
 8000a58:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	9503      	str	r5, [sp, #12]
 8000a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a5e:	f042 0202 	orr.w	r2, r2, #2
 8000a62:	631a      	str	r2, [r3, #48]	; 0x30
 8000a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a66:	f002 0202 	and.w	r2, r2, #2
 8000a6a:	9203      	str	r2, [sp, #12]
 8000a6c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	9504      	str	r5, [sp, #16]
 8000a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a72:	f042 0204 	orr.w	r2, r2, #4
 8000a76:	631a      	str	r2, [r3, #48]	; 0x30
 8000a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a7a:	f002 0204 	and.w	r2, r2, #4
 8000a7e:	9204      	str	r2, [sp, #16]
 8000a80:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	9505      	str	r5, [sp, #20]
 8000a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a86:	f042 0208 	orr.w	r2, r2, #8
 8000a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a8e:	f002 0208 	and.w	r2, r2, #8
 8000a92:	9205      	str	r2, [sp, #20]
 8000a94:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a96:	9506      	str	r5, [sp, #24]
 8000a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a9a:	f042 0210 	orr.w	r2, r2, #16
 8000a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aa2:	f002 0210 	and.w	r2, r2, #16
 8000aa6:	9206      	str	r2, [sp, #24]
 8000aa8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aaa:	9507      	str	r5, [sp, #28]
 8000aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aae:	f042 0220 	orr.w	r2, r2, #32
 8000ab2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ab6:	f002 0220 	and.w	r2, r2, #32
 8000aba:	9207      	str	r2, [sp, #28]
 8000abc:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abe:	9508      	str	r5, [sp, #32]
 8000ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ac6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000aca:	950b      	str	r5, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad0:	9308      	str	r3, [sp, #32]
 8000ad2:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8000ad6:	ac0e      	add	r4, sp, #56	; 0x38
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8000ad8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000ada:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8000adc:	230c      	movs	r3, #12
 8000ade:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8000ae0:	2360      	movs	r3, #96	; 0x60
 8000ae2:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8000ae6:	4621      	mov	r1, r4
 8000ae8:	f000 fab4 	bl	8001054 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8000aec:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8000aee:	4621      	mov	r1, r4
 8000af0:	4828      	ldr	r0, [pc, #160]	; (8000b94 <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8000af2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8000af4:	f000 faae 	bl	8001054 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8000af8:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000afc:	4621      	mov	r1, r4
 8000afe:	4826      	ldr	r0, [pc, #152]	; (8000b98 <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8000b00:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000b02:	f000 faa7 	bl	8001054 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8000b06:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000b0a:	4621      	mov	r1, r4
 8000b0c:	4823      	ldr	r0, [pc, #140]	; (8000b9c <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8000b0e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000b10:	f000 faa0 	bl	8001054 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8000b14:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000b18:	4621      	mov	r1, r4
 8000b1a:	4821      	ldr	r0, [pc, #132]	; (8000ba0 <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8000b1c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000b1e:	f000 fa99 	bl	8001054 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000b22:	4621      	mov	r1, r4
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8000b24:	f248 1333 	movw	r3, #33075	; 0x8133

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8000b28:	4c1e      	ldr	r4, [pc, #120]	; (8000ba4 <BSP_SDRAM_MspInit+0x184>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000b2a:	481f      	ldr	r0, [pc, #124]	; (8000ba8 <BSP_SDRAM_MspInit+0x188>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8000b2c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000b2e:	f000 fa91 	bl	8001054 <HAL_GPIO_Init>
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	60a3      	str	r3, [r4, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8000b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b3a:	60e3      	str	r3, [r4, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8000b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b40:	6123      	str	r3, [r4, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b46:	6163      	str	r3, [r4, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000b48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b4c:	61a3      	str	r3, [r4, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8000b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b52:	6223      	str	r3, [r4, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000b54:	2303      	movs	r3, #3
 8000b56:	62a3      	str	r3, [r4, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000b58:	6325      	str	r5, [r4, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <BSP_SDRAM_MspInit+0x18c>)
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8000b5c:	6334      	str	r4, [r6, #48]	; 0x30
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8000b5e:	4620      	mov	r0, r4
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8000b60:	6023      	str	r3, [r4, #0]
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8000b62:	6065      	str	r5, [r4, #4]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8000b64:	61e5      	str	r5, [r4, #28]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000b66:	6265      	str	r5, [r4, #36]	; 0x24
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000b68:	62e5      	str	r5, [r4, #44]	; 0x2c
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8000b6a:	63a6      	str	r6, [r4, #56]	; 0x38
  HAL_DMA_DeInit(&dmaHandle);
 8000b6c:	f000 f9ce 	bl	8000f0c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8000b70:	4620      	mov	r0, r4
 8000b72:	f000 f94d 	bl	8000e10 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8000b76:	2038      	movs	r0, #56	; 0x38
 8000b78:	462a      	mov	r2, r5
 8000b7a:	210f      	movs	r1, #15
 8000b7c:	f000 f8cc 	bl	8000d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8000b80:	2038      	movs	r0, #56	; 0x38
 8000b82:	f000 f8fd 	bl	8000d80 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8000b86:	b00e      	add	sp, #56	; 0x38
 8000b88:	bd70      	pop	{r4, r5, r6, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40021400 	.word	0x40021400
 8000ba4:	20000114 	.word	0x20000114
 8000ba8:	40021800 	.word	0x40021800
 8000bac:	40026410 	.word	0x40026410

08000bb0 <BSP_SDRAM_Init>:
{
 8000bb0:	b570      	push	{r4, r5, r6, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000bb2:	4c1a      	ldr	r4, [pc, #104]	; (8000c1c <BSP_SDRAM_Init+0x6c>)
  Timing.LoadToActiveDelay    = 2;
 8000bb4:	4d1a      	ldr	r5, [pc, #104]	; (8000c20 <BSP_SDRAM_Init+0x70>)
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <BSP_SDRAM_Init+0x74>)
 8000bb8:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	602b      	str	r3, [r5, #0]
  Timing.WriteRecoveryTime    = 2;
 8000bbe:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 8000bc0:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 8000bc2:	61ab      	str	r3, [r5, #24]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	6123      	str	r3, [r4, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000bc8:	2340      	movs	r3, #64	; 0x40
 8000bca:	6163      	str	r3, [r4, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8000bcc:	f44f 73c0 	mov.w	r3, #384	; 0x180
  Timing.ExitSelfRefreshDelay = 7;
 8000bd0:	2107      	movs	r1, #7
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8000bd2:	61a3      	str	r3, [r4, #24]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8000bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  Timing.SelfRefreshTime      = 4;
 8000bd8:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 8000bda:	6069      	str	r1, [r5, #4]
  Timing.RowCycleDelay        = 7;
 8000bdc:	60e9      	str	r1, [r5, #12]
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8000bde:	2601      	movs	r6, #1
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000be0:	2100      	movs	r1, #0
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8000be2:	6223      	str	r3, [r4, #32]
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8000be4:	4620      	mov	r0, r4
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8000be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000bea:	60e2      	str	r2, [r4, #12]
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8000bec:	62a3      	str	r3, [r4, #40]	; 0x28
  Timing.SelfRefreshTime      = 4;
 8000bee:	60aa      	str	r2, [r5, #8]
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8000bf0:	6066      	str	r6, [r4, #4]
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000bf2:	60a1      	str	r1, [r4, #8]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000bf4:	61e1      	str	r1, [r4, #28]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8000bf6:	6261      	str	r1, [r4, #36]	; 0x24
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8000bf8:	f7ff ff12 	bl	8000a20 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8000bfc:	4629      	mov	r1, r5
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f001 fa2e 	bl	8002060 <HAL_SDRAM_Init>
 8000c04:	4c08      	ldr	r4, [pc, #32]	; (8000c28 <BSP_SDRAM_Init+0x78>)
    sdramstatus = SDRAM_ERROR;
 8000c06:	2800      	cmp	r0, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	4630      	movne	r0, r6
 8000c0c:	2000      	moveq	r0, #0
 8000c0e:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000c10:	f240 506a 	movw	r0, #1386	; 0x56a
 8000c14:	f7ff feb6 	bl	8000984 <BSP_SDRAM_Initialization_sequence>
}
 8000c18:	7820      	ldrb	r0, [r4, #0]
 8000c1a:	bd70      	pop	{r4, r5, r6, pc}
 8000c1c:	200000c4 	.word	0x200000c4
 8000c20:	200000f8 	.word	0x200000f8
 8000c24:	a0000140 	.word	0xa0000140
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_InitTick+0x3c>)
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_InitTick+0x40>)
{
 8000c32:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	7818      	ldrb	r0, [r3, #0]
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c3e:	6810      	ldr	r0, [r2, #0]
 8000c40:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c44:	f000 f8a8 	bl	8000d98 <HAL_SYSTICK_Config>
 8000c48:	4604      	mov	r4, r0
 8000c4a:	b958      	cbnz	r0, 8000c64 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4c:	2d0f      	cmp	r5, #15
 8000c4e:	d809      	bhi.n	8000c64 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c50:	4602      	mov	r2, r0
 8000c52:	4629      	mov	r1, r5
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f000 f85e 	bl	8000d18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <HAL_InitTick+0x44>)
 8000c5e:	4620      	mov	r0, r4
 8000c60:	601d      	str	r5, [r3, #0]
 8000c62:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000c64:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c66:	bd38      	pop	{r3, r4, r5, pc}
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	20000005 	.word	0x20000005
 8000c70:	20000008 	.word	0x20000008

08000c74 <HAL_Init>:
{
 8000c74:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_Init+0x30>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c7e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c8e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f82f 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff ffc8 	bl	8000c2c <HAL_InitTick>
  HAL_MspInit();
 8000c9c:	f002 fcd8 	bl	8003650 <HAL_MspInit>
}
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	bd08      	pop	{r3, pc}
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ca8:	4a03      	ldr	r2, [pc, #12]	; (8000cb8 <HAL_IncTick+0x10>)
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <HAL_IncTick+0x14>)
 8000cac:	6811      	ldr	r1, [r2, #0]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	440b      	add	r3, r1
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20028c38 	.word	0x20028c38
 8000cbc:	20000005 	.word	0x20000005

08000cc0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cc0:	4b01      	ldr	r3, [pc, #4]	; (8000cc8 <HAL_GetTick+0x8>)
 8000cc2:	6818      	ldr	r0, [r3, #0]
}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20028c38 	.word	0x20028c38

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff fff6 	bl	8000cc0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd6:	bf1c      	itt	ne
 8000cd8:	4b05      	ldrne	r3, [pc, #20]	; (8000cf0 <HAL_Delay+0x24>)
 8000cda:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000cde:	bf18      	it	ne
 8000ce0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ce2:	f7ff ffed 	bl	8000cc0 <HAL_GetTick>
 8000ce6:	1b40      	subs	r0, r0, r5
 8000ce8:	4284      	cmp	r4, r0
 8000cea:	d8fa      	bhi.n	8000ce2 <HAL_Delay+0x16>
  {
  }
}
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000005 	.word	0x20000005

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000cf6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	0c1b      	lsrs	r3, r3, #16
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d04:	0200      	lsls	r0, r0, #8
 8000d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000d0e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d10:	60d3      	str	r3, [r2, #12]
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1a:	b530      	push	{r4, r5, lr}
 8000d1c:	68dc      	ldr	r4, [r3, #12]
 8000d1e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d22:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	2b04      	cmp	r3, #4
 8000d2a:	bf28      	it	cs
 8000d2c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 0501 	mov.w	r5, #1
 8000d34:	fa05 f303 	lsl.w	r3, r5, r3
 8000d38:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3c:	bf8c      	ite	hi
 8000d3e:	3c03      	subhi	r4, #3
 8000d40:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d42:	4019      	ands	r1, r3
 8000d44:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d46:	fa05 f404 	lsl.w	r4, r5, r4
 8000d4a:	3c01      	subs	r4, #1
 8000d4c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000d4e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	ea42 0201 	orr.w	r2, r2, r1
 8000d54:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	bfaf      	iteee	ge
 8000d5a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	f000 000f 	andlt.w	r0, r0, #15
 8000d62:	4b06      	ldrlt	r3, [pc, #24]	; (8000d7c <HAL_NVIC_SetPriority+0x64>)
 8000d64:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	bfa5      	ittet	ge
 8000d68:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000d6c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000d74:	bd30      	pop	{r4, r5, pc}
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00
 8000d7c:	e000ed14 	.word	0xe000ed14

08000d80 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d80:	0942      	lsrs	r2, r0, #5
 8000d82:	2301      	movs	r3, #1
 8000d84:	f000 001f 	and.w	r0, r0, #31
 8000d88:	fa03 f000 	lsl.w	r0, r3, r0
 8000d8c:	4b01      	ldr	r3, [pc, #4]	; (8000d94 <HAL_NVIC_EnableIRQ+0x14>)
 8000d8e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	3801      	subs	r0, #1
 8000d9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d9e:	d20a      	bcs.n	8000db6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	21f0      	movs	r1, #240	; 0xf0
 8000da8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000db6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dc6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000dc8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dca:	bf0c      	ite	eq
 8000dcc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000dd0:	f022 0204 	bicne.w	r2, r2, #4
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ddc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000dde:	f002 f9e3 	bl	80031a8 <HAL_SYSTICK_Callback>
 8000de2:	bd08      	pop	{r3, pc}

08000de4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000de4:	6803      	ldr	r3, [r0, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dec:	f023 0303 	bic.w	r3, r3, #3
 8000df0:	2118      	movs	r1, #24
 8000df2:	3a10      	subs	r2, #16
 8000df4:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000df8:	4904      	ldr	r1, [pc, #16]	; (8000e0c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000dfa:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000dfc:	bf88      	it	hi
 8000dfe:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e00:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e02:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e04:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000e06:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	080090e8 	.word	0x080090e8

08000e10 <HAL_DMA_Init>:
{
 8000e10:	b570      	push	{r4, r5, r6, lr}
 8000e12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ff54 	bl	8000cc0 <HAL_GetTick>
 8000e18:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000e1a:	2c00      	cmp	r4, #0
 8000e1c:	d071      	beq.n	8000f02 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000e24:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000e2c:	6813      	ldr	r3, [r2, #0]
 8000e2e:	f023 0301 	bic.w	r3, r3, #1
 8000e32:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e34:	6821      	ldr	r1, [r4, #0]
 8000e36:	680b      	ldr	r3, [r1, #0]
 8000e38:	07d8      	lsls	r0, r3, #31
 8000e3a:	d43c      	bmi.n	8000eb6 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000e3c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e3e:	4d32      	ldr	r5, [pc, #200]	; (8000f08 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e40:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e42:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e44:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e46:	68a3      	ldr	r3, [r4, #8]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	68e2      	ldr	r2, [r4, #12]
 8000e4c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4e:	6922      	ldr	r2, [r4, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	6962      	ldr	r2, [r4, #20]
 8000e54:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e56:	69e2      	ldr	r2, [r4, #28]
 8000e58:	4303      	orrs	r3, r0
 8000e5a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e5c:	6a22      	ldr	r2, [r4, #32]
 8000e5e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e62:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e64:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e68:	bf01      	itttt	eq
 8000e6a:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000e6c:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000e6e:	4335      	orreq	r5, r6
 8000e70:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000e72:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000e74:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e76:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e78:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000e7c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e80:	d10b      	bne.n	8000e9a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000e82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e84:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000e86:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e88:	b13d      	cbz	r5, 8000e9a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e8a:	b9f8      	cbnz	r0, 8000ecc <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000e8c:	2a01      	cmp	r2, #1
 8000e8e:	d02d      	beq.n	8000eec <HAL_DMA_Init+0xdc>
 8000e90:	d301      	bcc.n	8000e96 <HAL_DMA_Init+0x86>
 8000e92:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e94:	d101      	bne.n	8000e9a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e96:	01ea      	lsls	r2, r5, #7
 8000e98:	d42b      	bmi.n	8000ef2 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000e9a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f7ff ffa1 	bl	8000de4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ea2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ea4:	233f      	movs	r3, #63	; 0x3f
 8000ea6:	4093      	lsls	r3, r2
 8000ea8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eaa:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000eac:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eae:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000eb0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000eb4:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eb6:	f7ff ff03 	bl	8000cc0 <HAL_GetTick>
 8000eba:	1b40      	subs	r0, r0, r5
 8000ebc:	2805      	cmp	r0, #5
 8000ebe:	d9b9      	bls.n	8000e34 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ec4:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000ec6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000eca:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000ecc:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000ed0:	d113      	bne.n	8000efa <HAL_DMA_Init+0xea>
    switch (tmp)
 8000ed2:	2a03      	cmp	r2, #3
 8000ed4:	d8e1      	bhi.n	8000e9a <HAL_DMA_Init+0x8a>
 8000ed6:	a001      	add	r0, pc, #4	; (adr r0, 8000edc <HAL_DMA_Init+0xcc>)
 8000ed8:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000edc:	08000ef3 	.word	0x08000ef3
 8000ee0:	08000e97 	.word	0x08000e97
 8000ee4:	08000ef3 	.word	0x08000ef3
 8000ee8:	08000eed 	.word	0x08000eed
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000eec:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000ef0:	d1d3      	bne.n	8000e9a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ef2:	2340      	movs	r3, #64	; 0x40
 8000ef4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	e7e5      	b.n	8000ec6 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000efa:	2a02      	cmp	r2, #2
 8000efc:	d9f9      	bls.n	8000ef2 <HAL_DMA_Init+0xe2>
 8000efe:	2a03      	cmp	r2, #3
 8000f00:	e7c8      	b.n	8000e94 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000f02:	2001      	movs	r0, #1
 8000f04:	bd70      	pop	{r4, r5, r6, pc}
 8000f06:	bf00      	nop
 8000f08:	f010803f 	.word	0xf010803f

08000f0c <HAL_DMA_DeInit>:
{
 8000f0c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8000f0e:	4605      	mov	r5, r0
 8000f10:	b1f0      	cbz	r0, 8000f50 <HAL_DMA_DeInit+0x44>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8000f12:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000f16:	b2e4      	uxtb	r4, r4
 8000f18:	2c02      	cmp	r4, #2
 8000f1a:	d017      	beq.n	8000f4c <HAL_DMA_DeInit+0x40>
  __HAL_DMA_DISABLE(hdma);
 8000f1c:	6803      	ldr	r3, [r0, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	f022 0201 	bic.w	r2, r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8000f26:	2400      	movs	r4, #0
  hdma->Instance->FCR  = 0x00000021U;
 8000f28:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8000f2a:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8000f2c:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8000f2e:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8000f30:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8000f32:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8000f34:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f36:	f7ff ff55 	bl	8000de4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f3a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8000f3c:	233f      	movs	r3, #63	; 0x3f
 8000f3e:	4093      	lsls	r3, r2
 8000f40:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f42:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8000f44:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8000f48:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 8000f4c:	4620      	mov	r0, r4
}
 8000f4e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f50:	2001      	movs	r0, #1
 8000f52:	bd38      	pop	{r3, r4, r5, pc}

08000f54 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000f54:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000f56:	4604      	mov	r4, r0
 8000f58:	b330      	cbz	r0, 8000fa8 <HAL_DMA2D_Init+0x54>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000f5a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f62:	b91b      	cbnz	r3, 8000f6c <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000f64:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000f68:	f002 fba2 	bl	80036b0 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000f6c:	6822      	ldr	r2, [r4, #0]
 8000f6e:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000f76:	6813      	ldr	r3, [r2, #0]
 8000f78:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000f7c:	430b      	orrs	r3, r1
 8000f7e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000f80:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000f82:	68a1      	ldr	r1, [r4, #8]
 8000f84:	f023 0307 	bic.w	r3, r3, #7
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000f8c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f8e:	68e1      	ldr	r1, [r4, #12]
 8000f90:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000f9c:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000f9e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000fa0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000fa2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8000fa6:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000fa8:	2001      	movs	r0, #1
}
 8000faa:	bd10      	pop	{r4, pc}

08000fac <HAL_DMA2D_ConfigLayer>:
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000fac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fb0:	2b01      	cmp	r3, #1
{
 8000fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 8000fb8:	d03f      	beq.n	800103a <HAL_DMA2D_ConfigLayer+0x8e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */

  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000fba:	010e      	lsls	r6, r1, #4
 8000fbc:	1985      	adds	r5, r0, r6
  __HAL_LOCK(hdma2d);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000fc4:	69ea      	ldr	r2, [r5, #28]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000fc6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000fca:	f1a2 0709 	sub.w	r7, r2, #9
 8000fce:	2f01      	cmp	r7, #1
 8000fd0:	6803      	ldr	r3, [r0, #0]
  {
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000fd2:	f8d5 e020 	ldr.w	lr, [r5, #32]
 8000fd6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000fd8:	d811      	bhi.n	8000ffe <HAL_DMA2D_ConfigLayer+0x52>
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000fda:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8000fde:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000fe2:	4322      	orrs	r2, r4
  {
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8000fe4:	b981      	cbnz	r1, 8001008 <HAL_DMA2D_ConfigLayer+0x5c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8000fe6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000fe8:	4919      	ldr	r1, [pc, #100]	; (8001050 <HAL_DMA2D_ConfigLayer+0xa4>)
 8000fea:	4021      	ands	r1, r4
 8000fec:	430a      	orrs	r2, r1
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000ff0:	6982      	ldr	r2, [r0, #24]
 8000ff2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000ff4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000ff6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
 8000ffc:	e017      	b.n	800102e <HAL_DMA2D_ConfigLayer+0x82>
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 8000ffe:	0624      	lsls	r4, r4, #24
 8001000:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001004:	4322      	orrs	r2, r4
  if(LayerIdx == 0)
 8001006:	b1d1      	cbz	r1, 800103e <HAL_DMA2D_ConfigLayer+0x92>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001008:	69dd      	ldr	r5, [r3, #28]
 800100a:	4c11      	ldr	r4, [pc, #68]	; (8001050 <HAL_DMA2D_ConfigLayer+0xa4>)

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800100c:	2f01      	cmp	r7, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 800100e:	ea04 0405 	and.w	r4, r4, r5
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001012:	4406      	add	r6, r0
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001014:	ea42 0204 	orr.w	r2, r2, r4
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001018:	bf98      	it	ls
 800101a:	eb00 1101 	addls.w	r1, r0, r1, lsl #4
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 800101e:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001020:	69b2      	ldr	r2, [r6, #24]
 8001022:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001024:	bf9e      	ittt	ls
 8001026:	6a4a      	ldrls	r2, [r1, #36]	; 0x24
 8001028:	f022 427f 	bicls.w	r2, r2, #4278190080	; 0xff000000
 800102c:	621a      	strls	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800102e:	2301      	movs	r3, #1
 8001030:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001034:	2300      	movs	r3, #0
 8001036:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800103a:	4618      	mov	r0, r3
 800103c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 800103e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001040:	4903      	ldr	r1, [pc, #12]	; (8001050 <HAL_DMA2D_ConfigLayer+0xa4>)
 8001042:	4021      	ands	r1, r4
 8001044:	430a      	orrs	r2, r1
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001048:	6982      	ldr	r2, [r0, #24]
 800104a:	619a      	str	r2, [r3, #24]
 800104c:	e7ef      	b.n	800102e <HAL_DMA2D_ConfigLayer+0x82>
 800104e:	bf00      	nop
 8001050:	00fcfff0 	.word	0x00fcfff0

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001058:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001224 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4a6e      	ldr	r2, [pc, #440]	; (800121c <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001062:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8001228 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001068:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800106a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001070:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001074:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001078:	45b6      	cmp	lr, r6
 800107a:	f040 80b6 	bne.w	80011ea <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107e:	684c      	ldr	r4, [r1, #4]
 8001080:	f024 0710 	bic.w	r7, r4, #16
 8001084:	2f02      	cmp	r7, #2
 8001086:	d116      	bne.n	80010b6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001088:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800108c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001090:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001094:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001098:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800109c:	f04f 0c0f 	mov.w	ip, #15
 80010a0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80010a4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a8:	690d      	ldr	r5, [r1, #16]
 80010aa:	fa05 f50b 	lsl.w	r5, r5, fp
 80010ae:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80010b2:	f8ca 5020 	str.w	r5, [sl, #32]
 80010b6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ba:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80010bc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c0:	fa05 f50a 	lsl.w	r5, r5, sl
 80010c4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ca:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ce:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80010da:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010de:	d811      	bhi.n	8001104 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80010e0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e6:	68cf      	ldr	r7, [r1, #12]
 80010e8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80010ec:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80010f0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010f2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010f8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80010fc:	409f      	lsls	r7, r3
 80010fe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001102:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001104:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001106:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	688f      	ldr	r7, [r1, #8]
 800110a:	fa07 f70a 	lsl.w	r7, r7, sl
 800110e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001110:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001112:	00e5      	lsls	r5, r4, #3
 8001114:	d569      	bpl.n	80011ea <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	f04f 0b00 	mov.w	fp, #0
 800111a:	f8cd b00c 	str.w	fp, [sp, #12]
 800111e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001122:	4d3f      	ldr	r5, [pc, #252]	; (8001220 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001124:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001128:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800112c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001130:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001134:	9703      	str	r7, [sp, #12]
 8001136:	9f03      	ldr	r7, [sp, #12]
 8001138:	f023 0703 	bic.w	r7, r3, #3
 800113c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001140:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001144:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001148:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800114c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001150:	f04f 0e0f 	mov.w	lr, #15
 8001154:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001158:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800115a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115e:	d04b      	beq.n	80011f8 <HAL_GPIO_Init+0x1a4>
 8001160:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001164:	42a8      	cmp	r0, r5
 8001166:	d049      	beq.n	80011fc <HAL_GPIO_Init+0x1a8>
 8001168:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800116c:	42a8      	cmp	r0, r5
 800116e:	d047      	beq.n	8001200 <HAL_GPIO_Init+0x1ac>
 8001170:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001174:	42a8      	cmp	r0, r5
 8001176:	d045      	beq.n	8001204 <HAL_GPIO_Init+0x1b0>
 8001178:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800117c:	42a8      	cmp	r0, r5
 800117e:	d043      	beq.n	8001208 <HAL_GPIO_Init+0x1b4>
 8001180:	4548      	cmp	r0, r9
 8001182:	d043      	beq.n	800120c <HAL_GPIO_Init+0x1b8>
 8001184:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001188:	42a8      	cmp	r0, r5
 800118a:	d041      	beq.n	8001210 <HAL_GPIO_Init+0x1bc>
 800118c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001190:	42a8      	cmp	r0, r5
 8001192:	d03f      	beq.n	8001214 <HAL_GPIO_Init+0x1c0>
 8001194:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001198:	42a8      	cmp	r0, r5
 800119a:	d03d      	beq.n	8001218 <HAL_GPIO_Init+0x1c4>
 800119c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011a0:	42a8      	cmp	r0, r5
 80011a2:	bf14      	ite	ne
 80011a4:	250a      	movne	r5, #10
 80011a6:	2509      	moveq	r5, #9
 80011a8:	fa05 f50c 	lsl.w	r5, r5, ip
 80011ac:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80011b2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80011ba:	bf0c      	ite	eq
 80011bc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011be:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80011c0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80011c2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80011c8:	bf0c      	ite	eq
 80011ca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011cc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80011ce:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80011d6:	bf0c      	ite	eq
 80011d8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011da:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80011dc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80011de:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80011e2:	bf54      	ite	pl
 80011e4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80011e6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80011e8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	3301      	adds	r3, #1
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	f47f af3c 	bne.w	800106a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80011f2:	b005      	add	sp, #20
 80011f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f8:	465d      	mov	r5, fp
 80011fa:	e7d5      	b.n	80011a8 <HAL_GPIO_Init+0x154>
 80011fc:	2501      	movs	r5, #1
 80011fe:	e7d3      	b.n	80011a8 <HAL_GPIO_Init+0x154>
 8001200:	2502      	movs	r5, #2
 8001202:	e7d1      	b.n	80011a8 <HAL_GPIO_Init+0x154>
 8001204:	2503      	movs	r5, #3
 8001206:	e7cf      	b.n	80011a8 <HAL_GPIO_Init+0x154>
 8001208:	2504      	movs	r5, #4
 800120a:	e7cd      	b.n	80011a8 <HAL_GPIO_Init+0x154>
 800120c:	2505      	movs	r5, #5
 800120e:	e7cb      	b.n	80011a8 <HAL_GPIO_Init+0x154>
 8001210:	2506      	movs	r5, #6
 8001212:	e7c9      	b.n	80011a8 <HAL_GPIO_Init+0x154>
 8001214:	2507      	movs	r5, #7
 8001216:	e7c7      	b.n	80011a8 <HAL_GPIO_Init+0x154>
 8001218:	2508      	movs	r5, #8
 800121a:	e7c5      	b.n	80011a8 <HAL_GPIO_Init+0x154>
 800121c:	40013c00 	.word	0x40013c00
 8001220:	40020000 	.word	0x40020000
 8001224:	40023800 	.word	0x40023800
 8001228:	40021400 	.word	0x40021400

0800122c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800122c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001230:	4e4c      	ldr	r6, [pc, #304]	; (8001364 <HAL_GPIO_DeInit+0x138>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001232:	f8df a138 	ldr.w	sl, [pc, #312]	; 800136c <HAL_GPIO_DeInit+0x140>
 8001236:	f8df b138 	ldr.w	fp, [pc, #312]	; 8001370 <HAL_GPIO_DeInit+0x144>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	2400      	movs	r4, #0
    ioposition = 0x01U << position;
 800123c:	f04f 0901 	mov.w	r9, #1
 8001240:	fa09 f204 	lsl.w	r2, r9, r4
    if(iocurrent == ioposition)
 8001244:	ea32 0301 	bics.w	r3, r2, r1
 8001248:	d174      	bne.n	8001334 <HAL_GPIO_DeInit+0x108>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124a:	2303      	movs	r3, #3
 800124c:	fa04 f509 	lsl.w	r5, r4, r9
 8001250:	6807      	ldr	r7, [r0, #0]
 8001252:	fa03 f505 	lsl.w	r5, r3, r5
 8001256:	43ed      	mvns	r5, r5
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001258:	fa24 fc03 	lsr.w	ip, r4, r3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800125c:	402f      	ands	r7, r5
 800125e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001262:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001264:	f004 0e07 	and.w	lr, r4, #7
 8001268:	f8dc 8020 	ldr.w	r8, [ip, #32]
 800126c:	270f      	movs	r7, #15
 800126e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001272:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001276:	ea28 0e0e 	bic.w	lr, r8, lr
 800127a:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800127e:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8001282:	ea05 0e0e 	and.w	lr, r5, lr
 8001286:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128a:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800128e:	43d2      	mvns	r2, r2
 8001290:	ea02 0e0e 	and.w	lr, r2, lr
 8001294:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001298:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800129c:	ea05 050e 	and.w	r5, r5, lr
 80012a0:	60c5      	str	r5, [r0, #12]
 80012a2:	f024 0503 	bic.w	r5, r4, #3
 80012a6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80012aa:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80012ae:	ea04 0e03 	and.w	lr, r4, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <HAL_GPIO_DeInit+0x13c>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 80012b4:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80012b8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80012bc:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80012c0:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80012c2:	ea0c 0c07 	and.w	ip, ip, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80012c6:	d03a      	beq.n	800133e <HAL_GPIO_DeInit+0x112>
 80012c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012cc:	4298      	cmp	r0, r3
 80012ce:	d038      	beq.n	8001342 <HAL_GPIO_DeInit+0x116>
 80012d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012d4:	4298      	cmp	r0, r3
 80012d6:	d036      	beq.n	8001346 <HAL_GPIO_DeInit+0x11a>
 80012d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012dc:	4298      	cmp	r0, r3
 80012de:	d034      	beq.n	800134a <HAL_GPIO_DeInit+0x11e>
 80012e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012e4:	4298      	cmp	r0, r3
 80012e6:	d032      	beq.n	800134e <HAL_GPIO_DeInit+0x122>
 80012e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012ec:	4298      	cmp	r0, r3
 80012ee:	d030      	beq.n	8001352 <HAL_GPIO_DeInit+0x126>
 80012f0:	4550      	cmp	r0, sl
 80012f2:	d030      	beq.n	8001356 <HAL_GPIO_DeInit+0x12a>
 80012f4:	4558      	cmp	r0, fp
 80012f6:	d030      	beq.n	800135a <HAL_GPIO_DeInit+0x12e>
 80012f8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80012fc:	4298      	cmp	r0, r3
 80012fe:	d02e      	beq.n	800135e <HAL_GPIO_DeInit+0x132>
 8001300:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001304:	4298      	cmp	r0, r3
 8001306:	bf0c      	ite	eq
 8001308:	2309      	moveq	r3, #9
 800130a:	230a      	movne	r3, #10
 800130c:	fa03 f30e 	lsl.w	r3, r3, lr
 8001310:	459c      	cmp	ip, r3
 8001312:	d10f      	bne.n	8001334 <HAL_GPIO_DeInit+0x108>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001314:	68ab      	ldr	r3, [r5, #8]
 8001316:	ea23 0707 	bic.w	r7, r3, r7
 800131a:	60af      	str	r7, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800131c:	6833      	ldr	r3, [r6, #0]
 800131e:	4013      	ands	r3, r2
 8001320:	6033      	str	r3, [r6, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001322:	6873      	ldr	r3, [r6, #4]
 8001324:	4013      	ands	r3, r2
 8001326:	6073      	str	r3, [r6, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001328:	68b3      	ldr	r3, [r6, #8]
 800132a:	4013      	ands	r3, r2
 800132c:	60b3      	str	r3, [r6, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800132e:	68f3      	ldr	r3, [r6, #12]
 8001330:	401a      	ands	r2, r3
 8001332:	60f2      	str	r2, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001334:	3401      	adds	r4, #1
 8001336:	2c10      	cmp	r4, #16
 8001338:	d180      	bne.n	800123c <HAL_GPIO_DeInit+0x10>
      }
    }
  }
}
 800133a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800133e:	2300      	movs	r3, #0
 8001340:	e7e4      	b.n	800130c <HAL_GPIO_DeInit+0xe0>
 8001342:	464b      	mov	r3, r9
 8001344:	e7e2      	b.n	800130c <HAL_GPIO_DeInit+0xe0>
 8001346:	2302      	movs	r3, #2
 8001348:	e7e0      	b.n	800130c <HAL_GPIO_DeInit+0xe0>
 800134a:	2303      	movs	r3, #3
 800134c:	e7de      	b.n	800130c <HAL_GPIO_DeInit+0xe0>
 800134e:	2304      	movs	r3, #4
 8001350:	e7dc      	b.n	800130c <HAL_GPIO_DeInit+0xe0>
 8001352:	2305      	movs	r3, #5
 8001354:	e7da      	b.n	800130c <HAL_GPIO_DeInit+0xe0>
 8001356:	2306      	movs	r3, #6
 8001358:	e7d8      	b.n	800130c <HAL_GPIO_DeInit+0xe0>
 800135a:	2307      	movs	r3, #7
 800135c:	e7d6      	b.n	800130c <HAL_GPIO_DeInit+0xe0>
 800135e:	2308      	movs	r3, #8
 8001360:	e7d4      	b.n	800130c <HAL_GPIO_DeInit+0xe0>
 8001362:	bf00      	nop
 8001364:	40013c00 	.word	0x40013c00
 8001368:	40020000 	.word	0x40020000
 800136c:	40021800 	.word	0x40021800
 8001370:	40021c00 	.word	0x40021c00

08001374 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001374:	b10a      	cbz	r2, 800137a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001376:	6181      	str	r1, [r0, #24]
 8001378:	4770      	bx	lr
 800137a:	0409      	lsls	r1, r1, #16
 800137c:	e7fb      	b.n	8001376 <HAL_GPIO_WritePin+0x2>
	...

08001380 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001380:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001382:	4604      	mov	r4, r0
 8001384:	2800      	cmp	r0, #0
 8001386:	d062      	beq.n	800144e <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001388:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800138c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001390:	b91b      	cbnz	r3, 800139a <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001392:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001396:	f002 f9a3 	bl	80036e0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800139a:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800139c:	4e2d      	ldr	r6, [pc, #180]	; (8001454 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 800139e:	4d2e      	ldr	r5, [pc, #184]	; (8001458 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013a0:	2324      	movs	r3, #36	; 0x24
 80013a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80013a6:	6813      	ldr	r3, [r2, #0]
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013ae:	f000 fd2f 	bl	8001e10 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013b2:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80013b4:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80013b6:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013ba:	42b3      	cmp	r3, r6
 80013bc:	bf84      	itt	hi
 80013be:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80013c2:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80013c4:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013c6:	bf91      	iteee	ls
 80013c8:	1c69      	addls	r1, r5, #1
 80013ca:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80013ce:	fbb1 f1f5 	udivhi	r1, r1, r5
 80013d2:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013d4:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013d6:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013d8:	d821      	bhi.n	800141e <HAL_I2C_Init+0x9e>
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80013e0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	bf98      	it	ls
 80013e8:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013ea:	6a21      	ldr	r1, [r4, #32]
 80013ec:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013ee:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013f0:	430b      	orrs	r3, r1
 80013f2:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80013f4:	68e1      	ldr	r1, [r4, #12]
 80013f6:	6923      	ldr	r3, [r4, #16]
 80013f8:	430b      	orrs	r3, r1
 80013fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80013fc:	69a1      	ldr	r1, [r4, #24]
 80013fe:	6963      	ldr	r3, [r4, #20]
 8001400:	430b      	orrs	r3, r1
 8001402:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001404:	6813      	ldr	r3, [r2, #0]
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800140c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800140e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001410:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001412:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001416:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001418:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 800141c:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800141e:	68a1      	ldr	r1, [r4, #8]
 8001420:	b949      	cbnz	r1, 8001436 <HAL_I2C_Init+0xb6>
 8001422:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001426:	fbb0 f0f3 	udiv	r0, r0, r3
 800142a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800142e:	b163      	cbz	r3, 800144a <HAL_I2C_Init+0xca>
 8001430:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001434:	e7d9      	b.n	80013ea <HAL_I2C_Init+0x6a>
 8001436:	2119      	movs	r1, #25
 8001438:	434b      	muls	r3, r1
 800143a:	fbb0 f0f3 	udiv	r0, r0, r3
 800143e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001442:	b113      	cbz	r3, 800144a <HAL_I2C_Init+0xca>
 8001444:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001448:	e7cf      	b.n	80013ea <HAL_I2C_Init+0x6a>
 800144a:	2001      	movs	r0, #1
 800144c:	e7cd      	b.n	80013ea <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 800144e:	2001      	movs	r0, #1
}
 8001450:	bd70      	pop	{r4, r5, r6, pc}
 8001452:	bf00      	nop
 8001454:	000186a0 	.word	0x000186a0
 8001458:	000f4240 	.word	0x000f4240

0800145c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800145c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1 = 0U;
  uint32_t tmp2 = 0U;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001460:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001462:	6804      	ldr	r4, [r0, #0]
 8001464:	684f      	ldr	r7, [r1, #4]
 8001466:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001468:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 800146c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001470:	3284      	adds	r2, #132	; 0x84
 8001472:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001474:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001478:	6858      	ldr	r0, [r3, #4]
 800147a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 800147e:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001480:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001482:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001486:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800148a:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800148c:	4430      	add	r0, r6
 800148e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001492:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001494:	68e0      	ldr	r0, [r4, #12]
 8001496:	68cd      	ldr	r5, [r1, #12]
 8001498:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800149c:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800149e:	6898      	ldr	r0, [r3, #8]
 80014a0:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80014a4:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 80014a6:	68e6      	ldr	r6, [r4, #12]
 80014a8:	6888      	ldr	r0, [r1, #8]
 80014aa:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80014ae:	3001      	adds	r0, #1
 80014b0:	4430      	add	r0, r6
 80014b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80014b6:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80014b8:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80014ba:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80014bc:	f020 0007 	bic.w	r0, r0, #7
 80014c0:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80014c2:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80014c6:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80014c8:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80014ca:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80014ce:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80014d2:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80014d6:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80014da:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80014de:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80014e2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014e6:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80014e8:	6958      	ldr	r0, [r3, #20]
 80014ea:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80014ee:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80014f0:	6948      	ldr	r0, [r1, #20]
 80014f2:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80014f4:	69d8      	ldr	r0, [r3, #28]
 80014f6:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80014fa:	f020 0007 	bic.w	r0, r0, #7
 80014fe:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001500:	6a08      	ldr	r0, [r1, #32]
 8001502:	69cd      	ldr	r5, [r1, #28]
 8001504:	4305      	orrs	r5, r0
 8001506:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001508:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800150a:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800150c:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001510:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001512:	b31e      	cbz	r6, 800155c <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001514:	2e01      	cmp	r6, #1
 8001516:	d023      	beq.n	8001560 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001518:	1eb0      	subs	r0, r6, #2
 800151a:	2802      	cmp	r0, #2
 800151c:	d922      	bls.n	8001564 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800151e:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8001520:	bf0c      	ite	eq
 8001522:	2002      	moveq	r0, #2
 8001524:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001526:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001528:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800152c:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800152e:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001530:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001532:	eba7 070e 	sub.w	r7, r7, lr
 8001536:	4345      	muls	r5, r0
 8001538:	4378      	muls	r0, r7
 800153a:	3003      	adds	r0, #3
 800153c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001540:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001542:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001544:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001548:	f020 0007 	bic.w	r0, r0, #7
 800154c:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800154e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001550:	58a3      	ldr	r3, [r4, r2]
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	50a3      	str	r3, [r4, r2]
 8001558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800155c:	2004      	movs	r0, #4
 800155e:	e7e2      	b.n	8001526 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8001560:	2003      	movs	r0, #3
 8001562:	e7e0      	b.n	8001526 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8001564:	2002      	movs	r0, #2
 8001566:	e7de      	b.n	8001526 <LTDC_SetConfig+0xca>

08001568 <HAL_LTDC_Init>:
{
 8001568:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 800156a:	4604      	mov	r4, r0
 800156c:	2800      	cmp	r0, #0
 800156e:	d063      	beq.n	8001638 <HAL_LTDC_Init+0xd0>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8001570:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001574:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001578:	b91b      	cbnz	r3, 8001582 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800157a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800157e:	f002 f8e7 	bl	8003750 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001582:	2302      	movs	r3, #2
 8001584:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001588:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800158a:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001592:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001594:	6862      	ldr	r2, [r4, #4]
 8001596:	6999      	ldr	r1, [r3, #24]
 8001598:	4302      	orrs	r2, r0
 800159a:	68e0      	ldr	r0, [r4, #12]
 800159c:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800159e:	6920      	ldr	r0, [r4, #16]
 80015a0:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80015a2:	430a      	orrs	r2, r1
 80015a4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	4924      	ldr	r1, [pc, #144]	; (800163c <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80015aa:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80015ac:	400a      	ands	r2, r1
 80015ae:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80015b6:	69a0      	ldr	r0, [r4, #24]
 80015b8:	4302      	orrs	r2, r0
 80015ba:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80015bc:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80015be:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80015c0:	400a      	ands	r2, r1
 80015c2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80015ca:	6a20      	ldr	r0, [r4, #32]
 80015cc:	4302      	orrs	r2, r0
 80015ce:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80015d0:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80015d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80015d4:	400a      	ands	r2, r1
 80015d6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80015de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80015e0:	4302      	orrs	r2, r0
 80015e2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	4011      	ands	r1, r2
 80015e8:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80015ea:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80015ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80015ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80015f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80015f4:	430a      	orrs	r2, r1
 80015f6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80015f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80015fa:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80015fe:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001602:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8001606:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001608:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800160a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800160e:	430a      	orrs	r2, r1
 8001610:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001614:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001618:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800161a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800161c:	f042 0206 	orr.w	r2, r2, #6
 8001620:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8001622:	699a      	ldr	r2, [r3, #24]
 8001624:	f042 0201 	orr.w	r2, r2, #1
 8001628:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800162a:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800162c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800162e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8001632:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8001636:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001638:	2001      	movs	r0, #1
}
 800163a:	bd38      	pop	{r3, r4, r5, pc}
 800163c:	f000f800 	.word	0xf000f800

08001640 <HAL_LTDC_DeInit>:
{
 8001640:	b510      	push	{r4, lr}
 8001642:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc); 
 8001644:	f002 f900 	bl	8003848 <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001648:	2000      	movs	r0, #0
 800164a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  __HAL_UNLOCK(hltdc);
 800164e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_RESET;
 8001652:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
}
 8001656:	bd10      	pop	{r4, pc}

08001658 <HAL_LTDC_ConfigLayer>:
{   
 8001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800165a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800165e:	2b01      	cmp	r3, #1
{   
 8001660:	4606      	mov	r6, r0
 8001662:	468e      	mov	lr, r1
 8001664:	4694      	mov	ip, r2
 8001666:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 800166a:	d01d      	beq.n	80016a8 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800166c:	2434      	movs	r4, #52	; 0x34
 800166e:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001670:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001674:	fb04 6402 	mla	r4, r4, r2, r6
 8001678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 800167a:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800167c:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 800167e:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001690:	4630      	mov	r0, r6
 8001692:	4662      	mov	r2, ip
 8001694:	4671      	mov	r1, lr
 8001696:	f7ff fee1 	bl	800145c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800169a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800169c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800169e:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80016a0:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80016a4:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80016a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080016aa <HAL_LTDC_ConfigColorKeying>:
  __HAL_LOCK(hltdc);
 80016aa:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80016ae:	2b01      	cmp	r3, #1
{
 80016b0:	b510      	push	{r4, lr}
 80016b2:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hltdc);
 80016b6:	d013      	beq.n	80016e0 <HAL_LTDC_ConfigColorKeying+0x36>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 80016b8:	6804      	ldr	r4, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80016ba:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 80016be:	eb04 12c2 	add.w	r2, r4, r2, lsl #7
 80016c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80016c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80016ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80016ce:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 80016d0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80016d4:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80016d6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80016da:	2300      	movs	r3, #0
 80016dc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80016e0:	4618      	mov	r0, r3
}
 80016e2:	bd10      	pop	{r4, pc}

080016e4 <HAL_LTDC_ConfigCLUT>:
{
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80016e6:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 80016ea:	2c01      	cmp	r4, #1
 80016ec:	f04f 0402 	mov.w	r4, #2
 80016f0:	d031      	beq.n	8001756 <HAL_LTDC_ConfigCLUT+0x72>
 80016f2:	2501      	movs	r5, #1
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 80016f4:	01de      	lsls	r6, r3, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 80016f6:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 80016fa:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80016fc:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
 8001700:	3684      	adds	r6, #132	; 0x84
  for(counter = 0U; (counter < CLUTSize); counter++)
 8001702:	2500      	movs	r5, #0
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8001704:	fb04 0303 	mla	r3, r4, r3, r0
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8001708:	f04f 5e88 	mov.w	lr, #285212672	; 0x11000000
  for(counter = 0U; (counter < CLUTSize); counter++)
 800170c:	4295      	cmp	r5, r2
 800170e:	d107      	bne.n	8001720 <HAL_LTDC_ConfigCLUT+0x3c>
  hltdc->State = HAL_LTDC_STATE_READY; 
 8001710:	2301      	movs	r3, #1
 8001712:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);  
 8001716:	2300      	movs	r3, #0
 8001718:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 800171c:	4618      	mov	r0, r3
 800171e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8001720:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001722:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8001726:	2c06      	cmp	r4, #6
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8001728:	bf03      	ittte	eq
 800172a:	b2fc      	uxtbeq	r4, r7
 800172c:	fb0e fc05 	muleq.w	ip, lr, r5
 8001730:	ea44 040c 	orreq.w	r4, r4, ip
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8001734:	b2bc      	uxthne	r4, r7
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8001736:	bf0c      	ite	eq
 8001738:	f407 4c7f 	andeq.w	ip, r7, #65280	; 0xff00
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 800173c:	ea44 6405 	orrne.w	r4, r4, r5, lsl #24
 8001740:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8001744:	bf08      	it	eq
 8001746:	ea44 040c 	orreq.w	r4, r4, ip
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 800174a:	433c      	orrs	r4, r7
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 800174c:	6807      	ldr	r7, [r0, #0]
 800174e:	4437      	add	r7, r6
  for(counter = 0U; (counter < CLUTSize); counter++)
 8001750:	3501      	adds	r5, #1
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8001752:	643c      	str	r4, [r7, #64]	; 0x40
 8001754:	e7da      	b.n	800170c <HAL_LTDC_ConfigCLUT+0x28>
  __HAL_LOCK(hltdc);
 8001756:	4620      	mov	r0, r4
}
 8001758:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800175a <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 800175a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800175e:	2b01      	cmp	r3, #1
 8001760:	f04f 0302 	mov.w	r3, #2
 8001764:	d00f      	beq.n	8001786 <HAL_LTDC_EnableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8001766:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001768:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800176c:	3184      	adds	r1, #132	; 0x84
 800176e:	6803      	ldr	r3, [r0, #0]
 8001770:	585a      	ldr	r2, [r3, r1]
 8001772:	f042 0202 	orr.w	r2, r2, #2
 8001776:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001778:	2201      	movs	r2, #1
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 800177c:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY; 
 800177e:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001782:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001786:	4618      	mov	r0, r3
}
 8001788:	4770      	bx	lr

0800178a <HAL_LTDC_DisableColorKeying>:
  __HAL_LOCK(hltdc);
 800178a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800178e:	2b01      	cmp	r3, #1
 8001790:	f04f 0302 	mov.w	r3, #2
 8001794:	d00f      	beq.n	80017b6 <HAL_LTDC_DisableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8001796:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001798:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800179c:	3184      	adds	r1, #132	; 0x84
 800179e:	6803      	ldr	r3, [r0, #0]
 80017a0:	585a      	ldr	r2, [r3, r1]
 80017a2:	f022 0202 	bic.w	r2, r2, #2
 80017a6:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80017a8:	2201      	movs	r2, #1
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 80017ac:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY; 
 80017ae:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80017b2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80017b6:	4618      	mov	r0, r3
}
 80017b8:	4770      	bx	lr

080017ba <HAL_LTDC_EnableCLUT>:
  __HAL_LOCK(hltdc);
 80017ba:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	f04f 0302 	mov.w	r3, #2
 80017c4:	d00f      	beq.n	80017e6 <HAL_LTDC_EnableCLUT+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 80017c6:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80017c8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 80017cc:	3184      	adds	r1, #132	; 0x84
 80017ce:	6803      	ldr	r3, [r0, #0]
 80017d0:	585a      	ldr	r2, [r3, r1]
 80017d2:	f042 0210 	orr.w	r2, r2, #16
 80017d6:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80017d8:	2201      	movs	r2, #1
 80017da:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 80017dc:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY; 
 80017de:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80017e2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80017e6:	4618      	mov	r0, r3
}
 80017e8:	4770      	bx	lr

080017ea <HAL_LTDC_SetWindowPosition>:
{
 80017ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80017ec:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 80017f0:	2c01      	cmp	r4, #1
{
 80017f2:	4605      	mov	r5, r0
 80017f4:	469e      	mov	lr, r3
 80017f6:	f04f 0402 	mov.w	r4, #2
  __HAL_LOCK(hltdc);
 80017fa:	d01d      	beq.n	8001838 <HAL_LTDC_SetWindowPosition+0x4e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80017fc:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  pLayerCfg->WindowX0 = X0;
 8001800:	2434      	movs	r4, #52	; 0x34
 8001802:	435c      	muls	r4, r3
 8001804:	1906      	adds	r6, r0, r4
  __HAL_LOCK(hltdc);
 8001806:	2701      	movs	r7, #1
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8001808:	6e33      	ldr	r3, [r6, #96]	; 0x60
  __HAL_LOCK(hltdc);
 800180a:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  pLayerCfg->WindowX0 = X0;
 800180e:	63b1      	str	r1, [r6, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8001810:	4419      	add	r1, r3
 8001812:	63f1      	str	r1, [r6, #60]	; 0x3c
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8001814:	6e71      	ldr	r1, [r6, #100]	; 0x64
  pLayerCfg->WindowY0 = Y0;
 8001816:	6432      	str	r2, [r6, #64]	; 0x40
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8001818:	4411      	add	r1, r2
 800181a:	6471      	str	r1, [r6, #68]	; 0x44
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800181c:	f104 0138 	add.w	r1, r4, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001820:	4401      	add	r1, r0
 8001822:	4672      	mov	r2, lr
 8001824:	f7ff fe1a 	bl	800145c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001828:	682b      	ldr	r3, [r5, #0]
  __HAL_UNLOCK(hltdc);
 800182a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800182c:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800182e:	f885 70a1 	strb.w	r7, [r5, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001832:	f885 00a0 	strb.w	r0, [r5, #160]	; 0xa0
  return HAL_OK;
 8001836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8001838:	4620      	mov	r0, r4
}
 800183a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800183c <HAL_LTDC_SetAlpha>:
  __HAL_LOCK(hltdc);
 800183c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001840:	2b01      	cmp	r3, #1
{
 8001842:	b570      	push	{r4, r5, r6, lr}
 8001844:	f04f 0302 	mov.w	r3, #2
 8001848:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 800184a:	d015      	beq.n	8001878 <HAL_LTDC_SetAlpha+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800184c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->Alpha = Alpha;
 8001850:	2334      	movs	r3, #52	; 0x34
 8001852:	4353      	muls	r3, r2
 8001854:	18c6      	adds	r6, r0, r3
  __HAL_LOCK(hltdc);
 8001856:	2501      	movs	r5, #1
 8001858:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->Alpha = Alpha;
 800185c:	64f1      	str	r1, [r6, #76]	; 0x4c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800185e:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001862:	4401      	add	r1, r0
 8001864:	f7ff fdfa 	bl	800145c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001868:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 800186a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800186c:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800186e:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001872:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 8001876:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8001878:	4618      	mov	r0, r3
}
 800187a:	bd70      	pop	{r4, r5, r6, pc}

0800187c <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 800187c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001880:	2b01      	cmp	r3, #1
{
 8001882:	b570      	push	{r4, r5, r6, lr}
 8001884:	f04f 0302 	mov.w	r3, #2
 8001888:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 800188a:	d015      	beq.n	80018b8 <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800188c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 8001890:	2334      	movs	r3, #52	; 0x34
 8001892:	4353      	muls	r3, r2
 8001894:	18c6      	adds	r6, r0, r3
  __HAL_LOCK(hltdc);
 8001896:	2501      	movs	r5, #1
 8001898:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 800189c:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800189e:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80018a2:	4401      	add	r1, r0
 80018a4:	f7ff fdda 	bl	800145c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80018a8:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 80018aa:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80018ac:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80018ae:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80018b2:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 80018b8:	4618      	mov	r0, r3
}
 80018ba:	bd70      	pop	{r4, r5, r6, pc}

080018bc <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 80018bc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	f04f 0302 	mov.w	r3, #2
 80018c6:	d012      	beq.n	80018ee <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80018c8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80018cc:	6803      	ldr	r3, [r0, #0]
 80018ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80018d6:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_LTDC_ProgramLineEvent+0x38>)
 80018d8:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80018da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80018e8:	2300      	movs	r3, #0
 80018ea:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80018ee:	4618      	mov	r0, r3
}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40016800 	.word	0x40016800

080018f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001900:	4c18      	ldr	r4, [pc, #96]	; (8001964 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001904:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_PWREx_EnableOverDrive+0x70>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800191a:	f7ff f9d1 	bl	8000cc0 <HAL_GetTick>
 800191e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001920:	6863      	ldr	r3, [r4, #4]
 8001922:	03da      	lsls	r2, r3, #15
 8001924:	d50b      	bpl.n	800193e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001928:	4c0e      	ldr	r4, [pc, #56]	; (8001964 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800192e:	f7ff f9c7 	bl	8000cc0 <HAL_GetTick>
 8001932:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001934:	6863      	ldr	r3, [r4, #4]
 8001936:	039b      	lsls	r3, r3, #14
 8001938:	d50a      	bpl.n	8001950 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800193a:	2000      	movs	r0, #0
 800193c:	e006      	b.n	800194c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800193e:	f7ff f9bf 	bl	8000cc0 <HAL_GetTick>
 8001942:	1b40      	subs	r0, r0, r5
 8001944:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001948:	d9ea      	bls.n	8001920 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 800194a:	2003      	movs	r0, #3
}
 800194c:	b003      	add	sp, #12
 800194e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001950:	f7ff f9b6 	bl	8000cc0 <HAL_GetTick>
 8001954:	1b40      	subs	r0, r0, r5
 8001956:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800195a:	d9eb      	bls.n	8001934 <HAL_PWREx_EnableOverDrive+0x3c>
 800195c:	e7f5      	b.n	800194a <HAL_PWREx_EnableOverDrive+0x52>
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40007000 	.word	0x40007000
 8001968:	420e0040 	.word	0x420e0040
 800196c:	420e0044 	.word	0x420e0044

08001970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001974:	4604      	mov	r4, r0
 8001976:	b918      	cbnz	r0, 8001980 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001978:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800197a:	b002      	add	sp, #8
 800197c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001980:	6803      	ldr	r3, [r0, #0]
 8001982:	07dd      	lsls	r5, r3, #31
 8001984:	d410      	bmi.n	80019a8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	0798      	lsls	r0, r3, #30
 800198a:	d458      	bmi.n	8001a3e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	071a      	lsls	r2, r3, #28
 8001990:	f100 809a 	bmi.w	8001ac8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	075b      	lsls	r3, r3, #29
 8001998:	f100 80b8 	bmi.w	8001b0c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199c:	69a2      	ldr	r2, [r4, #24]
 800199e:	2a00      	cmp	r2, #0
 80019a0:	f040 8119 	bne.w	8001bd6 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80019a4:	2000      	movs	r0, #0
 80019a6:	e7e8      	b.n	800197a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019a8:	4ba6      	ldr	r3, [pc, #664]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	f002 020c 	and.w	r2, r2, #12
 80019b0:	2a04      	cmp	r2, #4
 80019b2:	d007      	beq.n	80019c4 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ba:	2a08      	cmp	r2, #8
 80019bc:	d10a      	bne.n	80019d4 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	0259      	lsls	r1, r3, #9
 80019c2:	d507      	bpl.n	80019d4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	4b9f      	ldr	r3, [pc, #636]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	039a      	lsls	r2, r3, #14
 80019ca:	d5dc      	bpl.n	8001986 <HAL_RCC_OscConfig+0x16>
 80019cc:	6863      	ldr	r3, [r4, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1d9      	bne.n	8001986 <HAL_RCC_OscConfig+0x16>
 80019d2:	e7d1      	b.n	8001978 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d4:	6863      	ldr	r3, [r4, #4]
 80019d6:	4d9b      	ldr	r5, [pc, #620]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
 80019d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019dc:	d111      	bne.n	8001a02 <HAL_RCC_OscConfig+0x92>
 80019de:	682b      	ldr	r3, [r5, #0]
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019e6:	f7ff f96b 	bl	8000cc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4d96      	ldr	r5, [pc, #600]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80019ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	682b      	ldr	r3, [r5, #0]
 80019f0:	039b      	lsls	r3, r3, #14
 80019f2:	d4c8      	bmi.n	8001986 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f4:	f7ff f964 	bl	8000cc0 <HAL_GetTick>
 80019f8:	1b80      	subs	r0, r0, r6
 80019fa:	2864      	cmp	r0, #100	; 0x64
 80019fc:	d9f7      	bls.n	80019ee <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80019fe:	2003      	movs	r0, #3
 8001a00:	e7bb      	b.n	800197a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a06:	d104      	bne.n	8001a12 <HAL_RCC_OscConfig+0xa2>
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0e:	602b      	str	r3, [r5, #0]
 8001a10:	e7e5      	b.n	80019de <HAL_RCC_OscConfig+0x6e>
 8001a12:	682a      	ldr	r2, [r5, #0]
 8001a14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a18:	602a      	str	r2, [r5, #0]
 8001a1a:	682a      	ldr	r2, [r5, #0]
 8001a1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a20:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1df      	bne.n	80019e6 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001a26:	f7ff f94b 	bl	8000cc0 <HAL_GetTick>
 8001a2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2c:	682b      	ldr	r3, [r5, #0]
 8001a2e:	039f      	lsls	r7, r3, #14
 8001a30:	d5a9      	bpl.n	8001986 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a32:	f7ff f945 	bl	8000cc0 <HAL_GetTick>
 8001a36:	1b80      	subs	r0, r0, r6
 8001a38:	2864      	cmp	r0, #100	; 0x64
 8001a3a:	d9f7      	bls.n	8001a2c <HAL_RCC_OscConfig+0xbc>
 8001a3c:	e7df      	b.n	80019fe <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a3e:	4b81      	ldr	r3, [pc, #516]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	f012 0f0c 	tst.w	r2, #12
 8001a46:	d007      	beq.n	8001a58 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a4e:	2a08      	cmp	r2, #8
 8001a50:	d111      	bne.n	8001a76 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	025e      	lsls	r6, r3, #9
 8001a56:	d40e      	bmi.n	8001a76 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a58:	4b7a      	ldr	r3, [pc, #488]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	0795      	lsls	r5, r2, #30
 8001a5e:	d502      	bpl.n	8001a66 <HAL_RCC_OscConfig+0xf6>
 8001a60:	68e2      	ldr	r2, [r4, #12]
 8001a62:	2a01      	cmp	r2, #1
 8001a64:	d188      	bne.n	8001978 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	6921      	ldr	r1, [r4, #16]
 8001a6a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a6e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001a72:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a74:	e78a      	b.n	800198c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a76:	68e2      	ldr	r2, [r4, #12]
 8001a78:	4b73      	ldr	r3, [pc, #460]	; (8001c48 <HAL_RCC_OscConfig+0x2d8>)
 8001a7a:	b1b2      	cbz	r2, 8001aaa <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a80:	f7ff f91e 	bl	8000cc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	4d6f      	ldr	r5, [pc, #444]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001a86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a88:	682b      	ldr	r3, [r5, #0]
 8001a8a:	0798      	lsls	r0, r3, #30
 8001a8c:	d507      	bpl.n	8001a9e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8e:	682b      	ldr	r3, [r5, #0]
 8001a90:	6922      	ldr	r2, [r4, #16]
 8001a92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a96:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a9a:	602b      	str	r3, [r5, #0]
 8001a9c:	e776      	b.n	800198c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff f90f 	bl	8000cc0 <HAL_GetTick>
 8001aa2:	1b80      	subs	r0, r0, r6
 8001aa4:	2802      	cmp	r0, #2
 8001aa6:	d9ef      	bls.n	8001a88 <HAL_RCC_OscConfig+0x118>
 8001aa8:	e7a9      	b.n	80019fe <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001aaa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001aac:	f7ff f908 	bl	8000cc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab0:	4d64      	ldr	r5, [pc, #400]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001ab2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab4:	682b      	ldr	r3, [r5, #0]
 8001ab6:	0799      	lsls	r1, r3, #30
 8001ab8:	f57f af68 	bpl.w	800198c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff f900 	bl	8000cc0 <HAL_GetTick>
 8001ac0:	1b80      	subs	r0, r0, r6
 8001ac2:	2802      	cmp	r0, #2
 8001ac4:	d9f6      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x144>
 8001ac6:	e79a      	b.n	80019fe <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ac8:	6962      	ldr	r2, [r4, #20]
 8001aca:	4b60      	ldr	r3, [pc, #384]	; (8001c4c <HAL_RCC_OscConfig+0x2dc>)
 8001acc:	b17a      	cbz	r2, 8001aee <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f8f5 	bl	8000cc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	4d5b      	ldr	r5, [pc, #364]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001ad8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001adc:	079f      	lsls	r7, r3, #30
 8001ade:	f53f af59 	bmi.w	8001994 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f8ed 	bl	8000cc0 <HAL_GetTick>
 8001ae6:	1b80      	subs	r0, r0, r6
 8001ae8:	2802      	cmp	r0, #2
 8001aea:	d9f6      	bls.n	8001ada <HAL_RCC_OscConfig+0x16a>
 8001aec:	e787      	b.n	80019fe <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001aee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001af0:	f7ff f8e6 	bl	8000cc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af4:	4d53      	ldr	r5, [pc, #332]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001af6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001afa:	0798      	lsls	r0, r3, #30
 8001afc:	f57f af4a 	bpl.w	8001994 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff f8de 	bl	8000cc0 <HAL_GetTick>
 8001b04:	1b80      	subs	r0, r0, r6
 8001b06:	2802      	cmp	r0, #2
 8001b08:	d9f6      	bls.n	8001af8 <HAL_RCC_OscConfig+0x188>
 8001b0a:	e778      	b.n	80019fe <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0c:	4b4d      	ldr	r3, [pc, #308]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
 8001b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b10:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001b14:	d128      	bne.n	8001b68 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	9201      	str	r2, [sp, #4]
 8001b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b2a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	4d48      	ldr	r5, [pc, #288]	; (8001c50 <HAL_RCC_OscConfig+0x2e0>)
 8001b2e:	682b      	ldr	r3, [r5, #0]
 8001b30:	05d9      	lsls	r1, r3, #23
 8001b32:	d51b      	bpl.n	8001b6c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b34:	68a3      	ldr	r3, [r4, #8]
 8001b36:	4d43      	ldr	r5, [pc, #268]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d127      	bne.n	8001b8c <HAL_RCC_OscConfig+0x21c>
 8001b3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001b44:	f7ff f8bc 	bl	8000cc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b48:	4d3e      	ldr	r5, [pc, #248]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001b4a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b52:	079b      	lsls	r3, r3, #30
 8001b54:	d539      	bpl.n	8001bca <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001b56:	2e00      	cmp	r6, #0
 8001b58:	f43f af20 	beq.w	800199c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5c:	4a39      	ldr	r2, [pc, #228]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
 8001b5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	e719      	b.n	800199c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001b68:	2600      	movs	r6, #0
 8001b6a:	e7df      	b.n	8001b2c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001b74:	f7ff f8a4 	bl	8000cc0 <HAL_GetTick>
 8001b78:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7a:	682b      	ldr	r3, [r5, #0]
 8001b7c:	05da      	lsls	r2, r3, #23
 8001b7e:	d4d9      	bmi.n	8001b34 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b80:	f7ff f89e 	bl	8000cc0 <HAL_GetTick>
 8001b84:	1bc0      	subs	r0, r0, r7
 8001b86:	2802      	cmp	r0, #2
 8001b88:	d9f7      	bls.n	8001b7a <HAL_RCC_OscConfig+0x20a>
 8001b8a:	e738      	b.n	80019fe <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d104      	bne.n	8001b9a <HAL_RCC_OscConfig+0x22a>
 8001b90:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	672b      	str	r3, [r5, #112]	; 0x70
 8001b98:	e7d0      	b.n	8001b3c <HAL_RCC_OscConfig+0x1cc>
 8001b9a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	672a      	str	r2, [r5, #112]	; 0x70
 8001ba2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001ba4:	f022 0204 	bic.w	r2, r2, #4
 8001ba8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1ca      	bne.n	8001b44 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001bae:	f7ff f887 	bl	8000cc0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bb6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bba:	0798      	lsls	r0, r3, #30
 8001bbc:	d5cb      	bpl.n	8001b56 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7ff f87f 	bl	8000cc0 <HAL_GetTick>
 8001bc2:	1bc0      	subs	r0, r0, r7
 8001bc4:	4540      	cmp	r0, r8
 8001bc6:	d9f7      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x248>
 8001bc8:	e719      	b.n	80019fe <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff f879 	bl	8000cc0 <HAL_GetTick>
 8001bce:	1bc0      	subs	r0, r0, r7
 8001bd0:	4540      	cmp	r0, r8
 8001bd2:	d9bd      	bls.n	8001b50 <HAL_RCC_OscConfig+0x1e0>
 8001bd4:	e713      	b.n	80019fe <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd6:	4d1b      	ldr	r5, [pc, #108]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
 8001bd8:	68ab      	ldr	r3, [r5, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	f43f aeca 	beq.w	8001978 <HAL_RCC_OscConfig+0x8>
 8001be4:	4e1b      	ldr	r6, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x2e4>)
 8001be6:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001bea:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bec:	d134      	bne.n	8001c58 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001bee:	f7ff f867 	bl	8000cc0 <HAL_GetTick>
 8001bf2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf4:	682b      	ldr	r3, [r5, #0]
 8001bf6:	0199      	lsls	r1, r3, #6
 8001bf8:	d41e      	bmi.n	8001c38 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bfa:	6a22      	ldr	r2, [r4, #32]
 8001bfc:	69e3      	ldr	r3, [r4, #28]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c02:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0e:	4c0d      	ldr	r4, [pc, #52]	; (8001c44 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c10:	0852      	lsrs	r2, r2, #1
 8001c12:	3a01      	subs	r2, #1
 8001c14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c18:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c1e:	f7ff f84f 	bl	8000cc0 <HAL_GetTick>
 8001c22:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	019a      	lsls	r2, r3, #6
 8001c28:	f53f aebc 	bmi.w	80019a4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7ff f848 	bl	8000cc0 <HAL_GetTick>
 8001c30:	1b40      	subs	r0, r0, r5
 8001c32:	2802      	cmp	r0, #2
 8001c34:	d9f6      	bls.n	8001c24 <HAL_RCC_OscConfig+0x2b4>
 8001c36:	e6e2      	b.n	80019fe <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f842 	bl	8000cc0 <HAL_GetTick>
 8001c3c:	1bc0      	subs	r0, r0, r7
 8001c3e:	2802      	cmp	r0, #2
 8001c40:	d9d8      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x284>
 8001c42:	e6dc      	b.n	80019fe <HAL_RCC_OscConfig+0x8e>
 8001c44:	40023800 	.word	0x40023800
 8001c48:	42470000 	.word	0x42470000
 8001c4c:	42470e80 	.word	0x42470e80
 8001c50:	40007000 	.word	0x40007000
 8001c54:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001c58:	f7ff f832 	bl	8000cc0 <HAL_GetTick>
 8001c5c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	682b      	ldr	r3, [r5, #0]
 8001c60:	019b      	lsls	r3, r3, #6
 8001c62:	f57f ae9f 	bpl.w	80019a4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff f82b 	bl	8000cc0 <HAL_GetTick>
 8001c6a:	1b00      	subs	r0, r0, r4
 8001c6c:	2802      	cmp	r0, #2
 8001c6e:	d9f6      	bls.n	8001c5e <HAL_RCC_OscConfig+0x2ee>
 8001c70:	e6c5      	b.n	80019fe <HAL_RCC_OscConfig+0x8e>
 8001c72:	bf00      	nop

08001c74 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c74:	4913      	ldr	r1, [pc, #76]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001c76:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c78:	688b      	ldr	r3, [r1, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d003      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x16>
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d003      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c86:	4810      	ldr	r0, [pc, #64]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c88:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001c8a:	4810      	ldr	r0, [pc, #64]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x58>)
 8001c8c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c8e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c90:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c92:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c94:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c98:	bf14      	ite	ne
 8001c9a:	480c      	ldrne	r0, [pc, #48]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9c:	480a      	ldreq	r0, [pc, #40]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001ca2:	bf18      	it	ne
 8001ca4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001caa:	fba1 0100 	umull	r0, r1, r1, r0
 8001cae:	f7fe fa9d 	bl	80001ec <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x50>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001cba:	3301      	adds	r3, #1
 8001cbc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001cbe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cc2:	bd08      	pop	{r3, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	00f42400 	.word	0x00f42400
 8001ccc:	007a1200 	.word	0x007a1200

08001cd0 <HAL_RCC_ClockConfig>:
{
 8001cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	b910      	cbnz	r0, 8001ce0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
 8001cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b44      	ldr	r3, [pc, #272]	; (8001df4 <HAL_RCC_ClockConfig+0x124>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	f002 020f 	and.w	r2, r2, #15
 8001ce8:	428a      	cmp	r2, r1
 8001cea:	d328      	bcc.n	8001d3e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	6821      	ldr	r1, [r4, #0]
 8001cee:	078f      	lsls	r7, r1, #30
 8001cf0:	d42d      	bmi.n	8001d4e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf2:	07c8      	lsls	r0, r1, #31
 8001cf4:	d440      	bmi.n	8001d78 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <HAL_RCC_ClockConfig+0x124>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f002 020f 	and.w	r2, r2, #15
 8001cfe:	4295      	cmp	r5, r2
 8001d00:	d366      	bcc.n	8001dd0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d02:	6822      	ldr	r2, [r4, #0]
 8001d04:	0751      	lsls	r1, r2, #29
 8001d06:	d46c      	bmi.n	8001de2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d08:	0713      	lsls	r3, r2, #28
 8001d0a:	d507      	bpl.n	8001d1c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d0c:	4a3a      	ldr	r2, [pc, #232]	; (8001df8 <HAL_RCC_ClockConfig+0x128>)
 8001d0e:	6921      	ldr	r1, [r4, #16]
 8001d10:	6893      	ldr	r3, [r2, #8]
 8001d12:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d16:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d1a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d1c:	f7ff ffaa 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001d20:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <HAL_RCC_ClockConfig+0x128>)
 8001d22:	4a36      	ldr	r2, [pc, #216]	; (8001dfc <HAL_RCC_ClockConfig+0x12c>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d2a:	5cd3      	ldrb	r3, [r2, r3]
 8001d2c:	40d8      	lsrs	r0, r3
 8001d2e:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <HAL_RCC_ClockConfig+0x130>)
 8001d30:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7fe ff7a 	bl	8000c2c <HAL_InitTick>
  return HAL_OK;
 8001d38:	2000      	movs	r0, #0
 8001d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	b2ca      	uxtb	r2, r1
 8001d40:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	4299      	cmp	r1, r3
 8001d4a:	d1c6      	bne.n	8001cda <HAL_RCC_ClockConfig+0xa>
 8001d4c:	e7ce      	b.n	8001cec <HAL_RCC_ClockConfig+0x1c>
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	bf1e      	ittt	ne
 8001d56:	689a      	ldrne	r2, [r3, #8]
 8001d58:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001d5c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d60:	bf42      	ittt	mi
 8001d62:	689a      	ldrmi	r2, [r3, #8]
 8001d64:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001d68:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	68a0      	ldr	r0, [r4, #8]
 8001d6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d72:	4302      	orrs	r2, r0
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	e7bc      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d78:	6862      	ldr	r2, [r4, #4]
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <HAL_RCC_ClockConfig+0x128>)
 8001d7c:	2a01      	cmp	r2, #1
 8001d7e:	d11d      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d86:	d0a8      	beq.n	8001cda <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d88:	4e1b      	ldr	r6, [pc, #108]	; (8001df8 <HAL_RCC_ClockConfig+0x128>)
 8001d8a:	68b3      	ldr	r3, [r6, #8]
 8001d8c:	f023 0303 	bic.w	r3, r3, #3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d94:	f7fe ff94 	bl	8000cc0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d98:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001d9c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	68b3      	ldr	r3, [r6, #8]
 8001da0:	6862      	ldr	r2, [r4, #4]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001daa:	d0a4      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dac:	f7fe ff88 	bl	8000cc0 <HAL_GetTick>
 8001db0:	1bc0      	subs	r0, r0, r7
 8001db2:	4540      	cmp	r0, r8
 8001db4:	d9f3      	bls.n	8001d9e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001db6:	2003      	movs	r0, #3
}
 8001db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dbc:	1e91      	subs	r1, r2, #2
 8001dbe:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc2:	d802      	bhi.n	8001dca <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001dc8:	e7dd      	b.n	8001d86 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dca:	f013 0f02 	tst.w	r3, #2
 8001dce:	e7da      	b.n	8001d86 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd0:	b2ea      	uxtb	r2, r5
 8001dd2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	429d      	cmp	r5, r3
 8001ddc:	f47f af7d 	bne.w	8001cda <HAL_RCC_ClockConfig+0xa>
 8001de0:	e78f      	b.n	8001d02 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de2:	4905      	ldr	r1, [pc, #20]	; (8001df8 <HAL_RCC_ClockConfig+0x128>)
 8001de4:	68e0      	ldr	r0, [r4, #12]
 8001de6:	688b      	ldr	r3, [r1, #8]
 8001de8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001dec:	4303      	orrs	r3, r0
 8001dee:	608b      	str	r3, [r1, #8]
 8001df0:	e78a      	b.n	8001d08 <HAL_RCC_ClockConfig+0x38>
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	080090fd 	.word	0x080090fd
 8001e00:	2000000c 	.word	0x2000000c

08001e04 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001e04:	4b01      	ldr	r3, [pc, #4]	; (8001e0c <HAL_RCC_GetHCLKFreq+0x8>)
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	2000000c 	.word	0x2000000c

08001e10 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001e1a:	5cd3      	ldrb	r3, [r2, r3]
 8001e1c:	4a03      	ldr	r2, [pc, #12]	; (8001e2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e1e:	6810      	ldr	r0, [r2, #0]
}
 8001e20:	40d8      	lsrs	r0, r3
 8001e22:	4770      	bx	lr
 8001e24:	40023800 	.word	0x40023800
 8001e28:	0800910d 	.word	0x0800910d
 8001e2c:	2000000c 	.word	0x2000000c

08001e30 <HAL_RCCEx_PeriphCLKConfig>:

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e30:	6803      	ldr	r3, [r0, #0]
{
 8001e32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e34:	079a      	lsls	r2, r3, #30
{
 8001e36:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e38:	f040 8088 	bne.w	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x11c>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	f013 0f0c 	tst.w	r3, #12
 8001e42:	d044      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e44:	4d80      	ldr	r5, [pc, #512]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x218>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e46:	4e81      	ldr	r6, [pc, #516]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001e4c:	f7fe ff38 	bl	8000cc0 <HAL_GetTick>
 8001e50:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e52:	6833      	ldr	r3, [r6, #0]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	f100 80bd 	bmi.w	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001e5a:	6821      	ldr	r1, [r4, #0]
 8001e5c:	074f      	lsls	r7, r1, #29
 8001e5e:	d515      	bpl.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e60:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e62:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e66:	6920      	ldr	r0, [r4, #16]
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001e6e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e72:	4313      	orrs	r3, r2
 8001e74:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e78:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8001e7c:	6a22      	ldr	r2, [r4, #32]
 8001e7e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001e82:	3a01      	subs	r2, #1
 8001e84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e88:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001e8c:	070e      	lsls	r6, r1, #28
 8001e8e:	d514      	bpl.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e90:	4a6e      	ldr	r2, [pc, #440]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001e92:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e94:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001e98:	6920      	ldr	r0, [r4, #16]
 8001e9a:	071b      	lsls	r3, r3, #28
 8001e9c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001ea0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001eaa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001eae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001eb0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001eba:	2301      	movs	r3, #1
 8001ebc:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ebe:	f7fe feff 	bl	8000cc0 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ec2:	4d62      	ldr	r5, [pc, #392]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8001ec4:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ec6:	682b      	ldr	r3, [r5, #0]
 8001ec8:	0098      	lsls	r0, r3, #2
 8001eca:	f140 808a 	bpl.w	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	069a      	lsls	r2, r3, #26
 8001ed2:	d531      	bpl.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	4b5c      	ldr	r3, [pc, #368]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x21c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001eda:	4d5d      	ldr	r5, [pc, #372]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x220>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ede:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001eee:	682b      	ldr	r3, [r5, #0]
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ef6:	f7fe fee3 	bl	8000cc0 <HAL_GetTick>
 8001efa:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001efc:	682b      	ldr	r3, [r5, #0]
 8001efe:	05d9      	lsls	r1, r3, #23
 8001f00:	d576      	bpl.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f02:	4d52      	ldr	r5, [pc, #328]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8001f04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f06:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f0a:	d177      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f0e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001f12:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001f16:	4a4d      	ldr	r2, [pc, #308]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8001f18:	f040 8091 	bne.w	800203e <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8001f1c:	6891      	ldr	r1, [r2, #8]
 8001f1e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001f22:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001f26:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001f2a:	4301      	orrs	r1, r0
 8001f2c:	6091      	str	r1, [r2, #8]
 8001f2e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f38:	6820      	ldr	r0, [r4, #0]
 8001f3a:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f3e:	bf1f      	itttt	ne
 8001f40:	4b44      	ldrne	r3, [pc, #272]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f42:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8001f46:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 8001f48:	2000      	movne	r0, #0
 8001f4a:	e041      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_PLLI2S_DISABLE();
 8001f4c:	4d42      	ldr	r5, [pc, #264]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x228>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f4e:	4e3f      	ldr	r6, [pc, #252]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001f54:	f7fe feb4 	bl	8000cc0 <HAL_GetTick>
 8001f58:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f5a:	6833      	ldr	r3, [r6, #0]
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	d431      	bmi.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f60:	6822      	ldr	r2, [r4, #0]
 8001f62:	07d7      	lsls	r7, r2, #31
 8001f64:	d506      	bpl.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001f66:	68a3      	ldr	r3, [r4, #8]
 8001f68:	6861      	ldr	r1, [r4, #4]
 8001f6a:	071b      	lsls	r3, r3, #28
 8001f6c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001f70:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001f74:	0790      	lsls	r0, r2, #30
 8001f76:	d515      	bpl.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x174>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f78:	4a34      	ldr	r2, [pc, #208]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001f7a:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f7c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001f80:	6860      	ldr	r0, [r4, #4]
 8001f82:	061b      	lsls	r3, r3, #24
 8001f84:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001f88:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f92:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001f96:	69e3      	ldr	r3, [r4, #28]
 8001f98:	f021 011f 	bic.w	r1, r1, #31
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fe8a 	bl	8000cc0 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fac:	4d27      	ldr	r5, [pc, #156]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8001fae:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fb0:	682b      	ldr	r3, [r5, #0]
 8001fb2:	0119      	lsls	r1, r3, #4
 8001fb4:	f53f af42 	bmi.w	8001e3c <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001fb8:	f7fe fe82 	bl	8000cc0 <HAL_GetTick>
 8001fbc:	1b80      	subs	r0, r0, r6
 8001fbe:	2802      	cmp	r0, #2
 8001fc0:	d9f6      	bls.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8001fc2:	e004      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001fc4:	f7fe fe7c 	bl	8000cc0 <HAL_GetTick>
 8001fc8:	1bc0      	subs	r0, r0, r7
 8001fca:	2802      	cmp	r0, #2
 8001fcc:	d9c5      	bls.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
 8001fce:	2003      	movs	r0, #3
}
 8001fd0:	b003      	add	sp, #12
 8001fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fd4:	f7fe fe74 	bl	8000cc0 <HAL_GetTick>
 8001fd8:	1bc0      	subs	r0, r0, r7
 8001fda:	2802      	cmp	r0, #2
 8001fdc:	f67f af39 	bls.w	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8001fe0:	e7f5      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fe2:	f7fe fe6d 	bl	8000cc0 <HAL_GetTick>
 8001fe6:	1b80      	subs	r0, r0, r6
 8001fe8:	2802      	cmp	r0, #2
 8001fea:	f67f af6c 	bls.w	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8001fee:	e7ee      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ff0:	f7fe fe66 	bl	8000cc0 <HAL_GetTick>
 8001ff4:	1b80      	subs	r0, r0, r6
 8001ff6:	2802      	cmp	r0, #2
 8001ff8:	d980      	bls.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001ffa:	e7e8      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x19e>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ffc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ffe:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002002:	4293      	cmp	r3, r2
 8002004:	d082      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xdc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002006:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800200a:	2101      	movs	r1, #1
 800200c:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800200e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002012:	2100      	movs	r1, #0
 8002014:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002016:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002018:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800201a:	07da      	lsls	r2, r3, #31
 800201c:	f57f af76 	bpl.w	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 8002020:	f7fe fe4e 	bl	8000cc0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002028:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800202c:	079b      	lsls	r3, r3, #30
 800202e:	f53f af6d 	bmi.w	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7fe fe45 	bl	8000cc0 <HAL_GetTick>
 8002036:	1b80      	subs	r0, r0, r6
 8002038:	42b8      	cmp	r0, r7
 800203a:	d9f6      	bls.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800203c:	e7c7      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800203e:	6891      	ldr	r1, [r2, #8]
 8002040:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002044:	e772      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002046:	bf00      	nop
 8002048:	42470070 	.word	0x42470070
 800204c:	40023800 	.word	0x40023800
 8002050:	40007000 	.word	0x40007000
 8002054:	424711e0 	.word	0x424711e0
 8002058:	42470068 	.word	0x42470068
 800205c:	42470e40 	.word	0x42470e40

08002060 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8002060:	b538      	push	{r3, r4, r5, lr}
 8002062:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8002064:	4604      	mov	r4, r0
 8002066:	b1c8      	cbz	r0, 800209c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002068:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800206c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002070:	b91b      	cbnz	r3, 800207a <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8002072:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002076:	f001 fc5f 	bl	8003938 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800207a:	2302      	movs	r3, #2
 800207c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002080:	1d21      	adds	r1, r4, #4
 8002082:	6820      	ldr	r0, [r4, #0]
 8002084:	f000 f98b 	bl	800239e <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002088:	6862      	ldr	r2, [r4, #4]
 800208a:	6820      	ldr	r0, [r4, #0]
 800208c:	4629      	mov	r1, r5
 800208e:	f000 f9c5 	bl	800241c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002092:	2301      	movs	r3, #1
 8002094:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8002098:	2000      	movs	r0, #0
 800209a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800209c:	2001      	movs	r0, #1
}
 800209e:	bd38      	pop	{r3, r4, r5, pc}

080020a0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80020a0:	b538      	push	{r3, r4, r5, lr}
 80020a2:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80020a4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80020a8:	b2c0      	uxtb	r0, r0
 80020aa:	2802      	cmp	r0, #2
{
 80020ac:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80020ae:	d00d      	beq.n	80020cc <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80020b0:	2302      	movs	r3, #2
 80020b2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80020b6:	6820      	ldr	r0, [r4, #0]
 80020b8:	f000 f9f8 	bl	80024ac <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80020bc:	682b      	ldr	r3, [r5, #0]
 80020be:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80020c0:	bf0c      	ite	eq
 80020c2:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80020c4:	2301      	movne	r3, #1
 80020c6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80020ca:	2000      	movs	r0, #0
}
 80020cc:	bd38      	pop	{r3, r4, r5, pc}

080020ce <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80020ce:	b510      	push	{r4, lr}
 80020d0:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80020d2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80020d6:	b2c0      	uxtb	r0, r0
 80020d8:	2802      	cmp	r0, #2
 80020da:	d009      	beq.n	80020f0 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80020dc:	2302      	movs	r3, #2
 80020de:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80020e2:	6820      	ldr	r0, [r4, #0]
 80020e4:	f000 fa07 	bl	80024f6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80020ee:	2000      	movs	r0, #0
}
 80020f0:	bd10      	pop	{r4, pc}

080020f2 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80020f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020f6:	9e06      	ldr	r6, [sp, #24]
 80020f8:	4604      	mov	r4, r0
 80020fa:	4688      	mov	r8, r1
 80020fc:	4617      	mov	r7, r2
 80020fe:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002100:	6822      	ldr	r2, [r4, #0]
 8002102:	6893      	ldr	r3, [r2, #8]
 8002104:	ea38 0303 	bics.w	r3, r8, r3
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	429f      	cmp	r7, r3
 8002110:	d102      	bne.n	8002118 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002112:	2000      	movs	r0, #0
}
 8002114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002118:	1c6b      	adds	r3, r5, #1
 800211a:	d0f2      	beq.n	8002102 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800211c:	bb55      	cbnz	r5, 8002174 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002126:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002128:	6862      	ldr	r2, [r4, #4]
 800212a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800212e:	d10a      	bne.n	8002146 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002130:	68a2      	ldr	r2, [r4, #8]
 8002132:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002136:	d002      	beq.n	800213e <SPI_WaitFlagStateUntilTimeout+0x4c>
 8002138:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800213c:	d103      	bne.n	8002146 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002144:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002146:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002148:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800214c:	d109      	bne.n	8002162 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002154:	0412      	lsls	r2, r2, #16
 8002156:	0c12      	lsrs	r2, r2, #16
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002160:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8002162:	2301      	movs	r3, #1
 8002164:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002168:	2300      	movs	r3, #0
 800216a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800216e:	2003      	movs	r0, #3
 8002170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002174:	f7fe fda4 	bl	8000cc0 <HAL_GetTick>
 8002178:	1b80      	subs	r0, r0, r6
 800217a:	4285      	cmp	r5, r0
 800217c:	d8c0      	bhi.n	8002100 <SPI_WaitFlagStateUntilTimeout+0xe>
 800217e:	e7ce      	b.n	800211e <SPI_WaitFlagStateUntilTimeout+0x2c>

08002180 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002182:	460b      	mov	r3, r1
 8002184:	9200      	str	r2, [sp, #0]
 8002186:	2180      	movs	r1, #128	; 0x80
 8002188:	2200      	movs	r2, #0
{
 800218a:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800218c:	f7ff ffb1 	bl	80020f2 <SPI_WaitFlagStateUntilTimeout>
 8002190:	b120      	cbz	r0, 800219c <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002192:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002194:	f043 0320 	orr.w	r3, r3, #32
 8002198:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 800219a:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 800219c:	b002      	add	sp, #8
 800219e:	bd10      	pop	{r4, pc}

080021a0 <HAL_SPI_Init>:
{
 80021a0:	b510      	push	{r4, lr}
  if(hspi == NULL)
 80021a2:	4604      	mov	r4, r0
 80021a4:	2800      	cmp	r0, #0
 80021a6:	d036      	beq.n	8002216 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 80021ac:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80021b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021b4:	b91b      	cbnz	r3, 80021be <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80021b6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80021ba:	f001 fb7f 	bl	80038bc <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80021be:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80021c0:	68a0      	ldr	r0, [r4, #8]
 80021c2:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80021c4:	2302      	movs	r3, #2
 80021c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80021ca:	680b      	ldr	r3, [r1, #0]
 80021cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021d0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80021d2:	6863      	ldr	r3, [r4, #4]
 80021d4:	4303      	orrs	r3, r0
 80021d6:	68e0      	ldr	r0, [r4, #12]
 80021d8:	4303      	orrs	r3, r0
 80021da:	6920      	ldr	r0, [r4, #16]
 80021dc:	4303      	orrs	r3, r0
 80021de:	6960      	ldr	r0, [r4, #20]
 80021e0:	4303      	orrs	r3, r0
 80021e2:	69e0      	ldr	r0, [r4, #28]
 80021e4:	4303      	orrs	r3, r0
 80021e6:	6a20      	ldr	r0, [r4, #32]
 80021e8:	4303      	orrs	r3, r0
 80021ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80021ec:	4303      	orrs	r3, r0
 80021ee:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80021f2:	4303      	orrs	r3, r0
 80021f4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80021f6:	0c12      	lsrs	r2, r2, #16
 80021f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021fa:	f002 0204 	and.w	r2, r2, #4
 80021fe:	431a      	orrs	r2, r3
 8002200:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002202:	69cb      	ldr	r3, [r1, #28]
 8002204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002208:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800220a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800220c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800220e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002210:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8002214:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002216:	2001      	movs	r0, #1
}
 8002218:	bd10      	pop	{r4, pc}

0800221a <HAL_SPI_DeInit>:
{
 800221a:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800221c:	4604      	mov	r4, r0
 800221e:	b180      	cbz	r0, 8002242 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8002220:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002222:	2302      	movs	r3, #2
 8002224:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002228:	6813      	ldr	r3, [r2, #0]
 800222a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800222e:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8002230:	f001 fb6c 	bl	800390c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002234:	2000      	movs	r0, #0
 8002236:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8002238:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 800223c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  return HAL_OK;
 8002240:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002242:	2001      	movs	r0, #1
}
 8002244:	bd10      	pop	{r4, pc}

08002246 <HAL_SPI_Transmit>:
{
 8002246:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800224a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800224c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002250:	2b01      	cmp	r3, #1
{
 8002252:	4604      	mov	r4, r0
 8002254:	460d      	mov	r5, r1
 8002256:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002258:	f000 809c 	beq.w	8002394 <HAL_SPI_Transmit+0x14e>
 800225c:	2301      	movs	r3, #1
 800225e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002262:	f7fe fd2d 	bl	8000cc0 <HAL_GetTick>
 8002266:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8002268:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800226c:	b2c0      	uxtb	r0, r0
 800226e:	2801      	cmp	r0, #1
 8002270:	f040 808e 	bne.w	8002390 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 8002274:	2d00      	cmp	r5, #0
 8002276:	d04e      	beq.n	8002316 <HAL_SPI_Transmit+0xd0>
 8002278:	f1b8 0f00 	cmp.w	r8, #0
 800227c:	d04b      	beq.n	8002316 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800227e:	2303      	movs	r3, #3
 8002280:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002284:	2300      	movs	r3, #0
 8002286:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002288:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800228a:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 800228e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002290:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002292:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002294:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002296:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002298:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800229a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800229e:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 80022a0:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 80022a4:	bf02      	ittt	eq
 80022a6:	681a      	ldreq	r2, [r3, #0]
 80022a8:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 80022ac:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80022b2:	bf5e      	ittt	pl
 80022b4:	681a      	ldrpl	r2, [r3, #0]
 80022b6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80022ba:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022bc:	68e2      	ldr	r2, [r4, #12]
 80022be:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80022c2:	6862      	ldr	r2, [r4, #4]
 80022c4:	d138      	bne.n	8002338 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80022c6:	b11a      	cbz	r2, 80022d0 <HAL_SPI_Transmit+0x8a>
 80022c8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80022ca:	b292      	uxth	r2, r2
 80022cc:	2a01      	cmp	r2, #1
 80022ce:	d106      	bne.n	80022de <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 80022d0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80022d4:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 80022d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29b      	uxth	r3, r3
 80022dc:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80022de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	b993      	cbnz	r3, 800230a <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80022e4:	9700      	str	r7, [sp, #0]
 80022e6:	4633      	mov	r3, r6
 80022e8:	2201      	movs	r2, #1
 80022ea:	2102      	movs	r1, #2
 80022ec:	4620      	mov	r0, r4
 80022ee:	f7ff ff00 	bl	80020f2 <SPI_WaitFlagStateUntilTimeout>
 80022f2:	b978      	cbnz	r0, 8002314 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80022f4:	463a      	mov	r2, r7
 80022f6:	4631      	mov	r1, r6
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7ff ff41 	bl	8002180 <SPI_CheckFlag_BSY>
 80022fe:	2800      	cmp	r0, #0
 8002300:	d038      	beq.n	8002374 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002302:	2320      	movs	r3, #32
 8002304:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002306:	2001      	movs	r0, #1
    goto error;
 8002308:	e005      	b.n	8002316 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	0790      	lsls	r0, r2, #30
 8002310:	d4de      	bmi.n	80022d0 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002312:	b94e      	cbnz	r6, 8002328 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8002314:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002316:	2301      	movs	r3, #1
 8002318:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800231c:	2300      	movs	r3, #0
 800231e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002322:	b004      	add	sp, #16
 8002324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002328:	1c71      	adds	r1, r6, #1
 800232a:	d0d8      	beq.n	80022de <HAL_SPI_Transmit+0x98>
 800232c:	f7fe fcc8 	bl	8000cc0 <HAL_GetTick>
 8002330:	1bc0      	subs	r0, r0, r7
 8002332:	4286      	cmp	r6, r0
 8002334:	d8d3      	bhi.n	80022de <HAL_SPI_Transmit+0x98>
 8002336:	e7ed      	b.n	8002314 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8002338:	b11a      	cbz	r2, 8002342 <HAL_SPI_Transmit+0xfc>
 800233a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800233c:	b292      	uxth	r2, r2
 800233e:	2a01      	cmp	r2, #1
 8002340:	d106      	bne.n	8002350 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002342:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002346:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002348:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800234a:	3b01      	subs	r3, #1
 800234c:	b29b      	uxth	r3, r3
 800234e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002350:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0c5      	beq.n	80022e4 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	0792      	lsls	r2, r2, #30
 800235e:	d4f0      	bmi.n	8002342 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002360:	2e00      	cmp	r6, #0
 8002362:	d0d7      	beq.n	8002314 <HAL_SPI_Transmit+0xce>
 8002364:	1c73      	adds	r3, r6, #1
 8002366:	d0f3      	beq.n	8002350 <HAL_SPI_Transmit+0x10a>
 8002368:	f7fe fcaa 	bl	8000cc0 <HAL_GetTick>
 800236c:	1bc0      	subs	r0, r0, r7
 800236e:	4286      	cmp	r6, r0
 8002370:	d8ee      	bhi.n	8002350 <HAL_SPI_Transmit+0x10a>
 8002372:	e7cf      	b.n	8002314 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002374:	68a3      	ldr	r3, [r4, #8]
 8002376:	b933      	cbnz	r3, 8002386 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002378:	9303      	str	r3, [sp, #12]
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	9203      	str	r2, [sp, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	9303      	str	r3, [sp, #12]
 8002384:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002386:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002388:	3000      	adds	r0, #0
 800238a:	bf18      	it	ne
 800238c:	2001      	movne	r0, #1
 800238e:	e7c2      	b.n	8002316 <HAL_SPI_Transmit+0xd0>
 8002390:	2002      	movs	r0, #2
 8002392:	e7c0      	b.n	8002316 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8002394:	2002      	movs	r0, #2
 8002396:	e7c4      	b.n	8002322 <HAL_SPI_Transmit+0xdc>

08002398 <HAL_SPI_GetState>:
  return hspi->State;
 8002398:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 800239c:	4770      	bx	lr

0800239e <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800239e:	680b      	ldr	r3, [r1, #0]
 80023a0:	684a      	ldr	r2, [r1, #4]
 80023a2:	f8d1 c010 	ldr.w	ip, [r1, #16]
 80023a6:	2b01      	cmp	r3, #1
{
 80023a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80023ac:	6803      	ldr	r3, [r0, #0]
 80023ae:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80023b2:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80023b6:	694d      	ldr	r5, [r1, #20]
 80023b8:	698c      	ldr	r4, [r1, #24]
 80023ba:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 80023be:	6a0f      	ldr	r7, [r1, #32]
 80023c0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80023c2:	d014      	beq.n	80023ee <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80023c4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80023cc:	431a      	orrs	r2, r3
 80023ce:	ea42 0209 	orr.w	r2, r2, r9
 80023d2:	ea42 0208 	orr.w	r2, r2, r8
 80023d6:	ea42 030c 	orr.w	r3, r2, ip
 80023da:	432b      	orrs	r3, r5
 80023dc:	4323      	orrs	r3, r4
 80023de:	ea43 030e 	orr.w	r3, r3, lr
 80023e2:	433b      	orrs	r3, r7
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80023e4:	4333      	orrs	r3, r6
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80023e6:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 80023e8:	2000      	movs	r0, #0
 80023ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80023ee:	6841      	ldr	r1, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80023f0:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80023f4:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80023f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023fc:	430a      	orrs	r2, r1
 80023fe:	ea43 030e 	orr.w	r3, r3, lr
 8002402:	ea42 0209 	orr.w	r2, r2, r9
 8002406:	433b      	orrs	r3, r7
 8002408:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800240c:	431e      	orrs	r6, r3
 800240e:	ea42 030c 	orr.w	r3, r2, ip
 8002412:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002414:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002416:	6006      	str	r6, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8002418:	6043      	str	r3, [r0, #4]
 800241a:	e7e5      	b.n	80023e8 <FMC_SDRAM_Init+0x4a>

0800241c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800241c:	2a01      	cmp	r2, #1
{
 800241e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002420:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002424:	688f      	ldr	r7, [r1, #8]
 8002426:	690d      	ldr	r5, [r1, #16]
 8002428:	694e      	ldr	r6, [r1, #20]
 800242a:	e891 4008 	ldmia.w	r1, {r3, lr}
 800242e:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 8002430:	d01b      	beq.n	800246a <FMC_SDRAM_Timing_Init+0x4e>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002432:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8002434:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002438:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800243c:	3b01      	subs	r3, #1
 800243e:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8002442:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8002444:	1e7b      	subs	r3, r7, #1
 8002446:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800244a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800244e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8002452:	3d01      	subs	r5, #1
 8002454:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8002458:	3e01      	subs	r6, #1
 800245a:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 800245e:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8002460:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002464:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 8002466:	2000      	movs	r0, #0
 8002468:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800246a:	6884      	ldr	r4, [r0, #8]
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800246c:	68c2      	ldr	r2, [r0, #12]
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800246e:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002472:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8002476:	3b01      	subs	r3, #1
 8002478:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 800247c:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800247e:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8002482:	1e7b      	subs	r3, r7, #1
 8002484:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002488:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800248c:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8002490:	1e6b      	subs	r3, r5, #1
 8002492:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8002496:	3e01      	subs	r6, #1
 8002498:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800249c:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800249e:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80024a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80024a6:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80024a8:	60c3      	str	r3, [r0, #12]
 80024aa:	e7dc      	b.n	8002466 <FMC_SDRAM_Timing_Init+0x4a>

080024ac <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80024ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	9301      	str	r3, [sp, #4]
{
 80024b2:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80024b4:	e891 000c 	ldmia.w	r1, {r2, r3}
 80024b8:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
 80024ba:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80024bc:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80024c0:	688a      	ldr	r2, [r1, #8]
 80024c2:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80024c4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80024c8:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 80024ca:	9b01      	ldr	r3, [sp, #4]
 80024cc:	6103      	str	r3, [r0, #16]
{
 80024ce:	4604      	mov	r4, r0

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80024d0:	f7fe fbf6 	bl	8000cc0 <HAL_GetTick>
 80024d4:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80024d6:	69a0      	ldr	r0, [r4, #24]
 80024d8:	f010 0020 	ands.w	r0, r0, #32
 80024dc:	d003      	beq.n	80024e6 <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80024de:	1c6b      	adds	r3, r5, #1
 80024e0:	d0f9      	beq.n	80024d6 <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80024e2:	b915      	cbnz	r5, 80024ea <FMC_SDRAM_SendCommand+0x3e>
      {
        return HAL_TIMEOUT;
 80024e4:	2003      	movs	r0, #3
      }
    }
  }

  return HAL_OK;
}
 80024e6:	b002      	add	sp, #8
 80024e8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80024ea:	f7fe fbe9 	bl	8000cc0 <HAL_GetTick>
 80024ee:	1b80      	subs	r0, r0, r6
 80024f0:	4285      	cmp	r5, r0
 80024f2:	d2f0      	bcs.n	80024d6 <FMC_SDRAM_SendCommand+0x2a>
 80024f4:	e7f6      	b.n	80024e4 <FMC_SDRAM_SendCommand+0x38>

080024f6 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80024f6:	6943      	ldr	r3, [r0, #20]
 80024f8:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80024fc:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 80024fe:	2000      	movs	r0, #0
 8002500:	4770      	bx	lr
	...

08002504 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8002504:	b508      	push	{r3, lr}
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <GUI_X_Config+0x18>)
 8002508:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 800250c:	f003 fe98 	bl	8006240 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8002510:	4803      	ldr	r0, [pc, #12]	; (8002520 <GUI_X_Config+0x1c>)
}
 8002512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8002516:	f003 b935 	b.w	8005784 <GUI_SetDefaultFont>
 800251a:	bf00      	nop
 800251c:	20000174 	.word	0x20000174
 8002520:	0800912c 	.word	0x0800912c

08002524 <GUI_X_Init>:
 8002524:	4770      	bx	lr

08002526 <Color2IndexBulk_M8888IDMA2D>:
 8002526:	f000 b802 	b.w	800252e <Color2IndexBulk_M888DMA2D>

0800252a <Index2ColorBulk_M8888IDMA2D>:
 800252a:	f000 b807 	b.w	800253c <Index2ColorBulk_M888DMA2D>

0800252e <Color2IndexBulk_M888DMA2D>:
static LCD_PIXELINDEX * _LCD_GetpPalConvTable(const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, const GUI_BITMAP GUI_UNI_PTR * pBitmap, int LayerIndex);
static LCD_COLOR DMA2D_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens);
static void LCD_MixColorsBulk(U32 * pFG, U32 * pBG, U32 * pDst, unsigned OffFG, unsigned OffBG, unsigned OffDest, unsigned xSize, unsigned ySize, U8 Intens);

DEFINEDMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
DEFINEDMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888)
 800252e:	b513      	push	{r0, r1, r4, lr}
 8002530:	2400      	movs	r4, #0
 8002532:	9400      	str	r4, [sp, #0]
 8002534:	f000 fccc 	bl	8002ed0 <DMA2D_Color2IndexBulk>
 8002538:	b002      	add	sp, #8
 800253a:	bd10      	pop	{r4, pc}

0800253c <Index2ColorBulk_M888DMA2D>:
 800253c:	b513      	push	{r0, r1, r4, lr}
 800253e:	2400      	movs	r4, #0
 8002540:	9400      	str	r4, [sp, #0]
 8002542:	f000 fcab 	bl	8002e9c <DMA2D_Index2ColorBulk>
 8002546:	b002      	add	sp, #8
 8002548:	bd10      	pop	{r4, pc}

0800254a <Color2IndexBulk_M565DMA2D>:
DEFINEDMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 800254a:	b513      	push	{r0, r1, r4, lr}
 800254c:	2402      	movs	r4, #2
 800254e:	9400      	str	r4, [sp, #0]
 8002550:	f000 fcbe 	bl	8002ed0 <DMA2D_Color2IndexBulk>
 8002554:	b002      	add	sp, #8
 8002556:	bd10      	pop	{r4, pc}

08002558 <Index2ColorBulk_M565DMA2D>:
 8002558:	b513      	push	{r0, r1, r4, lr}
 800255a:	2402      	movs	r4, #2
 800255c:	9400      	str	r4, [sp, #0]
 800255e:	f000 fc9d 	bl	8002e9c <DMA2D_Index2ColorBulk>
 8002562:	b002      	add	sp, #8
 8002564:	bd10      	pop	{r4, pc}

08002566 <Color2IndexBulk_M1555IDMA2D>:
DEFINEDMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8002566:	b513      	push	{r0, r1, r4, lr}
 8002568:	2403      	movs	r4, #3
 800256a:	9400      	str	r4, [sp, #0]
 800256c:	f000 fcb0 	bl	8002ed0 <DMA2D_Color2IndexBulk>
 8002570:	b002      	add	sp, #8
 8002572:	bd10      	pop	{r4, pc}

08002574 <Index2ColorBulk_M1555IDMA2D>:
 8002574:	b513      	push	{r0, r1, r4, lr}
 8002576:	2403      	movs	r4, #3
 8002578:	9400      	str	r4, [sp, #0]
 800257a:	f000 fc8f 	bl	8002e9c <DMA2D_Index2ColorBulk>
 800257e:	b002      	add	sp, #8
 8002580:	bd10      	pop	{r4, pc}

08002582 <Color2IndexBulk_M4444IDMA2D>:
DEFINEDMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 8002582:	b513      	push	{r0, r1, r4, lr}
 8002584:	2404      	movs	r4, #4
 8002586:	9400      	str	r4, [sp, #0]
 8002588:	f000 fca2 	bl	8002ed0 <DMA2D_Color2IndexBulk>
 800258c:	b002      	add	sp, #8
 800258e:	bd10      	pop	{r4, pc}

08002590 <Index2ColorBulk_M4444IDMA2D>:
 8002590:	b513      	push	{r0, r1, r4, lr}
 8002592:	2404      	movs	r4, #4
 8002594:	9400      	str	r4, [sp, #0]
 8002596:	f000 fc81 	bl	8002e9c <DMA2D_Index2ColorBulk>
 800259a:	b002      	add	sp, #8
 800259c:	bd10      	pop	{r4, pc}
	...

080025a0 <LCD_X_Config>:
  *          display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void) 
{
 80025a0:	b538      	push	{r3, r4, r5, lr}
  */
static void LCD_LL_Init(void) 
{
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
      /* DeInit */
      HAL_LTDC_DeInit(&hltdc);
 80025a2:	4c60      	ldr	r4, [pc, #384]	; (8002724 <LCD_X_Config+0x184>)
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7ff f84b 	bl	8001640 <HAL_LTDC_DeInit>
      
      /* Initializaton of ILI9341 component*/
      ili9341_Init();
 80025aa:	f7fd ffa7 	bl	80004fc <ili9341_Init>
      
      /* Set LCD Timings */
      hltdc.Init.HorizontalSync = 9;
 80025ae:	2309      	movs	r3, #9
 80025b0:	6163      	str	r3, [r4, #20]
      hltdc.Init.VerticalSync = 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61a3      	str	r3, [r4, #24]
      hltdc.Init.AccumulatedHBP = 29;
 80025b6:	231d      	movs	r3, #29
 80025b8:	61e3      	str	r3, [r4, #28]
      hltdc.Init.AccumulatedVBP = 3;  
 80025ba:	2303      	movs	r3, #3
 80025bc:	6223      	str	r3, [r4, #32]
      hltdc.Init.AccumulatedActiveH = 323;
 80025be:	f240 1343 	movw	r3, #323	; 0x143
 80025c2:	62a3      	str	r3, [r4, #40]	; 0x28
      hltdc.Init.AccumulatedActiveW = 269;
 80025c4:	f240 130d 	movw	r3, #269	; 0x10d
 80025c8:	6263      	str	r3, [r4, #36]	; 0x24
      hltdc.Init.TotalHeigh = 327;
 80025ca:	f240 1347 	movw	r3, #327	; 0x147
      /* LCD clock configuration */
      /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 MHz */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 MHz */
      /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 MHz */
      /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/8 = 6 MHz */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80025ce:	4856      	ldr	r0, [pc, #344]	; (8002728 <LCD_X_Config+0x188>)
      hltdc.Init.TotalHeigh = 327;
 80025d0:	6323      	str	r3, [r4, #48]	; 0x30
      hltdc.Init.TotalWidth = 279;
 80025d2:	f240 1317 	movw	r3, #279	; 0x117
 80025d6:	62e3      	str	r3, [r4, #44]	; 0x2c
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80025d8:	2308      	movs	r3, #8
 80025da:	6003      	str	r3, [r0, #0]
      PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80025dc:	23c0      	movs	r3, #192	; 0xc0
 80025de:	6103      	str	r3, [r0, #16]
      PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80025e0:	2304      	movs	r3, #4
      hltdc.Init.Backcolor.Blue = 0;
 80025e2:	2500      	movs	r5, #0
      PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80025e4:	6183      	str	r3, [r0, #24]
      PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80025e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
      hltdc.Init.Backcolor.Blue = 0;
 80025ea:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hltdc.Init.Backcolor.Green = 0;
 80025ee:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
      hltdc.Init.Backcolor.Red = 0;
 80025f2:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
      PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80025f6:	6243      	str	r3, [r0, #36]	; 0x24
      HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80025f8:	f7ff fc1a 	bl	8001e30 <HAL_RCCEx_PeriphCLKConfig>
      /* Polarity */
      hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
      hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
      hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
      hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
      hltdc.Instance = LTDC;
 80025fc:	4b4b      	ldr	r3, [pc, #300]	; (800272c <LCD_X_Config+0x18c>)
 80025fe:	6023      	str	r3, [r4, #0]
      
      HAL_LTDC_Init(&hltdc);
 8002600:	4620      	mov	r0, r4
      hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002602:	6065      	str	r5, [r4, #4]
      hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002604:	60a5      	str	r5, [r4, #8]
      hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002606:	60e5      	str	r5, [r4, #12]
      hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002608:	6125      	str	r5, [r4, #16]
      HAL_LTDC_Init(&hltdc);
 800260a:	f7fe ffad 	bl	8001568 <HAL_LTDC_Init>
      HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 800260e:	4629      	mov	r1, r5
 8002610:	4620      	mov	r0, r4
 8002612:	f7ff f953 	bl	80018bc <HAL_LTDC_ProgramLineEvent>
      
	  /* Configure the DMA2D  default mode */ 
  hdma2d.Init.Mode         = DMA2D_R2M;
 8002616:	4846      	ldr	r0, [pc, #280]	; (8002730 <LCD_X_Config+0x190>)
 8002618:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800261c:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode    = DMA2D_RGB565;
 800261e:	2302      	movs	r3, #2
 8002620:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0x0;     

  hdma2d.Instance          = DMA2D; 
 8002622:	4b44      	ldr	r3, [pc, #272]	; (8002734 <LCD_X_Config+0x194>)
  hdma2d.Init.OutputOffset = 0x0;     
 8002624:	60c5      	str	r5, [r0, #12]
  hdma2d.Instance          = DMA2D; 
 8002626:	6003      	str	r3, [r0, #0]

  if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002628:	f7fe fc94 	bl	8000f54 <HAL_DMA2D_Init>
 800262c:	4604      	mov	r4, r0
 800262e:	b100      	cbz	r0, 8002632 <LCD_X_Config+0x92>
 8002630:	e7fe      	b.n	8002630 <LCD_X_Config+0x90>
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8002632:	4603      	mov	r3, r0
 8002634:	4602      	mov	r2, r0
 8002636:	4940      	ldr	r1, [pc, #256]	; (8002738 <LCD_X_Config+0x198>)
 8002638:	4840      	ldr	r0, [pc, #256]	; (800273c <LCD_X_Config+0x19c>)
 800263a:	f003 f81f 	bl	800567c <GUI_DEVICE_CreateAndLink>
  if (LCD_GetSwapXYEx(0)) {
 800263e:	4620      	mov	r0, r4
 8002640:	f002 f8cb 	bl	80047da <LCD_GetSwapXYEx>
 8002644:	4605      	mov	r5, r0
 8002646:	2800      	cmp	r0, #0
 8002648:	d060      	beq.n	800270c <LCD_X_Config+0x16c>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 800264a:	22f0      	movs	r2, #240	; 0xf0
 800264c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002650:	4620      	mov	r0, r4
 8002652:	f002 f836 	bl	80046c2 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8002656:	22f0      	movs	r2, #240	; 0xf0
 8002658:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800265c:	4620      	mov	r0, r4
 800265e:	f002 f818 	bl	8004692 <LCD_SetVSizeEx>
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8002662:	4c37      	ldr	r4, [pc, #220]	; (8002740 <LCD_X_Config+0x1a0>)
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8002664:	4b34      	ldr	r3, [pc, #208]	; (8002738 <LCD_X_Config+0x198>)
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8002666:	4937      	ldr	r1, [pc, #220]	; (8002744 <LCD_X_Config+0x1a4>)
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8002668:	61a3      	str	r3, [r4, #24]
    layer_prop[i].pending_buffer = -1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	6063      	str	r3, [r4, #4]
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8002670:	6021      	str	r1, [r4, #0]
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8002672:	2000      	movs	r0, #0
 8002674:	f001 fff7 	bl	8004666 <LCD_SetVRAMAddrEx>
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8002678:	2000      	movs	r0, #0
 800267a:	f002 f8a2 	bl	80047c2 <LCD_GetBitsPerPixelEx>
 800267e:	10c0      	asrs	r0, r0, #3
 8002680:	6160      	str	r0, [r4, #20]
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8002682:	4a31      	ldr	r2, [pc, #196]	; (8002748 <LCD_X_Config+0x1a8>)
 8002684:	2121      	movs	r1, #33	; 0x21
 8002686:	2000      	movs	r0, #0
 8002688:	f002 f863 	bl	8004752 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))CUSTOM_CopyRect);
 800268c:	4a2f      	ldr	r2, [pc, #188]	; (800274c <LCD_X_Config+0x1ac>)
 800268e:	2123      	movs	r1, #35	; 0x23
 8002690:	2000      	movs	r0, #0
 8002692:	f002 f85e 	bl	8004752 <LCD_SetDevFunc>
    if (LCD_LL_GetPixelformat(i) <= LTDC_PIXEL_FORMAT_ARGB4444) 
 8002696:	2000      	movs	r0, #0
 8002698:	f000 f970 	bl	800297c <LCD_LL_GetPixelformat>
 800269c:	2804      	cmp	r0, #4
 800269e:	d809      	bhi.n	80026b4 <LCD_X_Config+0x114>
      LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 80026a0:	4a2b      	ldr	r2, [pc, #172]	; (8002750 <LCD_X_Config+0x1b0>)
 80026a2:	2119      	movs	r1, #25
 80026a4:	2000      	movs	r0, #0
 80026a6:	f002 f854 	bl	8004752 <LCD_SetDevFunc>
      LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))BSP_LCD_DrawBitmap8bpp);
 80026aa:	4a2a      	ldr	r2, [pc, #168]	; (8002754 <LCD_X_Config+0x1b4>)
 80026ac:	2125      	movs	r1, #37	; 0x25
 80026ae:	2000      	movs	r0, #0
 80026b0:	f002 f84f 	bl	8004752 <LCD_SetDevFunc>
    if (LCD_LL_GetPixelformat(i) == LTDC_PIXEL_FORMAT_RGB565) {
 80026b4:	2000      	movs	r0, #0
 80026b6:	f000 f961 	bl	800297c <LCD_LL_GetPixelformat>
 80026ba:	2802      	cmp	r0, #2
 80026bc:	d104      	bne.n	80026c8 <LCD_X_Config+0x128>
      LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))BSP_LCD_DrawBitmap16bpp);     /* Set up drawing routine for 16bpp bitmap using DMA2D. Makes only sense with RGB565 */
 80026be:	4a26      	ldr	r2, [pc, #152]	; (8002758 <LCD_X_Config+0x1b8>)
 80026c0:	2124      	movs	r1, #36	; 0x24
 80026c2:	2000      	movs	r0, #0
 80026c4:	f002 f845 	bl	8004752 <LCD_SetDevFunc>
    GUICC_M1555I_SetCustColorConv(Color2IndexBulk_M1555IDMA2D, Index2ColorBulk_M1555IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB1555 */
 80026c8:	4924      	ldr	r1, [pc, #144]	; (800275c <LCD_X_Config+0x1bc>)
 80026ca:	4825      	ldr	r0, [pc, #148]	; (8002760 <LCD_X_Config+0x1c0>)
 80026cc:	f004 fa0c 	bl	8006ae8 <GUICC_M1555I_SetCustColorConv>
    GUICC_M565_SetCustColorConv  (Color2IndexBulk_M565DMA2D,   Index2ColorBulk_M565DMA2D);   /* Set up custom bulk color conversion using DMA2D for RGB565 */
 80026d0:	4924      	ldr	r1, [pc, #144]	; (8002764 <LCD_X_Config+0x1c4>)
 80026d2:	4825      	ldr	r0, [pc, #148]	; (8002768 <LCD_X_Config+0x1c8>)
 80026d4:	f004 f804 	bl	80066e0 <GUICC_M565_SetCustColorConv>
    GUICC_M4444I_SetCustColorConv(Color2IndexBulk_M4444IDMA2D, Index2ColorBulk_M4444IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB4444 */
 80026d8:	4924      	ldr	r1, [pc, #144]	; (800276c <LCD_X_Config+0x1cc>)
 80026da:	4825      	ldr	r0, [pc, #148]	; (8002770 <LCD_X_Config+0x1d0>)
 80026dc:	f004 f96c 	bl	80069b8 <GUICC_M4444I_SetCustColorConv>
    GUICC_M888_SetCustColorConv  (Color2IndexBulk_M888DMA2D,   Index2ColorBulk_M888DMA2D);   /* Set up custom bulk color conversion using DMA2D for RGB888 */
 80026e0:	4924      	ldr	r1, [pc, #144]	; (8002774 <LCD_X_Config+0x1d4>)
 80026e2:	4825      	ldr	r0, [pc, #148]	; (8002778 <LCD_X_Config+0x1d8>)
 80026e4:	f003 ff72 	bl	80065cc <GUICC_M888_SetCustColorConv>
    GUICC_M8888I_SetCustColorConv(Color2IndexBulk_M8888IDMA2D, Index2ColorBulk_M8888IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB8888 */
 80026e8:	4924      	ldr	r1, [pc, #144]	; (800277c <LCD_X_Config+0x1dc>)
 80026ea:	4825      	ldr	r0, [pc, #148]	; (8002780 <LCD_X_Config+0x1e0>)
 80026ec:	f004 f8bc 	bl	8006868 <GUICC_M8888I_SetCustColorConv>
    GUI_SetFuncAlphaBlending(DMA2D_AlphaBlending);                                                /* Set up custom alpha blending function using DMA2D */
 80026f0:	4824      	ldr	r0, [pc, #144]	; (8002784 <LCD_X_Config+0x1e4>)
 80026f2:	f002 fe4d 	bl	8005390 <GUI_SetFuncAlphaBlending>
    GUI_SetFuncGetpPalConvTable(_LCD_GetpPalConvTable);
 80026f6:	4824      	ldr	r0, [pc, #144]	; (8002788 <LCD_X_Config+0x1e8>)
 80026f8:	f003 f83e 	bl	8005778 <GUI_SetFuncGetpPalConvTable>
    GUI_SetFuncMixColors(DMA2D_MixColors);
 80026fc:	4823      	ldr	r0, [pc, #140]	; (800278c <LCD_X_Config+0x1ec>)
 80026fe:	f002 fe4f 	bl	80053a0 <GUI_SetFuncMixColors>
    GUI_SetFuncMixColorsBulk(LCD_MixColorsBulk);
 8002702:	4823      	ldr	r0, [pc, #140]	; (8002790 <LCD_X_Config+0x1f0>)
}
 8002704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    GUI_SetFuncMixColorsBulk(LCD_MixColorsBulk);
 8002708:	f002 be52 	b.w	80053b0 <GUI_SetFuncMixColorsBulk>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 800270c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002710:	21f0      	movs	r1, #240	; 0xf0
 8002712:	f001 ffd6 	bl	80046c2 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8002716:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800271a:	21f0      	movs	r1, #240	; 0xf0
 800271c:	4628      	mov	r0, r5
 800271e:	f001 ffb8 	bl	8004692 <LCD_SetVSizeEx>
 8002722:	e79e      	b.n	8002662 <LCD_X_Config+0xc2>
 8002724:	20028c40 	.word	0x20028c40
 8002728:	20025d74 	.word	0x20025d74
 800272c:	40016800 	.word	0x40016800
 8002730:	20028aa4 	.word	0x20028aa4
 8002734:	4002b000 	.word	0x4002b000
 8002738:	0800aa4c 	.word	0x0800aa4c
 800273c:	0800a8bc 	.word	0x0800a8bc
 8002740:	20028ae4 	.word	0x20028ae4
 8002744:	d0200000 	.word	0xd0200000
 8002748:	08002a51 	.word	0x08002a51
 800274c:	08002a8d 	.word	0x08002a8d
 8002750:	08002ad9 	.word	0x08002ad9
 8002754:	080030d9 	.word	0x080030d9
 8002758:	08003009 	.word	0x08003009
 800275c:	08002575 	.word	0x08002575
 8002760:	08002567 	.word	0x08002567
 8002764:	08002559 	.word	0x08002559
 8002768:	0800254b 	.word	0x0800254b
 800276c:	08002591 	.word	0x08002591
 8002770:	08002583 	.word	0x08002583
 8002774:	0800253d 	.word	0x0800253d
 8002778:	0800252f 	.word	0x0800252f
 800277c:	0800252b 	.word	0x0800252b
 8002780:	08002527 	.word	0x08002527
 8002784:	08002e51 	.word	0x08002e51
 8002788:	08002d45 	.word	0x08002d45
 800278c:	08002c2d 	.word	0x08002c2d
 8002790:	08002f05 	.word	0x08002f05

08002794 <LCD_X_DisplayDriver>:
{
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (Cmd) 
 8002796:	3901      	subs	r1, #1
{
 8002798:	b08f      	sub	sp, #60	; 0x3c
 800279a:	4604      	mov	r4, r0
 800279c:	4615      	mov	r5, r2
  switch (Cmd) 
 800279e:	290d      	cmp	r1, #13
 80027a0:	f200 80de 	bhi.w	8002960 <LCD_X_DisplayDriver+0x1cc>
 80027a4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80027a8:	00dc000e 	.word	0x00dc000e
 80027ac:	006f0057 	.word	0x006f0057
 80027b0:	007f0077 	.word	0x007f0077
 80027b4:	009e00a5 	.word	0x009e00a5
 80027b8:	00b90087 	.word	0x00b90087
 80027bc:	00c000dc 	.word	0x00c000dc
 80027c0:	006700cc 	.word	0x006700cc
  if (LayerIndex < GUI_NUM_LAYERS) 
 80027c4:	bb50      	cbnz	r0, 800281c <LCD_X_DisplayDriver+0x88>
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 80027c6:	4d68      	ldr	r5, [pc, #416]	; (8002968 <LCD_X_DisplayDriver+0x1d4>)
    layer_cfg.WindowX0 = 0;
 80027c8:	9001      	str	r0, [sp, #4]
    layer_cfg.WindowX1 = XSIZE_PHYS;
 80027ca:	27f0      	movs	r7, #240	; 0xf0
    layer_cfg.WindowY1 = YSIZE_PHYS; 
 80027cc:	f44f 76a0 	mov.w	r6, #320	; 0x140
    layer_cfg.WindowX1 = XSIZE_PHYS;
 80027d0:	9702      	str	r7, [sp, #8]
    layer_cfg.WindowY0 = 0;
 80027d2:	9003      	str	r0, [sp, #12]
    layer_cfg.WindowY1 = YSIZE_PHYS; 
 80027d4:	9604      	str	r6, [sp, #16]
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 80027d6:	f000 f8d1 	bl	800297c <LCD_LL_GetPixelformat>
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 80027da:	682b      	ldr	r3, [r5, #0]
 80027dc:	930a      	str	r3, [sp, #40]	; 0x28
    layer_cfg.Alpha = 255;
 80027de:	23ff      	movs	r3, #255	; 0xff
 80027e0:	9306      	str	r3, [sp, #24]
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80027e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 80027e6:	9005      	str	r0, [sp, #20]
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80027e8:	9308      	str	r3, [sp, #32]
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);  
 80027ea:	4622      	mov	r2, r4
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80027ec:	2307      	movs	r3, #7
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);  
 80027ee:	a901      	add	r1, sp, #4
 80027f0:	485e      	ldr	r0, [pc, #376]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80027f2:	9309      	str	r3, [sp, #36]	; 0x24
    layer_cfg.Alpha0 = 0;
 80027f4:	9407      	str	r4, [sp, #28]
    layer_cfg.Backcolor.Blue = 0;
 80027f6:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
    layer_cfg.Backcolor.Green = 0;
 80027fa:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
    layer_cfg.Backcolor.Red = 0;
 80027fe:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
    layer_cfg.ImageWidth = XSIZE_PHYS;
 8002802:	970b      	str	r7, [sp, #44]	; 0x2c
    layer_cfg.ImageHeight = YSIZE_PHYS;
 8002804:	960c      	str	r6, [sp, #48]	; 0x30
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);  
 8002806:	f7fe ff27 	bl	8001658 <HAL_LTDC_ConfigLayer>
    if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8) 
 800280a:	4620      	mov	r0, r4
 800280c:	f001 ffd9 	bl	80047c2 <LCD_GetBitsPerPixelEx>
 8002810:	2808      	cmp	r0, #8
 8002812:	dc06      	bgt.n	8002822 <LCD_X_DisplayDriver+0x8e>
      HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 8002814:	4621      	mov	r1, r4
 8002816:	4855      	ldr	r0, [pc, #340]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
 8002818:	f7fe ffcf 	bl	80017ba <HAL_LTDC_EnableCLUT>
  int32_t r = 0;
 800281c:	2000      	movs	r0, #0
}
 800281e:	b00f      	add	sp, #60	; 0x3c
 8002820:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (layer_prop[LayerIndex].pColorConvAPI == GUICC_88666I) 
 8002822:	69aa      	ldr	r2, [r5, #24]
 8002824:	4b52      	ldr	r3, [pc, #328]	; (8002970 <LCD_X_DisplayDriver+0x1dc>)
 8002826:	429a      	cmp	r2, r3
 8002828:	d1f8      	bne.n	800281c <LCD_X_DisplayDriver+0x88>
        HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 800282a:	4621      	mov	r1, r4
 800282c:	484f      	ldr	r0, [pc, #316]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
          LUT[i] = LCD_API_ColorConv_8666.pfIndex2Color(i);
 800282e:	4d51      	ldr	r5, [pc, #324]	; (8002974 <LCD_X_DisplayDriver+0x1e0>)
        HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 8002830:	f7fe ffc3 	bl	80017ba <HAL_LTDC_EnableCLUT>
          LUT[i] = LCD_API_ColorConv_8666.pfIndex2Color(i);
 8002834:	4b50      	ldr	r3, [pc, #320]	; (8002978 <LCD_X_DisplayDriver+0x1e4>)
 8002836:	685e      	ldr	r6, [r3, #4]
 8002838:	4620      	mov	r0, r4
 800283a:	47b0      	blx	r6
 800283c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        for (i = 0; i < 256; i++) 
 8002840:	3401      	adds	r4, #1
 8002842:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8002846:	d1f7      	bne.n	8002838 <LCD_X_DisplayDriver+0xa4>
        HAL_LTDC_ConfigCLUT(&hltdc, LUT, 256, LayerIndex);
 8002848:	2300      	movs	r3, #0
 800284a:	4622      	mov	r2, r4
 800284c:	4949      	ldr	r1, [pc, #292]	; (8002974 <LCD_X_DisplayDriver+0x1e0>)
 800284e:	4847      	ldr	r0, [pc, #284]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
 8002850:	f7fe ff48 	bl	80016e4 <HAL_LTDC_ConfigCLUT>
 8002854:	e7e2      	b.n	800281c <LCD_X_DisplayDriver+0x88>
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8002856:	4a44      	ldr	r2, [pc, #272]	; (8002968 <LCD_X_DisplayDriver+0x1d4>)
 8002858:	686d      	ldr	r5, [r5, #4]
 800285a:	231c      	movs	r3, #28
 800285c:	4343      	muls	r3, r0
 800285e:	18d0      	adds	r0, r2, r3
 8002860:	58d3      	ldr	r3, [r2, r3]
 8002862:	68c1      	ldr	r1, [r0, #12]
 8002864:	6940      	ldr	r0, [r0, #20]
 8002866:	4369      	muls	r1, r5
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8002868:	fb00 3101 	mla	r1, r0, r1, r3
 800286c:	4622      	mov	r2, r4
 800286e:	483f      	ldr	r0, [pc, #252]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
 8002870:	f7ff f804 	bl	800187c <HAL_LTDC_SetAddress>
 8002874:	e7d2      	b.n	800281c <LCD_X_DisplayDriver+0x88>
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 8002876:	6811      	ldr	r1, [r2, #0]
 8002878:	4a3b      	ldr	r2, [pc, #236]	; (8002968 <LCD_X_DisplayDriver+0x1d4>)
 800287a:	231c      	movs	r3, #28
 800287c:	fb03 2400 	mla	r4, r3, r0, r2
  int32_t r = 0;
 8002880:	2000      	movs	r0, #0
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 8002882:	6061      	str	r1, [r4, #4]
    break;
 8002884:	e7cb      	b.n	800281e <LCD_X_DisplayDriver+0x8a>
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8002886:	4603      	mov	r3, r0
 8002888:	2201      	movs	r2, #1
 800288a:	4629      	mov	r1, r5
 800288c:	4837      	ldr	r0, [pc, #220]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
 800288e:	f7fe ff29 	bl	80016e4 <HAL_LTDC_ConfigCLUT>
  int32_t r = 0;
 8002892:	2000      	movs	r0, #0
    break;
 8002894:	e7c3      	b.n	800281e <LCD_X_DisplayDriver+0x8a>
    __HAL_LTDC_ENABLE(&hltdc);
 8002896:	4b35      	ldr	r3, [pc, #212]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	6993      	ldr	r3, [r2, #24]
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6193      	str	r3, [r2, #24]
  int32_t r = 0;
 80028a2:	2000      	movs	r0, #0
    break;
 80028a4:	e7bb      	b.n	800281e <LCD_X_DisplayDriver+0x8a>
    __HAL_LTDC_DISABLE(&hltdc);
 80028a6:	4b31      	ldr	r3, [pc, #196]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	6993      	ldr	r3, [r2, #24]
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	6193      	str	r3, [r2, #24]
  int32_t r = 0;
 80028b2:	2000      	movs	r0, #0
    break;
 80028b4:	e7b3      	b.n	800281e <LCD_X_DisplayDriver+0x8a>
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 80028b6:	6813      	ldr	r3, [r2, #0]
 80028b8:	4a2c      	ldr	r2, [pc, #176]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
 80028ba:	2b01      	cmp	r3, #1
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 80028bc:	6813      	ldr	r3, [r2, #0]
    __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc); 
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	ea4f 14c0 	mov.w	r4, r0, lsl #7
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 80028c4:	f103 0384 	add.w	r3, r3, #132	; 0x84
  int32_t r = 0;
 80028c8:	f04f 0000 	mov.w	r0, #0
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 80028cc:	5919      	ldr	r1, [r3, r4]
 80028ce:	bf0c      	ite	eq
 80028d0:	f041 0101 	orreq.w	r1, r1, #1
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 80028d4:	f021 0101 	bicne.w	r1, r1, #1
 80028d8:	5119      	str	r1, [r3, r4]
    __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc); 
 80028da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6253      	str	r3, [r2, #36]	; 0x24
    break;
 80028e2:	e79c      	b.n	800281e <LCD_X_DisplayDriver+0x8a>
    HAL_LTDC_SetWindowPosition(&hltdc, 
 80028e4:	4603      	mov	r3, r0
 80028e6:	ca06      	ldmia	r2, {r1, r2}
 80028e8:	4820      	ldr	r0, [pc, #128]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
 80028ea:	f7fe ff7e 	bl	80017ea <HAL_LTDC_SetWindowPosition>
  int32_t r = 0;
 80028ee:	2000      	movs	r0, #0
    break;
 80028f0:	e795      	b.n	800281e <LCD_X_DisplayDriver+0x8a>
    GUI_GetLayerPosEx(LayerIndex, (int*)&xPos, (int*)&yPos);
 80028f2:	aa01      	add	r2, sp, #4
 80028f4:	4669      	mov	r1, sp
 80028f6:	f002 fd89 	bl	800540c <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 80028fa:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <LCD_X_DisplayDriver+0x1d4>)
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 80028fc:	481b      	ldr	r0, [pc, #108]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 80028fe:	231c      	movs	r3, #28
 8002900:	fb03 2304 	mla	r3, r3, r4, r2
 8002904:	682a      	ldr	r2, [r5, #0]
 8002906:	60da      	str	r2, [r3, #12]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8002908:	686a      	ldr	r2, [r5, #4]
 800290a:	611a      	str	r2, [r3, #16]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 800290c:	4623      	mov	r3, r4
 800290e:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8002912:	f7fe ff6a 	bl	80017ea <HAL_LTDC_SetWindowPosition>
  int32_t r = 0;
 8002916:	2000      	movs	r0, #0
    break;
 8002918:	e781      	b.n	800281e <LCD_X_DisplayDriver+0x8a>
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 800291a:	4602      	mov	r2, r0
 800291c:	6829      	ldr	r1, [r5, #0]
 800291e:	4813      	ldr	r0, [pc, #76]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
 8002920:	f7fe ff8c 	bl	800183c <HAL_LTDC_SetAlpha>
  int32_t r = 0;
 8002924:	2000      	movs	r0, #0
    break;
 8002926:	e77a      	b.n	800281e <LCD_X_DisplayDriver+0x8a>
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8002928:	6815      	ldr	r5, [r2, #0]
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 800292a:	4601      	mov	r1, r0
 800292c:	480f      	ldr	r0, [pc, #60]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 800292e:	b11d      	cbz	r5, 8002938 <LCD_X_DisplayDriver+0x1a4>
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8002930:	f7fe ff13 	bl	800175a <HAL_LTDC_EnableColorKeying>
  int32_t r = 0;
 8002934:	2000      	movs	r0, #0
 8002936:	e772      	b.n	800281e <LCD_X_DisplayDriver+0x8a>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 8002938:	f7fe ff27 	bl	800178a <HAL_LTDC_DisableColorKeying>
  int32_t r = 0;
 800293c:	4628      	mov	r0, r5
 800293e:	e76e      	b.n	800281e <LCD_X_DisplayDriver+0x8a>
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8002940:	6813      	ldr	r3, [r2, #0]
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8002942:	041a      	lsls	r2, r3, #16
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8002944:	f3c3 4107 	ubfx	r1, r3, #16, #8
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8002948:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800294c:	4311      	orrs	r1, r2
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 800294e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8002952:	4602      	mov	r2, r0
 8002954:	4319      	orrs	r1, r3
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <LCD_X_DisplayDriver+0x1d8>)
 8002958:	f7fe fea7 	bl	80016aa <HAL_LTDC_ConfigColorKeying>
  int32_t r = 0;
 800295c:	2000      	movs	r0, #0
    break;
 800295e:	e75e      	b.n	800281e <LCD_X_DisplayDriver+0x8a>
    r = -1;
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	e75b      	b.n	800281e <LCD_X_DisplayDriver+0x8a>
 8002966:	bf00      	nop
 8002968:	20028ae4 	.word	0x20028ae4
 800296c:	20028c40 	.word	0x20028c40
 8002970:	0800aa94 	.word	0x0800aa94
 8002974:	20025974 	.word	0x20025974
 8002978:	0800aaac 	.word	0x0800aaac

0800297c <LCD_LL_GetPixelformat>:
  */
static uint32_t LCD_LL_GetPixelformat(uint32_t LayerIndex)
{
  const LCD_API_COLOR_CONV * pColorConvAPI;

  if (LayerIndex >= GUI_NUM_LAYERS) 
 800297c:	b9d0      	cbnz	r0, 80029b4 <LCD_LL_GetPixelformat+0x38>
  {
    return 0;
  }
  pColorConvAPI = layer_prop[LayerIndex].pColorConvAPI;
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <LCD_LL_GetPixelformat+0x58>)
  
  if (pColorConvAPI == GUICC_M8888I) 
 8002980:	4a15      	ldr	r2, [pc, #84]	; (80029d8 <LCD_LL_GetPixelformat+0x5c>)
  pColorConvAPI = layer_prop[LayerIndex].pColorConvAPI;
 8002982:	699b      	ldr	r3, [r3, #24]
  if (pColorConvAPI == GUICC_M8888I) 
 8002984:	4293      	cmp	r3, r2
 8002986:	d024      	beq.n	80029d2 <LCD_LL_GetPixelformat+0x56>
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
  } 
  else if (pColorConvAPI == GUICC_M888) 
 8002988:	4a14      	ldr	r2, [pc, #80]	; (80029dc <LCD_LL_GetPixelformat+0x60>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d014      	beq.n	80029b8 <LCD_LL_GetPixelformat+0x3c>
  {
    return LTDC_PIXEL_FORMAT_RGB888;
  } 
  else if (pColorConvAPI == GUICC_M565) 
 800298e:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <LCD_LL_GetPixelformat+0x64>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d013      	beq.n	80029bc <LCD_LL_GetPixelformat+0x40>
  {
    return LTDC_PIXEL_FORMAT_RGB565;
  } 
  else if (pColorConvAPI == GUICC_M1555I) 
 8002994:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <LCD_LL_GetPixelformat+0x68>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d012      	beq.n	80029c0 <LCD_LL_GetPixelformat+0x44>
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
  } 
  else if (pColorConvAPI == GUICC_M4444I) 
 800299a:	4a13      	ldr	r2, [pc, #76]	; (80029e8 <LCD_LL_GetPixelformat+0x6c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d011      	beq.n	80029c4 <LCD_LL_GetPixelformat+0x48>
  {
    return LTDC_PIXEL_FORMAT_ARGB4444;
  } 
  else if (pColorConvAPI == GUICC_8666) 
 80029a0:	4a12      	ldr	r2, [pc, #72]	; (80029ec <LCD_LL_GetPixelformat+0x70>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d010      	beq.n	80029c8 <LCD_LL_GetPixelformat+0x4c>
  {
    return LTDC_PIXEL_FORMAT_L8;
  } 
  else if (pColorConvAPI == GUICC_1616I) 
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <LCD_LL_GetPixelformat+0x74>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00f      	beq.n	80029cc <LCD_LL_GetPixelformat+0x50>
  {
    return LTDC_PIXEL_FORMAT_AL44;
  } 
  else if (pColorConvAPI == GUICC_88666I) 
 80029ac:	4a11      	ldr	r2, [pc, #68]	; (80029f4 <LCD_LL_GetPixelformat+0x78>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00e      	beq.n	80029d0 <LCD_LL_GetPixelformat+0x54>
 80029b2:	e7fe      	b.n	80029b2 <LCD_LL_GetPixelformat+0x36>
    return 0;
 80029b4:	2000      	movs	r0, #0
 80029b6:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_RGB888;
 80029b8:	2001      	movs	r0, #1
 80029ba:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_RGB565;
 80029bc:	2002      	movs	r0, #2
 80029be:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_ARGB1555;
 80029c0:	2003      	movs	r0, #3
 80029c2:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_ARGB4444;
 80029c4:	2004      	movs	r0, #4
 80029c6:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_L8;
 80029c8:	2005      	movs	r0, #5
 80029ca:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_AL44;
 80029cc:	2006      	movs	r0, #6
 80029ce:	4770      	bx	lr
  {
    return LTDC_PIXEL_FORMAT_AL88;
 80029d0:	2007      	movs	r0, #7
  }
  while (1);
}
 80029d2:	4770      	bx	lr
 80029d4:	20028ae4 	.word	0x20028ae4
 80029d8:	0800aa4c 	.word	0x0800aa4c
 80029dc:	0800aa04 	.word	0x0800aa04
 80029e0:	0800aa1c 	.word	0x0800aa1c
 80029e4:	0800aa7c 	.word	0x0800aa7c
 80029e8:	0800aa64 	.word	0x0800aa64
 80029ec:	0800aaac 	.word	0x0800aaac
 80029f0:	0800aac4 	.word	0x0800aac4
 80029f4:	0800aa94 	.word	0x0800aa94

080029f8 <DMA2D_CopyBuffer>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBuffer(uint32_t LayerIndex, void * pSrc, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLineSrc, uint32_t OffLineDst)
{
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	4616      	mov	r6, r2
 80029fc:	461d      	mov	r5, r3
  uint32_t PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 80029fe:	f7ff ffbd 	bl	800297c <LCD_LL_GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8002a02:	4c0c      	ldr	r4, [pc, #48]	; (8002a34 <DMA2D_CopyBuffer+0x3c>)
 8002a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a08:	6023      	str	r3, [r4, #0]
  
  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;                       
 8002a0a:	60e1      	str	r1, [r4, #12]
  DMA2D->OMAR    = (uint32_t)pDst;                       
 8002a0c:	63e6      	str	r6, [r4, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 8002a0e:	9b05      	ldr	r3, [sp, #20]
 8002a10:	6123      	str	r3, [r4, #16]
  DMA2D->OOR     = OffLineDst; 
 8002a12:	9b06      	ldr	r3, [sp, #24]
 8002a14:	6423      	str	r3, [r4, #64]	; 0x40
  
  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 8002a16:	61e0      	str	r0, [r4, #28]
  
  /*  Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | (U16)ySize; 
 8002a18:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8002a1c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8002a20:	6462      	str	r2, [r4, #68]	; 0x44
  
  DMA2D->CR     |= DMA2D_CR_START;   
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6023      	str	r3, [r4, #0]
 
  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	07db      	lsls	r3, r3, #31
 8002a2e:	d4fc      	bmi.n	8002a2a <DMA2D_CopyBuffer+0x32>
  {
  }
}
 8002a30:	bd70      	pop	{r4, r5, r6, pc}
 8002a32:	bf00      	nop
 8002a34:	4002b000 	.word	0x4002b000

08002a38 <GetBufferSize>:
*/
static uint32_t GetBufferSize(uint32_t LayerIndex) 
{
  uint32_t BufferSize;

  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <GetBufferSize+0x14>)
 8002a3a:	231c      	movs	r3, #28
 8002a3c:	fb03 2300 	mla	r3, r3, r0, r2
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	6918      	ldr	r0, [r3, #16]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	4350      	muls	r0, r2
  return BufferSize;
}
 8002a48:	4358      	muls	r0, r3
 8002a4a:	4770      	bx	lr
 8002a4c:	20028ae4 	.word	0x20028ae4

08002a50 <CUSTOM_CopyBuffer>:

/*********************************************************************
*
*       CUSTOM_CopyBuffer
*/
static void CUSTOM_CopyBuffer(int32_t LayerIndex, int32_t IndexSrc, int32_t IndexDst) {
 8002a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a52:	b085      	sub	sp, #20
 8002a54:	4615      	mov	r5, r2
 8002a56:	4606      	mov	r6, r0
  uint32_t BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8002a58:	f7ff ffee 	bl	8002a38 <GetBufferSize>
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 8002a5c:	231c      	movs	r3, #28
 8002a5e:	4373      	muls	r3, r6
 8002a60:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <CUSTOM_CopyBuffer+0x38>)
 8002a62:	58d7      	ldr	r7, [r2, r3]
 8002a64:	18d4      	adds	r4, r2, r3
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8002a66:	2300      	movs	r3, #0
 8002a68:	9302      	str	r3, [sp, #8]
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	6923      	ldr	r3, [r4, #16]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	fb00 7205 	mla	r2, r0, r5, r7
 8002a74:	fb00 7101 	mla	r1, r0, r1, r7
 8002a78:	68e3      	ldr	r3, [r4, #12]
 8002a7a:	4630      	mov	r0, r6
 8002a7c:	f7ff ffbc 	bl	80029f8 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 8002a80:	60a5      	str	r5, [r4, #8]
}
 8002a82:	b005      	add	sp, #20
 8002a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20028ae4 	.word	0x20028ae4

08002a8c <CUSTOM_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None
  */
static void CUSTOM_CopyRect(int32_t LayerIndex, int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t xSize, int32_t ySize) 
{
 8002a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  U32 AddrSrc, AddrDst;  

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002a90:	4e10      	ldr	r6, [pc, #64]	; (8002ad4 <CUSTOM_CopyRect+0x48>)
{
 8002a92:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8002a96:	f8dd c020 	ldr.w	ip, [sp, #32]
  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002a9a:	241c      	movs	r4, #28
 8002a9c:	4344      	muls	r4, r0
 8002a9e:	1935      	adds	r5, r6, r4
 8002aa0:	5936      	ldr	r6, [r6, r4]
 8002aa2:	696f      	ldr	r7, [r5, #20]
 8002aa4:	68ec      	ldr	r4, [r5, #12]
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8002aa6:	9d06      	ldr	r5, [sp, #24]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8002aa8:	f8cd c018 	str.w	ip, [sp, #24]
 8002aac:	eba4 080e 	sub.w	r8, r4, lr
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8002ab0:	fb05 3504 	mla	r5, r5, r4, r3
  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002ab4:	fb02 1104 	mla	r1, r2, r4, r1
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8002ab8:	f8cd 8020 	str.w	r8, [sp, #32]
 8002abc:	f8cd 801c 	str.w	r8, [sp, #28]
 8002ac0:	4673      	mov	r3, lr
 8002ac2:	fb07 6205 	mla	r2, r7, r5, r6
 8002ac6:	fb07 6101 	mla	r1, r7, r1, r6
}
 8002aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8002ace:	f7ff bf93 	b.w	80029f8 <DMA2D_CopyBuffer>
 8002ad2:	bf00      	nop
 8002ad4:	20028ae4 	.word	0x20028ae4

08002ad8 <CUSTOM_FillRect>:
/*********************************************************************
*
*       CUSTOM_FillRect
*/
static void CUSTOM_FillRect(int32_t LayerIndex, int32_t x0, int32_t y0, int32_t x1, int32_t y1, uint32_t PixelIndex) 
{
 8002ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002adc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002ade:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8002ae2:	4681      	mov	r9, r0
 8002ae4:	460c      	mov	r4, r1
 8002ae6:	4617      	mov	r7, r2
 8002ae8:	461e      	mov	r6, r3
  uint32_t BufferSize, AddrDst;
  int32_t xSize, ySize;

  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 8002aea:	f002 ff55 	bl	8005998 <GUI_GetDrawMode>
 8002aee:	2801      	cmp	r0, #1
 8002af0:	d111      	bne.n	8002b16 <CUSTOM_FillRect+0x3e>
  {
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2119      	movs	r1, #25
 8002af6:	4648      	mov	r0, r9
 8002af8:	f001 fe2b 	bl	8004752 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 8002afc:	4632      	mov	r2, r6
 8002afe:	4639      	mov	r1, r7
 8002b00:	4620      	mov	r0, r4
 8002b02:	462b      	mov	r3, r5
 8002b04:	f001 ffd8 	bl	8004ab8 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002b08:	4648      	mov	r0, r9
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <CUSTOM_FillRect+0xac>)
 8002b0c:	2119      	movs	r1, #25
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
  }
}
 8002b0e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002b12:	f001 be1e 	b.w	8004752 <LCD_SetDevFunc>
    BufferSize = GetBufferSize(LayerIndex);
 8002b16:	4648      	mov	r0, r9
 8002b18:	f7ff ff8e 	bl	8002a38 <GetBufferSize>
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <CUSTOM_FillRect+0xb0>)
 8002b1e:	211c      	movs	r1, #28
 8002b20:	fb01 f109 	mul.w	r1, r1, r9
 8002b24:	eb03 0e01 	add.w	lr, r3, r1
 8002b28:	5859      	ldr	r1, [r3, r1]
 8002b2a:	f8de 200c 	ldr.w	r2, [lr, #12]
 8002b2e:	f8de 3014 	ldr.w	r3, [lr, #20]
    xSize = x1 - x0 + 1;
 8002b32:	1b36      	subs	r6, r6, r4
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b34:	fb02 4407 	mla	r4, r2, r7, r4
 8002b38:	fb03 1404 	mla	r4, r3, r4, r1
 8002b3c:	f8de 3008 	ldr.w	r3, [lr, #8]
    xSize = x1 - x0 + 1;
 8002b40:	3601      	adds	r6, #1
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b42:	fb03 4a00 	mla	sl, r3, r0, r4
    ySize = y1 - y0 + 1;
 8002b46:	1bed      	subs	r5, r5, r7
  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8002b48:	4648      	mov	r0, r9
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 8002b4a:	eba2 0b06 	sub.w	fp, r2, r6
    ySize = y1 - y0 + 1;
 8002b4e:	3501      	adds	r5, #1
  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8002b50:	f7ff ff14 	bl	800297c <LCD_LL_GetPixelformat>
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8002b54:	4c0d      	ldr	r4, [pc, #52]	; (8002b8c <CUSTOM_FillRect+0xb4>)
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <CUSTOM_FillRect+0xb8>)
 8002b58:	6023      	str	r3, [r4, #0]
  DMA2D->NLR     = (uint32_t)(xSize << 16) | (U16)ySize;
 8002b5a:	b2ad      	uxth	r5, r5
 8002b5c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  DMA2D->OCOLR   = ColorIndex;                     
 8002b60:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  DMA2D->OMAR    = (uint32_t)pDst;                      
 8002b64:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
  DMA2D->OOR     = OffLine;                        
 8002b68:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
  DMA2D->OPFCCR  = PixelFormat;                    
 8002b6c:	6360      	str	r0, [r4, #52]	; 0x34
  DMA2D->NLR     = (uint32_t)(xSize << 16) | (U16)ySize;
 8002b6e:	6465      	str	r5, [r4, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START; 
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6023      	str	r3, [r4, #0]
  while (DMA2D->CR & DMA2D_CR_START) 
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	07db      	lsls	r3, r3, #31
 8002b7c:	d4fc      	bmi.n	8002b78 <CUSTOM_FillRect+0xa0>
}
 8002b7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b82:	bf00      	nop
 8002b84:	08002ad9 	.word	0x08002ad9
 8002b88:	20028ae4 	.word	0x20028ae4
 8002b8c:	4002b000 	.word	0x4002b000
 8002b90:	00030200 	.word	0x00030200

08002b94 <DMA2D_LoadLUT>:
{
  DMA2D->FGCMAR  = (uint32_t)pColor; 
  
  /*  Foreground PFC Control Register */
  DMA2D->FGPFCCR  = LTDC_PIXEL_FORMAT_RGB888         /* Pixel format */
                  | ((NumItems - 1) & 0xFF) << 8;   /* Number of items to load */
 8002b94:	3901      	subs	r1, #1
 8002b96:	0209      	lsls	r1, r1, #8
  DMA2D->FGCMAR  = (uint32_t)pColor; 
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <DMA2D_LoadLUT+0x1c>)
                  | ((NumItems - 1) & 0xFF) << 8;   /* Number of items to load */
 8002b9a:	b289      	uxth	r1, r1
 8002b9c:	f041 0101 	orr.w	r1, r1, #1
  DMA2D->FGCMAR  = (uint32_t)pColor; 
 8002ba0:	62d8      	str	r0, [r3, #44]	; 0x2c
  DMA2D->FGPFCCR  = LTDC_PIXEL_FORMAT_RGB888         /* Pixel format */
 8002ba2:	61d9      	str	r1, [r3, #28]
  DMA2D->FGPFCCR |= (1 << 5);                       /* Start loading */
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	f042 0220 	orr.w	r2, r2, #32
 8002baa:	61da      	str	r2, [r3, #28]
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	4002b000 	.word	0x4002b000

08002bb4 <InvertAlpha_SwapRB>:
  * @param  pColorDst: Destination address
  * @param  NumItems
  * @retval None
  */
static void InvertAlpha_SwapRB(LCD_COLOR * pColorSrc, LCD_COLOR * pColorDst, uint32_t NumItems) 
{
 8002bb4:	b530      	push	{r4, r5, lr}
  uint32_t Color;
  do 
  {
    Color = *pColorSrc++;
 8002bb6:	f850 4b04 	ldr.w	r4, [r0], #4
    *pColorDst++ = ((Color & 0x000000FF) << 16)         /* Swap red <-> blue */
 8002bba:	0423      	lsls	r3, r4, #16
                 |  (Color & 0x0000FF00)                /* Green */
                 | ((Color & 0x00FF0000) >> 16)         /* Swap red <-> blue */
 8002bbc:	f3c4 4507 	ubfx	r5, r4, #16, #8
    *pColorDst++ = ((Color & 0x000000FF) << 16)         /* Swap red <-> blue */
 8002bc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                 | ((Color & 0x00FF0000) >> 16)         /* Swap red <-> blue */
 8002bc4:	432b      	orrs	r3, r5
                 |  (Color & 0x0000FF00)                /* Green */
 8002bc6:	f404 457f 	and.w	r5, r4, #65280	; 0xff00
                 | ((Color & 0xFF000000) ^ 0xFF000000); /* Invert alpha */
 8002bca:	43e4      	mvns	r4, r4
                 | ((Color & 0x00FF0000) >> 16)         /* Swap red <-> blue */
 8002bcc:	432b      	orrs	r3, r5
                 | ((Color & 0xFF000000) ^ 0xFF000000); /* Invert alpha */
 8002bce:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8002bd2:	4323      	orrs	r3, r4
  } while (--NumItems);
 8002bd4:	3a01      	subs	r2, #1
    *pColorDst++ = ((Color & 0x000000FF) << 16)         /* Swap red <-> blue */
 8002bd6:	f841 3b04 	str.w	r3, [r1], #4
  } while (--NumItems);
 8002bda:	d1ec      	bne.n	8002bb6 <InvertAlpha_SwapRB+0x2>
}
 8002bdc:	bd30      	pop	{r4, r5, pc}

08002bde <InvertAlpha>:
  uint32_t Color;

  do 
  {
    Color = *pColorSrc++;
    *pColorDst++ = Color ^ 0xFF000000; /* Invert alpha */
 8002bde:	f850 3b04 	ldr.w	r3, [r0], #4
  } while (--NumItems);
 8002be2:	3a01      	subs	r2, #1
    *pColorDst++ = Color ^ 0xFF000000; /* Invert alpha */
 8002be4:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8002be8:	f841 3b04 	str.w	r3, [r1], #4
  } while (--NumItems);
 8002bec:	d1f7      	bne.n	8002bde <InvertAlpha>
}
 8002bee:	4770      	bx	lr

08002bf0 <DMA2D_AlphaBlendingBulk>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_AlphaBlendingBulk(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems) 
{
 8002bf0:	b530      	push	{r4, r5, lr}
  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8002bf2:	4c0c      	ldr	r4, [pc, #48]	; (8002c24 <DMA2D_AlphaBlendingBulk+0x34>)
 8002bf4:	4d0c      	ldr	r5, [pc, #48]	; (8002c28 <DMA2D_AlphaBlendingBulk+0x38>)
 8002bf6:	6025      	str	r5, [r4, #0]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;       /* Foreground PFC Control Register (Defines the FG pixel format) */
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;       /* Background PFC Control Register (Defines the BG pixel format) */
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;       /* Output     PFC Control Register (Defines the output pixel format) */
  
  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8002bf8:	041b      	lsls	r3, r3, #16
  DMA2D->FGMAR   = (uint32_t)pColorFG;                   /* Foreground Memory Address Register */
 8002bfa:	60e0      	str	r0, [r4, #12]
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
  DMA2D->BGMAR   = (uint32_t)pColorBG;                   /* Background Memory Address Register */
 8002c00:	6161      	str	r1, [r4, #20]
  DMA2D->OMAR    = (uint32_t)pColorDst;                  /* Output Memory Address Register (Destination address) */
 8002c02:	63e2      	str	r2, [r4, #60]	; 0x3c
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register */
 8002c04:	2200      	movs	r2, #0
 8002c06:	6122      	str	r2, [r4, #16]
  DMA2D->BGOR    = 0;                               /* Background Offset Register */
 8002c08:	61a2      	str	r2, [r4, #24]
  DMA2D->OOR     = 0;                               /* Output Offset Register */
 8002c0a:	6422      	str	r2, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;       /* Foreground PFC Control Register (Defines the FG pixel format) */
 8002c0c:	61e2      	str	r2, [r4, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;       /* Background PFC Control Register (Defines the BG pixel format) */
 8002c0e:	6262      	str	r2, [r4, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;       /* Output     PFC Control Register (Defines the output pixel format) */
 8002c10:	6362      	str	r2, [r4, #52]	; 0x34
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8002c12:	6463      	str	r3, [r4, #68]	; 0x44
  
  /* Execute operation */
  
  DMA2D->CR     |= DMA2D_CR_START;  
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6023      	str	r3, [r4, #0]
    
  while (DMA2D->CR & DMA2D_CR_START) 
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	07db      	lsls	r3, r3, #31
 8002c20:	d4fc      	bmi.n	8002c1c <DMA2D_AlphaBlendingBulk+0x2c>
  {
  }
}
 8002c22:	bd30      	pop	{r4, r5, pc}
 8002c24:	4002b000 	.word	0x4002b000
 8002c28:	00020200 	.word	0x00020200

08002c2c <DMA2D_MixColors>:
  * @param  BkColor
  * @param  Intens
  * @retval LCD_COLOR
  */
static LCD_COLOR DMA2D_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens) 
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	4613      	mov	r3, r2
 8002c38:	71fb      	strb	r3, [r7, #7]
  uint32_t ColorFG, ColorBG, ColorDst;

  if ((BkColor & 0xFF000000) == 0xFF000000)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c40:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8002c44:	d101      	bne.n	8002c4a <DMA2D_MixColors+0x1e>
  {
    return Color;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	e039      	b.n	8002cbe <DMA2D_MixColors+0x92>
  }
  ColorFG = Color   ^ 0xFF000000;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8002c50:	61fb      	str	r3, [r7, #28]
  ColorBG = BkColor ^ 0xFF000000;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8002c58:	61bb      	str	r3, [r7, #24]
  
  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <DMA2D_MixColors+0xa0>)
 8002c5c:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <DMA2D_MixColors+0xa4>)
 8002c5e:	601a      	str	r2, [r3, #0]
  
  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)&ColorFG;                   /* Foreground Memory Address Register */
 8002c60:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <DMA2D_MixColors+0xa0>)
 8002c62:	f107 031c 	add.w	r3, r7, #28
 8002c66:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)&ColorBG;                   /* Background Memory Address Register */
 8002c68:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <DMA2D_MixColors+0xa0>)
 8002c6a:	f107 0318 	add.w	r3, r7, #24
 8002c6e:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)&ColorDst;                  /* Output Memory Address Register (Destination address) */
 8002c70:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <DMA2D_MixColors+0xa0>)
 8002c72:	f107 0314 	add.w	r3, r7, #20
 8002c76:	63d3      	str	r3, [r2, #60]	; 0x3c
  
  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8002c78:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <DMA2D_MixColors+0xa0>)
                 | (1UL << 16)
                 | ((uint32_t)Intens << 24);
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8002c82:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8002c84:	4a11      	ldr	r2, [pc, #68]	; (8002ccc <DMA2D_MixColors+0xa0>)
                 | (0UL << 16)
                 | ((uint32_t)(255 - Intens) << 24);
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002c8c:	061b      	lsls	r3, r3, #24
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8002c8e:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;
 8002c90:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <DMA2D_MixColors+0xa0>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Set up size */
  DMA2D->NLR     = (uint32_t)(1 << 16) | 1;              /* Number of Line Register (Size configuration of area to be transfered) */
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <DMA2D_MixColors+0xa0>)
 8002c98:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002c9c:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                               /* Control Register (Start operation) */
 8002c9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <DMA2D_MixColors+0xa0>)
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <DMA2D_MixColors+0xa0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6013      	str	r3, [r2, #0]
  
  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START) 
 8002caa:	bf00      	nop
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <DMA2D_MixColors+0xa0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f9      	bne.n	8002cac <DMA2D_MixColors+0x80>
  {
  }

  return (ColorDst ^ 0xFF000000);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3724      	adds	r7, #36	; 0x24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	4002b000 	.word	0x4002b000
 8002cd0:	00020200 	.word	0x00020200

08002cd4 <DMA2D_ConvertColor>:
  * @param  PixelFormatDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_ConvertColor(void * pSrc, void * pDst,  uint32_t PixelFormatSrc, uint32_t PixelFormatDst, uint32_t NumItems)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
  /* Set up mode */
  
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <DMA2D_ConvertColor+0x6c>)
 8002ce4:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 8002ce8:	601a      	str	r2, [r3, #0]
  
  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;                       /* Foreground Memory Address Register (Source address) */
 8002cea:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <DMA2D_ConvertColor+0x6c>)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;                       /* Output Memory Address Register (Destination address) */
 8002cf0:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <DMA2D_ConvertColor+0x6c>)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	63d3      	str	r3, [r2, #60]	; 0x3c
  
  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset) */
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <DMA2D_ConvertColor+0x6c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <DMA2D_ConvertColor+0x6c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 8002d02:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <DMA2D_ConvertColor+0x6c>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	61d3      	str	r3, [r2, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format) */
 8002d08:	4a0d      	ldr	r2, [pc, #52]	; (8002d40 <DMA2D_ConvertColor+0x6c>)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6353      	str	r3, [r2, #52]	; 0x34
  
  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <DMA2D_ConvertColor+0x6c>)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6453      	str	r3, [r2, #68]	; 0x44
  
  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;  
 8002d1a:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <DMA2D_ConvertColor+0x6c>)
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <DMA2D_ConvertColor+0x6c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6013      	str	r3, [r2, #0]
    
  while (DMA2D->CR & DMA2D_CR_START) 
 8002d26:	bf00      	nop
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <DMA2D_ConvertColor+0x6c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f9      	bne.n	8002d28 <DMA2D_ConvertColor+0x54>
  {
  }
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	4002b000 	.word	0x4002b000

08002d44 <_LCD_GetpPalConvTable>:
  * @param  pBitmap
  * @param  LayerIndex
  * @retval LCD_PIXELINDEX
  */
static LCD_PIXELINDEX * _LCD_GetpPalConvTable(const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, const GUI_BITMAP GUI_UNI_PTR * pBitmap, int LayerIndex)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  void (* pFunc)(void);
  int32_t DoDefault = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  
  /* Check if we have a non transparent device independent bitmap */
  if (pBitmap->BitsPerPixel == 8) 
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	88db      	ldrh	r3, [r3, #6]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d119      	bne.n	8002d90 <_LCD_GetpPalConvTable+0x4c>
  {
    pFunc = LCD_GetDevFunc(LayerIndex, LCD_DEVFUNC_DRAWBMP_8BPP);
 8002d5c:	2125      	movs	r1, #37	; 0x25
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f001 fd52 	bl	8004808 <LCD_GetDevFunc>
 8002d64:	6138      	str	r0, [r7, #16]
    if (pFunc) 
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00e      	beq.n	8002d8a <_LCD_GetpPalConvTable+0x46>
    {
      if (pBitmap->pPal) 
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <_LCD_GetpPalConvTable+0x40>
      {
        if (pBitmap->pPal->HasTrans) 
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	791b      	ldrb	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <_LCD_GetpPalConvTable+0x50>
        {
          DoDefault = 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e007      	b.n	8002d94 <_LCD_GetpPalConvTable+0x50>
        }
      } 
      else 
      {
        DoDefault = 1;
 8002d84:	2301      	movs	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	e004      	b.n	8002d94 <_LCD_GetpPalConvTable+0x50>
      }
    } 
    else 
    {
      DoDefault = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e001      	b.n	8002d94 <_LCD_GetpPalConvTable+0x50>
    }
  } 
  else 
  {
    DoDefault = 1;
 8002d90:	2301      	movs	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
  }
  
  /* Default palette management for other cases */
  if (DoDefault) 
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <_LCD_GetpPalConvTable+0x60>
  {
    
    /* Return a pointer to the index values to be used by the controller */
    return LCD_GetpPalConvTable(pLogPal);
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f001 fdda 	bl	8004954 <LCD_GetpPalConvTable>
 8002da0:	4603      	mov	r3, r0
 8002da2:	e00e      	b.n	8002dc2 <_LCD_GetpPalConvTable+0x7e>
  }
  
  /* Convert palette colors from ARGB to ABGR */
  InvertAlpha_SwapRB((U32 *)pLogPal->pPalEntries, aBufferDMA2D, pLogPal->NumEntries);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6898      	ldr	r0, [r3, #8]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4907      	ldr	r1, [pc, #28]	; (8002dcc <_LCD_GetpPalConvTable+0x88>)
 8002db0:	f7ff ff00 	bl	8002bb4 <InvertAlpha_SwapRB>
  
  /* Load LUT using DMA2D */
  DMA2D_LoadLUT(aBufferDMA2D, pLogPal->NumEntries);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4619      	mov	r1, r3
 8002dba:	4804      	ldr	r0, [pc, #16]	; (8002dcc <_LCD_GetpPalConvTable+0x88>)
 8002dbc:	f7ff feea 	bl	8002b94 <DMA2D_LoadLUT>
  
  /* Return something not NULL */
  return aBufferDMA2D;
 8002dc0:	4b02      	ldr	r3, [pc, #8]	; (8002dcc <_LCD_GetpPalConvTable+0x88>)
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20025da4 	.word	0x20025da4

08002dd0 <DMA2D_MixColorsBulk>:
  * @param  Intens
  * @param  NumItems
  * @retval None
  */
static void DMA2D_MixColorsBulk(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U8 Intens, uint32_t NumItems)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	70fb      	strb	r3, [r7, #3]
  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8002dde:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <DMA2D_MixColorsBulk+0x78>)
 8002de0:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <DMA2D_MixColorsBulk+0x7c>)
 8002de2:	601a      	str	r2, [r3, #0]
  
  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pColorFG;                   /* Foreground Memory Address Register */
 8002de4:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <DMA2D_MixColorsBulk+0x78>)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)pColorBG;                   /* Background Memory Address Register */
 8002dea:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <DMA2D_MixColorsBulk+0x78>)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)pColorDst;                  /* Output Memory Address Register (Destination address) */
 8002df0:	4a15      	ldr	r2, [pc, #84]	; (8002e48 <DMA2D_MixColorsBulk+0x78>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	63d3      	str	r3, [r2, #60]	; 0x3c
  
  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8002df6:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <DMA2D_MixColorsBulk+0x78>)
                 | (1UL << 16)
                 | ((uint32_t)Intens << 24);
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8002e00:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8002e02:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <DMA2D_MixColorsBulk+0x78>)
                 | (0UL << 16)
                 | ((uint32_t)(255 - Intens) << 24);
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002e0a:	061b      	lsls	r3, r3, #24
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8002e0c:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <DMA2D_MixColorsBulk+0x78>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;              /* Number of Line Register (Size configuration of area to be transfered) */
 8002e14:	4a0c      	ldr	r2, [pc, #48]	; (8002e48 <DMA2D_MixColorsBulk+0x78>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6453      	str	r3, [r2, #68]	; 0x44
  
  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;  
 8002e20:	4a09      	ldr	r2, [pc, #36]	; (8002e48 <DMA2D_MixColorsBulk+0x78>)
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <DMA2D_MixColorsBulk+0x78>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]
    
  while (DMA2D->CR & DMA2D_CR_START)
 8002e2c:	bf00      	nop
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <DMA2D_MixColorsBulk+0x78>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f9      	bne.n	8002e2e <DMA2D_MixColorsBulk+0x5e>
  {
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	4002b000 	.word	0x4002b000
 8002e4c:	00020200 	.word	0x00020200

08002e50 <DMA2D_AlphaBlending>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_AlphaBlending(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  /* Invert alpha values */
  InvertAlpha(pColorFG, aBuffer_FG, NumItems);
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	490b      	ldr	r1, [pc, #44]	; (8002e90 <DMA2D_AlphaBlending+0x40>)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f7ff febb 	bl	8002bde <InvertAlpha>
  InvertAlpha(pColorBG, aBuffer_BG, NumItems);
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	490a      	ldr	r1, [pc, #40]	; (8002e94 <DMA2D_AlphaBlending+0x44>)
 8002e6c:	68b8      	ldr	r0, [r7, #8]
 8002e6e:	f7ff feb6 	bl	8002bde <InvertAlpha>
  
  /* Use DMA2D for mixing */
  DMA2D_AlphaBlendingBulk(aBuffer_FG, aBuffer_BG, aBufferDMA2D, NumItems);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <DMA2D_AlphaBlending+0x48>)
 8002e76:	4907      	ldr	r1, [pc, #28]	; (8002e94 <DMA2D_AlphaBlending+0x44>)
 8002e78:	4805      	ldr	r0, [pc, #20]	; (8002e90 <DMA2D_AlphaBlending+0x40>)
 8002e7a:	f7ff feb9 	bl	8002bf0 <DMA2D_AlphaBlendingBulk>
  
  /* Invert alpha values */
  InvertAlpha(aBufferDMA2D, pColorDst, NumItems);
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4805      	ldr	r0, [pc, #20]	; (8002e98 <DMA2D_AlphaBlending+0x48>)
 8002e84:	f7ff feab 	bl	8002bde <InvertAlpha>
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20027ba4 	.word	0x20027ba4
 8002e94:	20026ca4 	.word	0x20026ca4
 8002e98:	20025da4 	.word	0x20025da4

08002e9c <DMA2D_Index2ColorBulk>:
  * @param  SizeOfIndex
  * @param  PixelFormat
  * @retval None
  */
static void DMA2D_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, uint32_t NumItems, U8 SizeOfIndex, uint32_t PixelFormat)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	70fb      	strb	r3, [r7, #3]
  /* Use DMA2D for the conversion */
  DMA2D_ConvertColor(pIndex, aBufferDMA2D, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4906      	ldr	r1, [pc, #24]	; (8002ecc <DMA2D_Index2ColorBulk+0x30>)
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f7ff ff0d 	bl	8002cd4 <DMA2D_ConvertColor>
  
  /* Convert colors from ARGB to ABGR and invert alpha values */
  InvertAlpha_SwapRB(aBufferDMA2D, pColor, NumItems);
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	4803      	ldr	r0, [pc, #12]	; (8002ecc <DMA2D_Index2ColorBulk+0x30>)
 8002ec0:	f7ff fe78 	bl	8002bb4 <InvertAlpha_SwapRB>
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20025da4 	.word	0x20025da4

08002ed0 <DMA2D_Color2IndexBulk>:
  * @param  SizeOfIndex
  * @param  PixelFormat
  * @retval None
  */
static void DMA2D_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, uint32_t NumItems, U8 SizeOfIndex, uint32_t PixelFormat) 
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	70fb      	strb	r3, [r7, #3]
  /* Convert colors from ABGR to ARGB and invert alpha values */
  InvertAlpha_SwapRB(pColor, aBufferDMA2D, NumItems);
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4907      	ldr	r1, [pc, #28]	; (8002f00 <DMA2D_Color2IndexBulk+0x30>)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f7ff fe66 	bl	8002bb4 <InvertAlpha_SwapRB>
  
  /* Use DMA2D for the conversion */
  DMA2D_ConvertColor(aBufferDMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	4803      	ldr	r0, [pc, #12]	; (8002f00 <DMA2D_Color2IndexBulk+0x30>)
 8002ef4:	f7ff feee 	bl	8002cd4 <DMA2D_ConvertColor>
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20025da4 	.word	0x20025da4

08002f04 <LCD_MixColorsBulk>:
  * @param  ySize
  * @param  Intens
  * @retval None
  */
static void LCD_MixColorsBulk(U32 * pFG, U32 * pBG, U32 * pDst, unsigned OffFG, unsigned OffBG, unsigned OffDest, unsigned xSize, unsigned ySize, U8 Intens)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  int32_t y;

  GUI_USE_PARA(OffFG);
  GUI_USE_PARA(OffDest);
  for (y = 0; y < ySize; y++) 
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	e030      	b.n	8002f7a <LCD_MixColorsBulk+0x76>
  {
    /* Invert alpha values */
    InvertAlpha(pFG, aBuffer_FG, xSize);
 8002f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f1a:	491c      	ldr	r1, [pc, #112]	; (8002f8c <LCD_MixColorsBulk+0x88>)
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7ff fe5e 	bl	8002bde <InvertAlpha>
    InvertAlpha(pBG, aBuffer_BG, xSize);
 8002f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f24:	491a      	ldr	r1, [pc, #104]	; (8002f90 <LCD_MixColorsBulk+0x8c>)
 8002f26:	68b8      	ldr	r0, [r7, #8]
 8002f28:	f7ff fe59 	bl	8002bde <InvertAlpha>

    DMA2D_MixColorsBulk(aBuffer_FG, aBuffer_BG, aBufferDMA2D, Intens, xSize);
 8002f2c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <LCD_MixColorsBulk+0x90>)
 8002f38:	4915      	ldr	r1, [pc, #84]	; (8002f90 <LCD_MixColorsBulk+0x8c>)
 8002f3a:	4814      	ldr	r0, [pc, #80]	; (8002f8c <LCD_MixColorsBulk+0x88>)
 8002f3c:	f7ff ff48 	bl	8002dd0 <DMA2D_MixColorsBulk>

    InvertAlpha(aBufferDMA2D, pDst, xSize);
 8002f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4813      	ldr	r0, [pc, #76]	; (8002f94 <LCD_MixColorsBulk+0x90>)
 8002f46:	f7ff fe4a 	bl	8002bde <InvertAlpha>
    pFG  += xSize + OffFG;
 8002f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4413      	add	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
    pBG  += xSize + OffBG;
 8002f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	4413      	add	r3, r2
 8002f64:	60bb      	str	r3, [r7, #8]
    pDst += xSize + OffDest;
 8002f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	607b      	str	r3, [r7, #4]
  for (y = 0; y < ySize; y++) 
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3301      	adds	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d3ca      	bcc.n	8002f18 <LCD_MixColorsBulk+0x14>
  }
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20027ba4 	.word	0x20027ba4
 8002f90:	20026ca4 	.word	0x20026ca4
 8002f94:	20025da4 	.word	0x20025da4

08002f98 <DMA2D_DrawBitmapL8>:
  * @param  xSize
  * @param  ySize
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  uint32_t OffSrc, uint32_t OffDst, uint32_t PixelFormatDst, uint32_t xSize, uint32_t ySize)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8002fa6:	4b17      	ldr	r3, [pc, #92]	; (8003004 <DMA2D_DrawBitmapL8+0x6c>)
 8002fa8:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 8002fac:	601a      	str	r2, [r3, #0]
  
  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;                       /* Foreground Memory Address Register (Source address) */
 8002fae:	4a15      	ldr	r2, [pc, #84]	; (8003004 <DMA2D_DrawBitmapL8+0x6c>)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;                       /* Output Memory Address Register (Destination address) */
 8002fb4:	4a13      	ldr	r2, [pc, #76]	; (8003004 <DMA2D_DrawBitmapL8+0x6c>)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	63d3      	str	r3, [r2, #60]	; 0x3c
  
  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <DMA2D_DrawBitmapL8+0x6c>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 8002fc0:	4a10      	ldr	r2, [pc, #64]	; (8003004 <DMA2D_DrawBitmapL8+0x6c>)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
  
  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <DMA2D_DrawBitmapL8+0x6c>)
 8002fc8:	2205      	movs	r2, #5
 8002fca:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format) */
 8002fcc:	4a0d      	ldr	r2, [pc, #52]	; (8003004 <DMA2D_DrawBitmapL8+0x6c>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	6353      	str	r3, [r2, #52]	; 0x34
  
  /* Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | ySize;      /* Number of Line Register (Size configuration of area to be transfered) */
 8002fd2:	490c      	ldr	r1, [pc, #48]	; (8003004 <DMA2D_DrawBitmapL8+0x6c>)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	041a      	lsls	r2, r3, #16
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	644b      	str	r3, [r1, #68]	; 0x44
  
  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                               /* Start operation */
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <DMA2D_DrawBitmapL8+0x6c>)
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <DMA2D_DrawBitmapL8+0x6c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6013      	str	r3, [r2, #0]
  
  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8002fea:	bf00      	nop
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <DMA2D_DrawBitmapL8+0x6c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f9      	bne.n	8002fec <DMA2D_DrawBitmapL8+0x54>
  {
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	4002b000 	.word	0x4002b000

08003008 <BSP_LCD_DrawBitmap16bpp>:
  * @param  ySize
  * @param  BytesPerLine
  * @retval None
  */
static void BSP_LCD_DrawBitmap16bpp(int32_t LayerIndex, int32_t x, int32_t y, U16 const * p, int32_t xSize, int32_t ySize, int32_t BytesPerLine)
{
 8003008:	b5b0      	push	{r4, r5, r7, lr}
 800300a:	b08c      	sub	sp, #48	; 0x30
 800300c:	af04      	add	r7, sp, #16
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fd0d 	bl	8002a38 <GetBufferSize>
 800301e:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8003020:	492c      	ldr	r1, [pc, #176]	; (80030d4 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	461c      	mov	r4, r3
 8003032:	4928      	ldr	r1, [pc, #160]	; (80030d4 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	330c      	adds	r3, #12
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	fb02 f203 	mul.w	r2, r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	18d1      	adds	r1, r2, r3
 800304e:	4821      	ldr	r0, [pc, #132]	; (80030d4 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4403      	add	r3, r0
 800305c:	3314      	adds	r3, #20
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	fb03 f301 	mul.w	r3, r3, r1
 8003064:	4618      	mov	r0, r3
 8003066:	491b      	ldr	r1, [pc, #108]	; (80030d4 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	3308      	adds	r3, #8
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fb03 f302 	mul.w	r3, r3, r2
 8003080:	4403      	add	r3, r0
 8003082:	4423      	add	r3, r4
 8003084:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	0fda      	lsrs	r2, r3, #31
 800308a:	4413      	add	r3, r2
 800308c:	105b      	asrs	r3, r3, #1
 800308e:	461a      	mov	r2, r3
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8003096:	490f      	ldr	r1, [pc, #60]	; (80030d4 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	330c      	adds	r3, #12
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	69bc      	ldr	r4, [r7, #24]
 80030b2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	6939      	ldr	r1, [r7, #16]
 80030ba:	9102      	str	r1, [sp, #8]
 80030bc:	9201      	str	r2, [sp, #4]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	462b      	mov	r3, r5
 80030c2:	4622      	mov	r2, r4
 80030c4:	6839      	ldr	r1, [r7, #0]
 80030c6:	f7ff fc97 	bl	80029f8 <DMA2D_CopyBuffer>
}
 80030ca:	bf00      	nop
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bdb0      	pop	{r4, r5, r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20028ae4 	.word	0x20028ae4

080030d8 <BSP_LCD_DrawBitmap8bpp>:
  * @param  ySize
  * @param  BytesPerLine
  * @retval None
  */
static void BSP_LCD_DrawBitmap8bpp(int32_t LayerIndex, int32_t x, int32_t y, U8 const * p, int32_t xSize, int32_t ySize, int32_t BytesPerLine)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b08f      	sub	sp, #60	; 0x3c
 80030dc:	af04      	add	r7, sp, #16
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t OffLineSrc, OffLineDst;
  uint32_t PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fca5 	bl	8002a38 <GetBufferSize>
 80030ee:	6278      	str	r0, [r7, #36]	; 0x24
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80030f0:	492c      	ldr	r1, [pc, #176]	; (80031a4 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461c      	mov	r4, r3
 8003102:	4928      	ldr	r1, [pc, #160]	; (80031a4 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	330c      	adds	r3, #12
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	fb02 f203 	mul.w	r2, r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	18d1      	adds	r1, r2, r3
 800311e:	4821      	ldr	r0, [pc, #132]	; (80031a4 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4403      	add	r3, r0
 800312c:	3314      	adds	r3, #20
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	fb03 f301 	mul.w	r3, r3, r1
 8003134:	4618      	mov	r0, r3
 8003136:	491b      	ldr	r1, [pc, #108]	; (80031a4 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	3308      	adds	r3, #8
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	fb03 f302 	mul.w	r3, r3, r2
 8003150:	4403      	add	r3, r0
 8003152:	4423      	add	r3, r4
 8003154:	623b      	str	r3, [r7, #32]
  OffLineSrc = BytesPerLine - xSize;
 8003156:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	61fb      	str	r3, [r7, #28]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800315e:	4911      	ldr	r1, [pc, #68]	; (80031a4 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	330c      	adds	r3, #12
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	61bb      	str	r3, [r7, #24]
  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fbff 	bl	800297c <LCD_LL_GetPixelformat>
 800317e:	6178      	str	r0, [r7, #20]
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 8003180:	6a39      	ldr	r1, [r7, #32]
 8003182:	69f8      	ldr	r0, [r7, #28]
 8003184:	69bc      	ldr	r4, [r7, #24]
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800318a:	9202      	str	r2, [sp, #8]
 800318c:	9301      	str	r3, [sp, #4]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	4623      	mov	r3, r4
 8003194:	4602      	mov	r2, r0
 8003196:	6838      	ldr	r0, [r7, #0]
 8003198:	f7ff fefe 	bl	8002f98 <DMA2D_DrawBitmapL8>
}
 800319c:	bf00      	nop
 800319e:	372c      	adds	r7, #44	; 0x2c
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd90      	pop	{r4, r7, pc}
 80031a4:	20028ae4 	.word	0x20028ae4

080031a8 <HAL_SYSTICK_Callback>:
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
extern volatile GUI_TIMER_TIME OS_TimeMS;
void HAL_SYSTICK_Callback(void)
	{
		OS_TimeMS++;
 80031a8:	4a02      	ldr	r2, [pc, #8]	; (80031b4 <HAL_SYSTICK_Callback+0xc>)
 80031aa:	6813      	ldr	r3, [r2, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20028c3c 	.word	0x20028c3c

080031b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031b8:	b530      	push	{r4, r5, lr}
 80031ba:	b0a1      	sub	sp, #132	; 0x84
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031bc:	4b30      	ldr	r3, [pc, #192]	; (8003280 <SystemClock_Config+0xc8>)
 80031be:	2100      	movs	r1, #0
 80031c0:	9101      	str	r1, [sp, #4]
 80031c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	9301      	str	r3, [sp, #4]
 80031d2:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d4:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <SystemClock_Config+0xcc>)
 80031d6:	9102      	str	r1, [sp, #8]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031e6:	9302      	str	r3, [sp, #8]
 80031e8:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031ea:	2301      	movs	r3, #1
 80031ec:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031f2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031f8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
 80031fa:	f44f 73b4 	mov.w	r3, #360	; 0x168
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031fe:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003200:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLN = 360;
 8003202:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003204:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003206:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003208:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800320a:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800320c:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800320e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003210:	f7fe fbae 	bl	8001970 <HAL_RCC_OscConfig>
 8003214:	b100      	cbz	r0, 8003218 <SystemClock_Config+0x60>
 8003216:	e7fe      	b.n	8003216 <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003218:	f7fe fb6e 	bl	80018f8 <HAL_PWREx_EnableOverDrive>
 800321c:	b100      	cbz	r0, 8003220 <SystemClock_Config+0x68>
 800321e:	e7fe      	b.n	800321e <SystemClock_Config+0x66>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003220:	230f      	movs	r3, #15
 8003222:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8003224:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003228:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800322a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800322c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800322e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003232:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003234:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003236:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003238:	f7fe fd4a 	bl	8001cd0 <HAL_RCC_ClockConfig>
 800323c:	b100      	cbz	r0, 8003240 <SystemClock_Config+0x88>
 800323e:	e7fe      	b.n	800323e <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 8003240:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003244:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003246:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003248:	941a      	str	r4, [sp, #104]	; 0x68
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800324a:	9514      	str	r5, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 800324c:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800324e:	f7fe fdef 	bl	8001e30 <HAL_RCCEx_PeriphCLKConfig>
 8003252:	4604      	mov	r4, r0
 8003254:	b100      	cbz	r0, 8003258 <SystemClock_Config+0xa0>
 8003256:	e7fe      	b.n	8003256 <SystemClock_Config+0x9e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003258:	f7fe fdd4 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 800325c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003260:	fbb0 f0f3 	udiv	r0, r0, r3
 8003264:	f7fd fd98 	bl	8000d98 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003268:	2004      	movs	r0, #4
 800326a:	f7fd fdab 	bl	8000dc4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800326e:	4622      	mov	r2, r4
 8003270:	4621      	mov	r1, r4
 8003272:	f04f 30ff 	mov.w	r0, #4294967295
 8003276:	f7fd fd4f 	bl	8000d18 <HAL_NVIC_SetPriority>
}
 800327a:	b021      	add	sp, #132	; 0x84
 800327c:	bd30      	pop	{r4, r5, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	40007000 	.word	0x40007000

08003288 <main>:
{
 8003288:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800328c:	b0a3      	sub	sp, #140	; 0x8c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800328e:	2400      	movs	r4, #0
 8003290:	4d94      	ldr	r5, [pc, #592]	; (80034e4 <main+0x25c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003292:	4f95      	ldr	r7, [pc, #596]	; (80034e8 <main+0x260>)
  hdma2d.Instance = DMA2D;
 8003294:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8003518 <main+0x290>
  HAL_Init();
 8003298:	f7fd fcec 	bl	8000c74 <HAL_Init>
  SystemClock_Config();
 800329c:	f7ff ff8c 	bl	80031b8 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a0:	9400      	str	r4, [sp, #0]
 80032a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80032a4:	4891      	ldr	r0, [pc, #580]	; (80034ec <main+0x264>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a6:	f043 0304 	orr.w	r3, r3, #4
 80032aa:	632b      	str	r3, [r5, #48]	; 0x30
 80032ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032b6:	9401      	str	r4, [sp, #4]
 80032b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032ba:	f043 0320 	orr.w	r3, r3, #32
 80032be:	632b      	str	r3, [r5, #48]	; 0x30
 80032c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032ca:	9402      	str	r4, [sp, #8]
 80032cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d2:	632b      	str	r3, [r5, #48]	; 0x30
 80032d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	9302      	str	r3, [sp, #8]
 80032dc:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032de:	9403      	str	r4, [sp, #12]
 80032e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	632b      	str	r3, [r5, #48]	; 0x30
 80032e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	9303      	str	r3, [sp, #12]
 80032f0:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	9404      	str	r4, [sp, #16]
 80032f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032f6:	f043 0302 	orr.w	r3, r3, #2
 80032fa:	632b      	str	r3, [r5, #48]	; 0x30
 80032fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	9304      	str	r3, [sp, #16]
 8003304:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003306:	9405      	str	r4, [sp, #20]
 8003308:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800330a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800330e:	632b      	str	r3, [r5, #48]	; 0x30
 8003310:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	9305      	str	r3, [sp, #20]
 8003318:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800331a:	9406      	str	r4, [sp, #24]
 800331c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800331e:	f043 0310 	orr.w	r3, r3, #16
 8003322:	632b      	str	r3, [r5, #48]	; 0x30
 8003324:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	9306      	str	r3, [sp, #24]
 800332c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800332e:	9407      	str	r4, [sp, #28]
 8003330:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003332:	f043 0308 	orr.w	r3, r3, #8
 8003336:	632b      	str	r3, [r5, #48]	; 0x30
 8003338:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003340:	4622      	mov	r2, r4
 8003342:	2116      	movs	r1, #22
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003344:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003346:	f7fe f815 	bl	8001374 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800334a:	4622      	mov	r2, r4
 800334c:	2180      	movs	r1, #128	; 0x80
 800334e:	4868      	ldr	r0, [pc, #416]	; (80034f0 <main+0x268>)
 8003350:	f7fe f810 	bl	8001374 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8003354:	4622      	mov	r2, r4
 8003356:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800335a:	4866      	ldr	r0, [pc, #408]	; (80034f4 <main+0x26c>)
 800335c:	f7fe f80a 	bl	8001374 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003360:	4622      	mov	r2, r4
 8003362:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003366:	4864      	ldr	r0, [pc, #400]	; (80034f8 <main+0x270>)
 8003368:	f7fe f804 	bl	8001374 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336c:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800336e:	2316      	movs	r3, #22
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003370:	a915      	add	r1, sp, #84	; 0x54
 8003372:	485e      	ldr	r0, [pc, #376]	; (80034ec <main+0x264>)
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003374:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003376:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800337c:	f7fd fe6a 	bl	8001054 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003380:	f248 0307 	movw	r3, #32775	; 0x8007
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003384:	a915      	add	r1, sp, #84	; 0x54
 8003386:	485a      	ldr	r0, [pc, #360]	; (80034f0 <main+0x268>)
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003388:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800338a:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338c:	9417      	str	r4, [sp, #92]	; 0x5c

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800338e:	f04f 0a80 	mov.w	sl, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003392:	f7fd fe5f 	bl	8001054 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003396:	a915      	add	r1, sp, #84	; 0x54
 8003398:	4855      	ldr	r0, [pc, #340]	; (80034f0 <main+0x268>)
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800339a:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800339e:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80033a4:	f7fd fe56 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80033a8:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80033aa:	a915      	add	r1, sp, #84	; 0x54
 80033ac:	484f      	ldr	r0, [pc, #316]	; (80034ec <main+0x264>)
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80033ae:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80033b0:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80033b4:	f7fd fe4e 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80033b8:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80033ba:	a915      	add	r1, sp, #84	; 0x54
 80033bc:	484f      	ldr	r0, [pc, #316]	; (80034fc <main+0x274>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80033be:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033c0:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80033c4:	f7fd fe46 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80033c8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033cc:	f04f 0b02 	mov.w	fp, #2
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80033d0:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d2:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80033d4:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d6:	4849      	ldr	r0, [pc, #292]	; (80034fc <main+0x274>)
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80033d8:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e0:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e2:	f7fd fe37 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80033e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80033ea:	a915      	add	r1, sp, #84	; 0x54
 80033ec:	4843      	ldr	r0, [pc, #268]	; (80034fc <main+0x274>)
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80033ee:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f0:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80033f4:	f7fd fe2e 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80033f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80033fc:	a915      	add	r1, sp, #84	; 0x54
 80033fe:	483d      	ldr	r0, [pc, #244]	; (80034f4 <main+0x26c>)
  GPIO_InitStruct.Pin = TE_Pin;
 8003400:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003402:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003406:	f7fd fe25 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800340a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800340e:	a915      	add	r1, sp, #84	; 0x54
 8003410:	4838      	ldr	r0, [pc, #224]	; (80034f4 <main+0x26c>)
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8003412:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003414:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003418:	9418      	str	r4, [sp, #96]	; 0x60

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341a:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800341c:	f7fd fe1a 	bl	8001054 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003420:	f04f 0807 	mov.w	r8, #7
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003424:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003428:	a915      	add	r1, sp, #84	; 0x54
 800342a:	4831      	ldr	r0, [pc, #196]	; (80034f0 <main+0x268>)
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800342c:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003434:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003436:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	f7fd fe0b 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800343e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003442:	482d      	ldr	r0, [pc, #180]	; (80034f8 <main+0x270>)
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8003444:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003446:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003448:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800344e:	f7fd fe01 	bl	8001054 <HAL_GPIO_Init>
  hdma2d.Instance = DMA2D;
 8003452:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <main+0x278>)
  hdma2d.Init.OutputOffset = 0;
 8003454:	f8c9 400c 	str.w	r4, [r9, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003458:	4648      	mov	r0, r9
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800345a:	e889 0818 	stmia.w	r9, {r3, r4, fp}
  hdma2d.LayerCfg[1].InputOffset = 0;
 800345e:	f8c9 4028 	str.w	r4, [r9, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8003462:	f8c9 b02c 	str.w	fp, [r9, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003466:	f8c9 4030 	str.w	r4, [r9, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800346a:	f8c9 4034 	str.w	r4, [r9, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800346e:	f7fd fd71 	bl	8000f54 <HAL_DMA2D_Init>
 8003472:	b100      	cbz	r0, 8003476 <main+0x1ee>
 8003474:	e7fe      	b.n	8003474 <main+0x1ec>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003476:	4631      	mov	r1, r6
 8003478:	4648      	mov	r0, r9
 800347a:	f7fd fd97 	bl	8000fac <HAL_DMA2D_ConfigLayer>
 800347e:	b100      	cbz	r0, 8003482 <main+0x1fa>
 8003480:	e7fe      	b.n	8003480 <main+0x1f8>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <main+0x27c>)
 8003484:	4a20      	ldr	r2, [pc, #128]	; (8003508 <main+0x280>)
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003486:	6098      	str	r0, [r3, #8]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003488:	2140      	movs	r1, #64	; 0x40
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800348a:	e883 0044 	stmia.w	r3, {r2, r6}
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800348e:	2208      	movs	r2, #8
 8003490:	60da      	str	r2, [r3, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003492:	6159      	str	r1, [r3, #20]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003494:	2210      	movs	r2, #16
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003496:	61d8      	str	r0, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8003498:	6218      	str	r0, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800349a:	6258      	str	r0, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800349c:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800349e:	a915      	add	r1, sp, #84	; 0x54
 80034a0:	4618      	mov	r0, r3
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80034a2:	611a      	str	r2, [r3, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80034a4:	f8c3 a018 	str.w	sl, [r3, #24]
  SdramTiming.LoadToActiveDelay = 16;
 80034a8:	9215      	str	r2, [sp, #84]	; 0x54
  SdramTiming.ExitSelfRefreshDelay = 16;
 80034aa:	9216      	str	r2, [sp, #88]	; 0x58
  SdramTiming.SelfRefreshTime = 16;
 80034ac:	9217      	str	r2, [sp, #92]	; 0x5c
  SdramTiming.RowCycleDelay = 16;
 80034ae:	9218      	str	r2, [sp, #96]	; 0x60
  SdramTiming.WriteRecoveryTime = 16;
 80034b0:	9219      	str	r2, [sp, #100]	; 0x64
  SdramTiming.RPDelay = 16;
 80034b2:	921a      	str	r2, [sp, #104]	; 0x68
  SdramTiming.RCDDelay = 16;
 80034b4:	921b      	str	r2, [sp, #108]	; 0x6c
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80034b6:	f7fe fdd3 	bl	8002060 <HAL_SDRAM_Init>
 80034ba:	b100      	cbz	r0, 80034be <main+0x236>
 80034bc:	e7fe      	b.n	80034bc <main+0x234>
  hi2c3.Instance = I2C3;
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <main+0x284>)
  hi2c3.Init.ClockSpeed = 100000;
 80034c0:	4a13      	ldr	r2, [pc, #76]	; (8003510 <main+0x288>)
 80034c2:	4c14      	ldr	r4, [pc, #80]	; (8003514 <main+0x28c>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034c4:	6098      	str	r0, [r3, #8]
  hi2c3.Init.ClockSpeed = 100000;
 80034c6:	e883 0014 	stmia.w	r3, {r2, r4}
  hi2c3.Init.OwnAddress1 = 0;
 80034ca:	60d8      	str	r0, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034d0:	6158      	str	r0, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80034d2:	6198      	str	r0, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034d4:	61d8      	str	r0, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034d6:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034d8:	4618      	mov	r0, r3
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034da:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034dc:	f7fd ff50 	bl	8001380 <HAL_I2C_Init>
 80034e0:	b1e0      	cbz	r0, 800351c <main+0x294>
 80034e2:	e7fe      	b.n	80034e2 <main+0x25a>
 80034e4:	40023800 	.word	0x40023800
 80034e8:	10120000 	.word	0x10120000
 80034ec:	40020800 	.word	0x40020800
 80034f0:	40020000 	.word	0x40020000
 80034f4:	40020c00 	.word	0x40020c00
 80034f8:	40021800 	.word	0x40021800
 80034fc:	40020400 	.word	0x40020400
 8003500:	4002b000 	.word	0x4002b000
 8003504:	20028dd4 	.word	0x20028dd4
 8003508:	a0000140 	.word	0xa0000140
 800350c:	20028ce8 	.word	0x20028ce8
 8003510:	40005c00 	.word	0x40005c00
 8003514:	000186a0 	.word	0x000186a0
 8003518:	20028d94 	.word	0x20028d94
  hltdc.Instance = LTDC;
 800351c:	4c45      	ldr	r4, [pc, #276]	; (8003634 <main+0x3ac>)
 800351e:	4b46      	ldr	r3, [pc, #280]	; (8003638 <main+0x3b0>)
 8003520:	6023      	str	r3, [r4, #0]
  hltdc.Init.AccumulatedHBP = 14;
 8003522:	230e      	movs	r3, #14
 8003524:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedActiveW = 334;
 8003526:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800352a:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 800352c:	23f5      	movs	r3, #245	; 0xf5
 800352e:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 8003530:	f44f 73aa 	mov.w	r3, #340	; 0x154
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003534:	6060      	str	r0, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003536:	60a0      	str	r0, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003538:	60e0      	str	r0, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800353a:	6120      	str	r0, [r4, #16]
  hltdc.Init.VerticalSync = 3;
 800353c:	61a7      	str	r7, [r4, #24]
  hltdc.Init.TotalWidth = 340;
 800353e:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.Backcolor.Blue = 0;
 8003540:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hltdc.Init.TotalHeigh = 247;
 8003544:	23f7      	movs	r3, #247	; 0xf7
  hltdc.Init.Backcolor.Green = 0;
 8003546:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800354a:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hltdc.Init.AccumulatedVBP = 5;
 800354e:	2705      	movs	r7, #5
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003550:	4620      	mov	r0, r4
  hltdc.Init.HorizontalSync = 7;
 8003552:	f8c4 8014 	str.w	r8, [r4, #20]
  hltdc.Init.AccumulatedVBP = 5;
 8003556:	6227      	str	r7, [r4, #32]
  hltdc.Init.TotalHeigh = 247;
 8003558:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800355a:	f7fe f805 	bl	8001568 <HAL_LTDC_Init>
 800355e:	4602      	mov	r2, r0
 8003560:	b100      	cbz	r0, 8003564 <main+0x2dc>
 8003562:	e7fe      	b.n	8003562 <main+0x2da>
  pLayerCfg.WindowX0 = 0;
 8003564:	9008      	str	r0, [sp, #32]
  pLayerCfg.WindowX1 = 0;
 8003566:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.WindowY0 = 0;
 8003568:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.WindowY1 = 0;
 800356a:	900b      	str	r0, [sp, #44]	; 0x2c
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800356c:	900c      	str	r0, [sp, #48]	; 0x30
  pLayerCfg.Alpha = 0;
 800356e:	900d      	str	r0, [sp, #52]	; 0x34
  pLayerCfg.Alpha0 = 0;
 8003570:	900e      	str	r0, [sp, #56]	; 0x38
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003572:	f44f 6880 	mov.w	r8, #1024	; 0x400
  pLayerCfg.FBStartAdress = 0;
 8003576:	9011      	str	r0, [sp, #68]	; 0x44
  pLayerCfg.ImageWidth = 0;
 8003578:	9012      	str	r0, [sp, #72]	; 0x48
  pLayerCfg.ImageHeight = 0;
 800357a:	9013      	str	r0, [sp, #76]	; 0x4c
  pLayerCfg.Backcolor.Blue = 0;
 800357c:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
  pLayerCfg.Backcolor.Green = 0;
 8003580:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
  pLayerCfg.Backcolor.Red = 0;
 8003584:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003588:	a908      	add	r1, sp, #32
 800358a:	4620      	mov	r0, r4
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800358c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003590:	9710      	str	r7, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003592:	f7fe f861 	bl	8001658 <HAL_LTDC_ConfigLayer>
 8003596:	b100      	cbz	r0, 800359a <main+0x312>
 8003598:	e7fe      	b.n	8003598 <main+0x310>
  pLayerCfg1.WindowX0 = 0;
 800359a:	9015      	str	r0, [sp, #84]	; 0x54
  pLayerCfg1.WindowX1 = 0;
 800359c:	9016      	str	r0, [sp, #88]	; 0x58
  pLayerCfg1.WindowY0 = 0;
 800359e:	9017      	str	r0, [sp, #92]	; 0x5c
  pLayerCfg1.WindowY1 = 0;
 80035a0:	9018      	str	r0, [sp, #96]	; 0x60
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80035a2:	9019      	str	r0, [sp, #100]	; 0x64
  pLayerCfg1.Alpha = 0;
 80035a4:	901a      	str	r0, [sp, #104]	; 0x68
  pLayerCfg1.Alpha0 = 0;
 80035a6:	901b      	str	r0, [sp, #108]	; 0x6c
  pLayerCfg1.FBStartAdress = 0;
 80035a8:	901e      	str	r0, [sp, #120]	; 0x78
  pLayerCfg1.ImageWidth = 0;
 80035aa:	901f      	str	r0, [sp, #124]	; 0x7c
  pLayerCfg1.ImageHeight = 0;
 80035ac:	9020      	str	r0, [sp, #128]	; 0x80
  pLayerCfg1.Backcolor.Blue = 0;
 80035ae:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
  pLayerCfg1.Backcolor.Green = 0;
 80035b2:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
  pLayerCfg1.Backcolor.Red = 0;
 80035b6:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80035ba:	4632      	mov	r2, r6
 80035bc:	a915      	add	r1, sp, #84	; 0x54
 80035be:	4620      	mov	r0, r4
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80035c0:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80035c4:	971d      	str	r7, [sp, #116]	; 0x74
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80035c6:	f7fe f847 	bl	8001658 <HAL_LTDC_ConfigLayer>
 80035ca:	b100      	cbz	r0, 80035ce <main+0x346>
 80035cc:	e7fe      	b.n	80035cc <main+0x344>
  hspi5.Instance = SPI5;
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <main+0x3b4>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80035d0:	491b      	ldr	r1, [pc, #108]	; (8003640 <main+0x3b8>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80035d2:	6098      	str	r0, [r3, #8]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80035d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035d8:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80035dc:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80035e0:	60d8      	str	r0, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035e2:	6118      	str	r0, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035e4:	6158      	str	r0, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80035e6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035e8:	61d8      	str	r0, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035ea:	6218      	str	r0, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80035ec:	6258      	str	r0, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035ee:	6298      	str	r0, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80035f0:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80035f2:	4618      	mov	r0, r3
  hspi5.Init.CRCPolynomial = 10;
 80035f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80035f6:	f7fe fdd3 	bl	80021a0 <HAL_SPI_Init>
 80035fa:	4604      	mov	r4, r0
 80035fc:	b100      	cbz	r0, 8003600 <main+0x378>
 80035fe:	e7fe      	b.n	80035fe <main+0x376>
  BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 8003600:	f7fd fad6 	bl	8000bb0 <BSP_SDRAM_Init>
  __HAL_RCC_CRC_CLK_ENABLE();
 8003604:	9415      	str	r4, [sp, #84]	; 0x54
 8003606:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800360c:	632b      	str	r3, [r5, #48]	; 0x30
 800360e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003614:	9315      	str	r3, [sp, #84]	; 0x54
 8003616:	9b15      	ldr	r3, [sp, #84]	; 0x54
  GUI_Init();
 8003618:	f002 f926 	bl	8005868 <GUI_Init>
  GUI_Clear();
 800361c:	f002 f8ea 	bl	80057f4 <GUI_Clear>
  GUI_SetFont(&GUI_Font20_1);
 8003620:	4808      	ldr	r0, [pc, #32]	; (8003644 <main+0x3bc>)
 8003622:	f002 fa2d 	bl	8005a80 <GUI_SetFont>
  GUI_SetColor(GUI_GRAY);
 8003626:	4808      	ldr	r0, [pc, #32]	; (8003648 <main+0x3c0>)
 8003628:	f002 fa28 	bl	8005a7c <GUI_SetColor>
  GUI_DispString("Hello world!");
 800362c:	4807      	ldr	r0, [pc, #28]	; (800364c <main+0x3c4>)
 800362e:	f001 ff0d 	bl	800544c <GUI_DispString>
 8003632:	e7fe      	b.n	8003632 <main+0x3aa>
 8003634:	20028c40 	.word	0x20028c40
 8003638:	40016800 	.word	0x40016800
 800363c:	20028d3c 	.word	0x20028d3c
 8003640:	40015000 	.word	0x40015000
 8003644:	08009cb0 	.word	0x08009cb0
 8003648:	00808080 	.word	0x00808080
 800364c:	080090f0 	.word	0x080090f0

08003650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003650:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003652:	2007      	movs	r0, #7
 8003654:	f7fd fb4e 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003658:	2200      	movs	r2, #0
 800365a:	4611      	mov	r1, r2
 800365c:	f06f 000b 	mvn.w	r0, #11
 8003660:	f7fd fb5a 	bl	8000d18 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003664:	2200      	movs	r2, #0
 8003666:	4611      	mov	r1, r2
 8003668:	f06f 000a 	mvn.w	r0, #10
 800366c:	f7fd fb54 	bl	8000d18 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003670:	2200      	movs	r2, #0
 8003672:	4611      	mov	r1, r2
 8003674:	f06f 0009 	mvn.w	r0, #9
 8003678:	f7fd fb4e 	bl	8000d18 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	4611      	mov	r1, r2
 8003680:	f06f 0004 	mvn.w	r0, #4
 8003684:	f7fd fb48 	bl	8000d18 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003688:	2200      	movs	r2, #0
 800368a:	4611      	mov	r1, r2
 800368c:	f06f 0003 	mvn.w	r0, #3
 8003690:	f7fd fb42 	bl	8000d18 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003694:	2200      	movs	r2, #0
 8003696:	4611      	mov	r1, r2
 8003698:	f06f 0001 	mvn.w	r0, #1
 800369c:	f7fd fb3c 	bl	8000d18 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	4611      	mov	r1, r2
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80036ac:	f7fd bb34 	b.w	8000d18 <HAL_NVIC_SetPriority>

080036b0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{

  if(hdma2d->Instance==DMA2D)
 80036b0:	6802      	ldr	r2, [r0, #0]
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_DMA2D_MspInit+0x28>)
 80036b4:	429a      	cmp	r2, r3
{
 80036b6:	b082      	sub	sp, #8
  if(hdma2d->Instance==DMA2D)
 80036b8:	d10b      	bne.n	80036d2 <HAL_DMA2D_MspInit+0x22>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	4b07      	ldr	r3, [pc, #28]	; (80036dc <HAL_DMA2D_MspInit+0x2c>)
 80036c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80036d2:	b002      	add	sp, #8
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	4002b000 	.word	0x4002b000
 80036dc:	40023800 	.word	0x40023800

080036e0 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036e0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 80036e2:	6802      	ldr	r2, [r0, #0]
 80036e4:	4b16      	ldr	r3, [pc, #88]	; (8003740 <HAL_I2C_MspInit+0x60>)
 80036e6:	429a      	cmp	r2, r3
{
 80036e8:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C3)
 80036ea:	d126      	bne.n	800373a <HAL_I2C_MspInit+0x5a>
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036ec:	2504      	movs	r5, #4
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80036ee:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f2:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036f4:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036f6:	2601      	movs	r6, #1
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80036f8:	eb0d 0105 	add.w	r1, sp, r5
 80036fc:	4811      	ldr	r0, [pc, #68]	; (8003744 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80036fe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003700:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003702:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003704:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003706:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003708:	f7fd fca4 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800370c:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003710:	eb0d 0105 	add.w	r1, sp, r5
 8003714:	480c      	ldr	r0, [pc, #48]	; (8003748 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003716:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003718:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800371a:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800371e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003720:	f7fd fc98 	bl	8001054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003724:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_I2C_MspInit+0x6c>)
 8003726:	9400      	str	r4, [sp, #0]
 8003728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800372a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800372e:	641a      	str	r2, [r3, #64]	; 0x40
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800373a:	b007      	add	sp, #28
 800373c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800373e:	bf00      	nop
 8003740:	40005c00 	.word	0x40005c00
 8003744:	40020800 	.word	0x40020800
 8003748:	40020000 	.word	0x40020000
 800374c:	40023800 	.word	0x40023800

08003750 <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003750:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8003752:	6802      	ldr	r2, [r0, #0]
 8003754:	4b35      	ldr	r3, [pc, #212]	; (800382c <HAL_LTDC_MspInit+0xdc>)
 8003756:	429a      	cmp	r2, r3
{
 8003758:	b087      	sub	sp, #28
  if(hltdc->Instance==LTDC)
 800375a:	d165      	bne.n	8003828 <HAL_LTDC_MspInit+0xd8>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800375c:	2400      	movs	r4, #0
 800375e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8003762:	9400      	str	r4, [sp, #0]
 8003764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = ENABLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003766:	4832      	ldr	r0, [pc, #200]	; (8003830 <HAL_LTDC_MspInit+0xe0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003768:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800376c:	645a      	str	r2, [r3, #68]	; 0x44
 800376e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	9403      	str	r4, [sp, #12]
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003772:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003776:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003778:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800377a:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 800377c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003780:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003784:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003786:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003788:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800378a:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800378c:	f7fd fc62 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003790:	f641 0358 	movw	r3, #6232	; 0x1858
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003794:	a901      	add	r1, sp, #4
 8003796:	4827      	ldr	r0, [pc, #156]	; (8003834 <HAL_LTDC_MspInit+0xe4>)
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003798:	9301      	str	r3, [sp, #4]

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800379a:	2709      	movs	r7, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037a2:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a4:	f7fd fc56 	bl	8001054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80037a8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037aa:	a901      	add	r1, sp, #4
 80037ac:	4822      	ldr	r0, [pc, #136]	; (8003838 <HAL_LTDC_MspInit+0xe8>)
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80037ae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b0:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80037b6:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b8:	f7fd fc4c 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80037bc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c0:	a901      	add	r1, sp, #4
 80037c2:	481d      	ldr	r0, [pc, #116]	; (8003838 <HAL_LTDC_MspInit+0xe8>)
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80037c4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c6:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ca:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037cc:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ce:	f7fd fc41 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80037d2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037d6:	a901      	add	r1, sp, #4
 80037d8:	4818      	ldr	r0, [pc, #96]	; (800383c <HAL_LTDC_MspInit+0xec>)
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80037da:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037dc:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037e2:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037e4:	f7fd fc36 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80037e8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ec:	a901      	add	r1, sp, #4
 80037ee:	4814      	ldr	r0, [pc, #80]	; (8003840 <HAL_LTDC_MspInit+0xf0>)
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80037f0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037f8:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037fa:	f7fd fc2b 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80037fe:	2348      	movs	r3, #72	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003800:	a901      	add	r1, sp, #4
 8003802:	4810      	ldr	r0, [pc, #64]	; (8003844 <HAL_LTDC_MspInit+0xf4>)
    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003804:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003806:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800380c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800380e:	f7fd fc21 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003812:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003816:	a901      	add	r1, sp, #4
 8003818:	4808      	ldr	r0, [pc, #32]	; (800383c <HAL_LTDC_MspInit+0xec>)
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800381a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381c:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003820:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003822:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003824:	f7fd fc16 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003828:	b007      	add	sp, #28
 800382a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800382c:	40016800 	.word	0x40016800
 8003830:	40021400 	.word	0x40021400
 8003834:	40020000 	.word	0x40020000
 8003838:	40020400 	.word	0x40020400
 800383c:	40021800 	.word	0x40021800
 8003840:	40020800 	.word	0x40020800
 8003844:	40020c00 	.word	0x40020c00

08003848 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* hltdc)
{
 8003848:	b508      	push	{r3, lr}

  if(hltdc->Instance==LTDC)
 800384a:	6802      	ldr	r2, [r0, #0]
 800384c:	4b13      	ldr	r3, [pc, #76]	; (800389c <HAL_LTDC_MspDeInit+0x54>)
 800384e:	429a      	cmp	r2, r3
 8003850:	d123      	bne.n	800389a <HAL_LTDC_MspDeInit+0x52>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8003852:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <HAL_LTDC_MspDeInit+0x58>)
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    HAL_GPIO_DeInit(ENABLE_GPIO_Port, ENABLE_Pin);
 8003854:	4813      	ldr	r0, [pc, #76]	; (80038a4 <HAL_LTDC_MspDeInit+0x5c>)
    __HAL_RCC_LTDC_CLK_DISABLE();
 8003856:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003858:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800385c:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(ENABLE_GPIO_Port, ENABLE_Pin);
 800385e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003862:	f7fd fce3 	bl	800122c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003866:	f641 0158 	movw	r1, #6232	; 0x1858
 800386a:	480f      	ldr	r0, [pc, #60]	; (80038a8 <HAL_LTDC_MspDeInit+0x60>)
 800386c:	f7fd fcde 	bl	800122c <HAL_GPIO_DeInit>
                          |R5_Pin);

    HAL_GPIO_DeInit(GPIOB, R3_Pin|R6_Pin|G4_Pin|G5_Pin
 8003870:	f640 7103 	movw	r1, #3843	; 0xf03
 8003874:	480d      	ldr	r0, [pc, #52]	; (80038ac <HAL_LTDC_MspDeInit+0x64>)
 8003876:	f7fd fcd9 	bl	800122c <HAL_GPIO_DeInit>
                          |B6_Pin|B7_Pin);

    HAL_GPIO_DeInit(GPIOG, R7_Pin|DOTCLK_Pin|G3_Pin|B3_Pin
 800387a:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
 800387e:	480c      	ldr	r0, [pc, #48]	; (80038b0 <HAL_LTDC_MspDeInit+0x68>)
 8003880:	f7fd fcd4 	bl	800122c <HAL_GPIO_DeInit>
                          |B4_Pin);

    HAL_GPIO_DeInit(GPIOC, HSYNC_Pin|G6_Pin|R2_Pin);
 8003884:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8003888:	480a      	ldr	r0, [pc, #40]	; (80038b4 <HAL_LTDC_MspDeInit+0x6c>)
 800388a:	f7fd fccf 	bl	800122c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, G7_Pin|B2_Pin);
 800388e:	2148      	movs	r1, #72	; 0x48
 8003890:	4809      	ldr	r0, [pc, #36]	; (80038b8 <HAL_LTDC_MspDeInit+0x70>)
  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }

}
 8003892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, G7_Pin|B2_Pin);
 8003896:	f7fd bcc9 	b.w	800122c <HAL_GPIO_DeInit>
 800389a:	bd08      	pop	{r3, pc}
 800389c:	40016800 	.word	0x40016800
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40021400 	.word	0x40021400
 80038a8:	40020000 	.word	0x40020000
 80038ac:	40020400 	.word	0x40020400
 80038b0:	40021800 	.word	0x40021800
 80038b4:	40020800 	.word	0x40020800
 80038b8:	40020c00 	.word	0x40020c00

080038bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI5)
 80038be:	6802      	ldr	r2, [r0, #0]
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <HAL_SPI_MspInit+0x44>)
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d118      	bne.n	80038f8 <HAL_SPI_MspInit+0x3c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	4a0e      	ldr	r2, [pc, #56]	; (8003904 <HAL_SPI_MspInit+0x48>)
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	6c51      	ldr	r1, [r2, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038ce:	480e      	ldr	r0, [pc, #56]	; (8003908 <HAL_SPI_MspInit+0x4c>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 80038d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80038d4:	6451      	str	r1, [r2, #68]	; 0x44
 80038d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	9303      	str	r3, [sp, #12]
    __HAL_RCC_SPI5_CLK_ENABLE();
 80038da:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038de:	9200      	str	r2, [sp, #0]
 80038e0:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80038e4:	f44f 7260 	mov.w	r2, #896	; 0x380
 80038e8:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80038ea:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ec:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038ee:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f0:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80038f2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038f4:	f7fd fbae 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80038f8:	b007      	add	sp, #28
 80038fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80038fe:	bf00      	nop
 8003900:	40015000 	.word	0x40015000
 8003904:	40023800 	.word	0x40023800
 8003908:	40021400 	.word	0x40021400

0800390c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{

  if(hspi->Instance==SPI5)
 800390c:	6802      	ldr	r2, [r0, #0]
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <HAL_SPI_MspDeInit+0x20>)
 8003910:	429a      	cmp	r2, r3
 8003912:	d109      	bne.n	8003928 <HAL_SPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003914:	4a06      	ldr	r2, [pc, #24]	; (8003930 <HAL_SPI_MspDeInit+0x24>)
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003916:	4807      	ldr	r0, [pc, #28]	; (8003934 <HAL_SPI_MspDeInit+0x28>)
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003918:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800391a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800391e:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003920:	f44f 7160 	mov.w	r1, #896	; 0x380
 8003924:	f7fd bc82 	b.w	800122c <HAL_GPIO_DeInit>
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40015000 	.word	0x40015000
 8003930:	40023800 	.word	0x40023800
 8003934:	40021400 	.word	0x40021400

08003938 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FMC_Initialized) {
 800393c:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <HAL_SDRAM_MspInit+0xb8>)
 800393e:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003940:	b086      	sub	sp, #24
  if (FMC_Initialized) {
 8003942:	2c00      	cmp	r4, #0
 8003944:	d151      	bne.n	80039ea <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 8003946:	f04f 0801 	mov.w	r8, #1
 800394a:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 800394e:	4b29      	ldr	r3, [pc, #164]	; (80039f4 <HAL_SDRAM_MspInit+0xbc>)
 8003950:	9400      	str	r4, [sp, #0]
 8003952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003954:	4828      	ldr	r0, [pc, #160]	; (80039f8 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003956:	ea42 0208 	orr.w	r2, r2, r8
 800395a:	639a      	str	r2, [r3, #56]	; 0x38
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395e:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003960:	ea03 0308 	and.w	r3, r3, r8
 8003964:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003968:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800396a:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 800396c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8003970:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003974:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8003976:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003978:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800397a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800397c:	f7fd fb6a 	bl	8001054 <HAL_GPIO_Init>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003980:	a901      	add	r1, sp, #4
 8003982:	481e      	ldr	r0, [pc, #120]	; (80039fc <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003984:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800398e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003990:	f7fd fb60 	bl	8001054 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|GPIO_PIN_2|BA0_Pin 
 8003994:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003998:	a901      	add	r1, sp, #4
 800399a:	4819      	ldr	r0, [pc, #100]	; (8003a00 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|GPIO_PIN_2|BA0_Pin 
 800399c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a0:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039a4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039a6:	f7fd fb55 	bl	8001054 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80039aa:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039ae:	a901      	add	r1, sp, #4
 80039b0:	4814      	ldr	r0, [pc, #80]	; (8003a04 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80039b2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b4:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b6:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b8:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039ba:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039bc:	f7fd fb4a 	bl	8001054 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80039c0:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039c4:	a901      	add	r1, sp, #4
 80039c6:	4810      	ldr	r0, [pc, #64]	; (8003a08 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80039c8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ca:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039cc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ce:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039d0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039d2:	f7fd fb3f 	bl	8001054 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80039d6:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039d8:	a901      	add	r1, sp, #4
 80039da:	480c      	ldr	r0, [pc, #48]	; (8003a0c <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80039dc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039de:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e0:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039e4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e6:	f7fd fb35 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80039ea:	b006      	add	sp, #24
 80039ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039f0:	20028b00 	.word	0x20028b00
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40021400 	.word	0x40021400
 80039fc:	40020800 	.word	0x40020800
 8003a00:	40021800 	.word	0x40021800
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40020c00 	.word	0x40020c00
 8003a0c:	40020400 	.word	0x40020400

08003a10 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003a10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a12:	f7fd f949 	bl	8000ca8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003a1a:	f7fd b9df 	b.w	8000ddc <HAL_SYSTICK_IRQHandler>
	...

08003a20 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a20:	490f      	ldr	r1, [pc, #60]	; (8003a60 <SystemInit+0x40>)
 8003a22:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003a26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <SystemInit+0x44>)
 8003a30:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a32:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003a3a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003a42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a46:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003a48:	4a07      	ldr	r2, [pc, #28]	; (8003a68 <SystemInit+0x48>)
 8003a4a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a52:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003a54:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a5a:	608b      	str	r3, [r1, #8]
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	e000ed00 	.word	0xe000ed00
 8003a64:	40023800 	.word	0x40023800
 8003a68:	24003010 	.word	0x24003010

08003a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aa4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a72:	e003      	b.n	8003a7c <LoopCopyDataInit>

08003a74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a7a:	3104      	adds	r1, #4

08003a7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a7c:	480b      	ldr	r0, [pc, #44]	; (8003aac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a7e:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a84:	d3f6      	bcc.n	8003a74 <CopyDataInit>
  ldr  r2, =_sbss
 8003a86:	4a0b      	ldr	r2, [pc, #44]	; (8003ab4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a88:	e002      	b.n	8003a90 <LoopFillZerobss>

08003a8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a8c:	f842 3b04 	str.w	r3, [r2], #4

08003a90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a94:	d3f9      	bcc.n	8003a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a96:	f7ff ffc3 	bl	8003a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a9a:	f005 fac7 	bl	800902c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a9e:	f7ff fbf3 	bl	8003288 <main>
  bx  lr    
 8003aa2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003aa4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003aa8:	0800bea4 	.word	0x0800bea4
  ldr  r0, =_sdata
 8003aac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ab0:	2000003c 	.word	0x2000003c
  ldr  r2, =_sbss
 8003ab4:	2000003c 	.word	0x2000003c
  ldr  r3, = _ebss
 8003ab8:	20028fbc 	.word	0x20028fbc

08003abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003abc:	e7fe      	b.n	8003abc <ADC_IRQHandler>

08003abe <_GetRect>:
 8003abe:	6883      	ldr	r3, [r0, #8]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	800a      	strh	r2, [r1, #0]
 8003ac4:	804a      	strh	r2, [r1, #2]
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	3a01      	subs	r2, #1
 8003acc:	3b01      	subs	r3, #1
 8003ace:	808a      	strh	r2, [r1, #4]
 8003ad0:	80cb      	strh	r3, [r1, #6]
 8003ad2:	4770      	bx	lr

08003ad4 <_SetPixelIndex>:
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	6880      	ldr	r0, [r0, #8]
 8003ad8:	69c4      	ldr	r4, [r0, #28]
 8003ada:	6800      	ldr	r0, [r0, #0]
 8003adc:	fb04 1202 	mla	r2, r4, r2, r1
 8003ae0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003ae4:	bd10      	pop	{r4, pc}

08003ae6 <_GetPixelIndex>:
 8003ae6:	6883      	ldr	r3, [r0, #8]
 8003ae8:	69d8      	ldr	r0, [r3, #28]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	fb00 1202 	mla	r2, r0, r2, r1
 8003af0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003af4:	4770      	bx	lr

08003af6 <_XorPixel>:
 8003af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003afa:	4604      	mov	r4, r0
 8003afc:	460f      	mov	r7, r1
 8003afe:	4616      	mov	r6, r2
 8003b00:	f7ff fff1 	bl	8003ae6 <_GetPixelIndex>
 8003b04:	6925      	ldr	r5, [r4, #16]
 8003b06:	68ab      	ldr	r3, [r5, #8]
 8003b08:	4680      	mov	r8, r0
 8003b0a:	4798      	blx	r3
 8003b0c:	4639      	mov	r1, r7
 8003b0e:	ea80 0308 	eor.w	r3, r0, r8
 8003b12:	4632      	mov	r2, r6
 8003b14:	4620      	mov	r0, r4
 8003b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b1a:	f7ff bfdb 	b.w	8003ad4 <_SetPixelIndex>
	...

08003b20 <_FillRect>:
 8003b20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b24:	6886      	ldr	r6, [r0, #8]
 8003b26:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003b28:	6b34      	ldr	r4, [r6, #48]	; 0x30
 8003b2a:	f8df c114 	ldr.w	ip, [pc, #276]	; 8003c40 <_FillRect+0x120>
 8003b2e:	4689      	mov	r9, r1
 8003b30:	4692      	mov	sl, r2
 8003b32:	b144      	cbz	r4, 8003b46 <_FillRect+0x26>
 8003b34:	9700      	str	r7, [sp, #0]
 8003b36:	f8dc 5000 	ldr.w	r5, [ip]
 8003b3a:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 8003b3c:	682d      	ldr	r5, [r5, #0]
 8003b3e:	9501      	str	r5, [sp, #4]
 8003b40:	6980      	ldr	r0, [r0, #24]
 8003b42:	47a0      	blx	r4
 8003b44:	e079      	b.n	8003c3a <_FillRect+0x11a>
 8003b46:	1a5b      	subs	r3, r3, r1
 8003b48:	f8dc 1000 	ldr.w	r1, [ip]
 8003b4c:	f891 c010 	ldrb.w	ip, [r1, #16]
 8003b50:	ebc2 0807 	rsb	r8, r2, r7
 8003b54:	f01c 0c01 	ands.w	ip, ip, #1
 8003b58:	f103 0401 	add.w	r4, r3, #1
 8003b5c:	f108 0501 	add.w	r5, r8, #1
 8003b60:	69f7      	ldr	r7, [r6, #28]
 8003b62:	d021      	beq.n	8003ba8 <_FillRect+0x88>
 8003b64:	6903      	ldr	r3, [r0, #16]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4798      	blx	r3
 8003b6a:	69f2      	ldr	r2, [r6, #28]
 8003b6c:	2c00      	cmp	r4, #0
 8003b6e:	d064      	beq.n	8003c3a <_FillRect+0x11a>
 8003b70:	f06f 0c03 	mvn.w	ip, #3
 8003b74:	fb02 990a 	mla	r9, r2, sl, r9
 8003b78:	fb0c fc07 	mul.w	ip, ip, r7
 8003b7c:	fb07 9708 	mla	r7, r7, r8, r9
 8003b80:	00bf      	lsls	r7, r7, #2
 8003b82:	2d00      	cmp	r5, #0
 8003b84:	d059      	beq.n	8003c3a <_FillRect+0x11a>
 8003b86:	3d01      	subs	r5, #1
 8003b88:	463b      	mov	r3, r7
 8003b8a:	4622      	mov	r2, r4
 8003b8c:	f8d6 8000 	ldr.w	r8, [r6]
 8003b90:	f853 1008 	ldr.w	r1, [r3, r8]
 8003b94:	3a01      	subs	r2, #1
 8003b96:	ea81 0100 	eor.w	r1, r1, r0
 8003b9a:	f843 1008 	str.w	r1, [r3, r8]
 8003b9e:	f103 0304 	add.w	r3, r3, #4
 8003ba2:	d1f3      	bne.n	8003b8c <_FillRect+0x6c>
 8003ba4:	4467      	add	r7, ip
 8003ba6:	e7ec      	b.n	8003b82 <_FillRect+0x62>
 8003ba8:	6830      	ldr	r0, [r6, #0]
 8003baa:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8003bac:	fb07 9202 	mla	r2, r7, r2, r9
 8003bb0:	2c0f      	cmp	r4, #15
 8003bb2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003bb6:	6808      	ldr	r0, [r1, #0]
 8003bb8:	d92f      	bls.n	8003c1a <_FillRect+0xfa>
 8003bba:	f1a3 0a0f 	sub.w	sl, r3, #15
 8003bbe:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 8003bc2:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8003bc6:	f108 4180 	add.w	r1, r8, #1073741824	; 0x40000000
 8003bca:	f10a 0a01 	add.w	sl, sl, #1
 8003bce:	fb09 2101 	mla	r1, r9, r1, r2
 8003bd2:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
 8003bd6:	462e      	mov	r6, r5
 8003bd8:	4662      	mov	r2, ip
 8003bda:	b1e6      	cbz	r6, 8003c16 <_FillRect+0xf6>
 8003bdc:	4622      	mov	r2, r4
 8003bde:	460b      	mov	r3, r1
 8003be0:	3a10      	subs	r2, #16
 8003be2:	2a0f      	cmp	r2, #15
 8003be4:	6018      	str	r0, [r3, #0]
 8003be6:	6058      	str	r0, [r3, #4]
 8003be8:	6098      	str	r0, [r3, #8]
 8003bea:	60d8      	str	r0, [r3, #12]
 8003bec:	6118      	str	r0, [r3, #16]
 8003bee:	6158      	str	r0, [r3, #20]
 8003bf0:	6198      	str	r0, [r3, #24]
 8003bf2:	61d8      	str	r0, [r3, #28]
 8003bf4:	6218      	str	r0, [r3, #32]
 8003bf6:	6258      	str	r0, [r3, #36]	; 0x24
 8003bf8:	6298      	str	r0, [r3, #40]	; 0x28
 8003bfa:	62d8      	str	r0, [r3, #44]	; 0x2c
 8003bfc:	6318      	str	r0, [r3, #48]	; 0x30
 8003bfe:	6358      	str	r0, [r3, #52]	; 0x34
 8003c00:	6398      	str	r0, [r3, #56]	; 0x38
 8003c02:	63d8      	str	r0, [r3, #60]	; 0x3c
 8003c04:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8003c08:	d8ea      	bhi.n	8003be0 <_FillRect+0xc0>
 8003c0a:	eb01 020a 	add.w	r2, r1, sl
 8003c0e:	3e01      	subs	r6, #1
 8003c10:	ebc9 0101 	rsb	r1, r9, r1
 8003c14:	e7e1      	b.n	8003bda <_FillRect+0xba>
 8003c16:	f004 040f 	and.w	r4, r4, #15
 8003c1a:	b174      	cbz	r4, 8003c3a <_FillRect+0x11a>
 8003c1c:	00bf      	lsls	r7, r7, #2
 8003c1e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003c22:	fb07 2208 	mla	r2, r7, r8, r2
 8003c26:	b145      	cbz	r5, 8003c3a <_FillRect+0x11a>
 8003c28:	4611      	mov	r1, r2
 8003c2a:	4623      	mov	r3, r4
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	f841 0b04 	str.w	r0, [r1], #4
 8003c32:	d1fb      	bne.n	8003c2c <_FillRect+0x10c>
 8003c34:	3d01      	subs	r5, #1
 8003c36:	1bd2      	subs	r2, r2, r7
 8003c38:	e7f5      	b.n	8003c26 <_FillRect+0x106>
 8003c3a:	b002      	add	sp, #8
 8003c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c40:	20000028 	.word	0x20000028

08003c44 <_DrawHLine>:
 8003c44:	b507      	push	{r0, r1, r2, lr}
 8003c46:	9200      	str	r2, [sp, #0]
 8003c48:	f7ff ff6a 	bl	8003b20 <_FillRect>
 8003c4c:	b003      	add	sp, #12
 8003c4e:	f85d fb04 	ldr.w	pc, [sp], #4

08003c52 <_DrawVLine>:
 8003c52:	b507      	push	{r0, r1, r2, lr}
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	460b      	mov	r3, r1
 8003c58:	f7ff ff62 	bl	8003b20 <_FillRect>
 8003c5c:	b003      	add	sp, #12
 8003c5e:	f85d fb04 	ldr.w	pc, [sp], #4

08003c62 <_GetDevProp>:
 8003c62:	3901      	subs	r1, #1
 8003c64:	6883      	ldr	r3, [r0, #8]
 8003c66:	290d      	cmp	r1, #13
 8003c68:	d814      	bhi.n	8003c94 <_GetDevProp+0x32>
 8003c6a:	e8df f001 	tbb	[pc, r1]
 8003c6e:	0b09      	.short	0x0b09
 8003c70:	13130f0d 	.word	0x13130f0d
 8003c74:	11160713 	.word	0x11160713
 8003c78:	16161611 	.word	0x16161611
 8003c7c:	2020      	movs	r0, #32
 8003c7e:	4770      	bx	lr
 8003c80:	68d8      	ldr	r0, [r3, #12]
 8003c82:	4770      	bx	lr
 8003c84:	6918      	ldr	r0, [r3, #16]
 8003c86:	4770      	bx	lr
 8003c88:	6958      	ldr	r0, [r3, #20]
 8003c8a:	4770      	bx	lr
 8003c8c:	6998      	ldr	r0, [r3, #24]
 8003c8e:	4770      	bx	lr
 8003c90:	2001      	movs	r0, #1
 8003c92:	4770      	bx	lr
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295
 8003c98:	4770      	bx	lr
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	4770      	bx	lr
	...

08003ca0 <_GetDevData>:
 8003ca0:	4802      	ldr	r0, [pc, #8]	; (8003cac <_GetDevData+0xc>)
 8003ca2:	2901      	cmp	r1, #1
 8003ca4:	bf18      	it	ne
 8003ca6:	2000      	movne	r0, #0
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	0800ab34 	.word	0x0800ab34

08003cb0 <_ReadRect>:
 8003cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb4:	460f      	mov	r7, r1
 8003cb6:	6881      	ldr	r1, [r0, #8]
 8003cb8:	69c8      	ldr	r0, [r1, #28]
 8003cba:	f06f 0903 	mvn.w	r9, #3
 8003cbe:	fb00 7502 	mla	r5, r0, r2, r7
 8003cc2:	1bdb      	subs	r3, r3, r7
 8003cc4:	00ae      	lsls	r6, r5, #2
 8003cc6:	fb09 fc00 	mul.w	ip, r9, r0
 8003cca:	fb09 f505 	mul.w	r5, r9, r5
 8003cce:	f103 0901 	add.w	r9, r3, #1
 8003cd2:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8003cd6:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8003cda:	1c5f      	adds	r7, r3, #1
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003ce2:	680c      	ldr	r4, [r1, #0]
 8003ce4:	44aa      	add	sl, r5
 8003ce6:	f850 b004 	ldr.w	fp, [r0, r4]
 8003cea:	f84a b000 	str.w	fp, [sl, r0]
 8003cee:	3f01      	subs	r7, #1
 8003cf0:	f100 0004 	add.w	r0, r0, #4
 8003cf4:	d1f3      	bne.n	8003cde <_ReadRect+0x2e>
 8003cf6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003cf8:	444c      	add	r4, r9
 8003cfa:	940a      	str	r4, [sp, #40]	; 0x28
 8003cfc:	3201      	adds	r2, #1
 8003cfe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003d00:	1e50      	subs	r0, r2, #1
 8003d02:	42a0      	cmp	r0, r4
 8003d04:	4446      	add	r6, r8
 8003d06:	4465      	add	r5, ip
 8003d08:	dbe7      	blt.n	8003cda <_ReadRect+0x2a>
 8003d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003d10 <_GetDevFunc>:
 8003d10:	3901      	subs	r1, #1
 8003d12:	2924      	cmp	r1, #36	; 0x24
 8003d14:	d844      	bhi.n	8003da0 <_GetDevFunc+0x90>
 8003d16:	e8df f001 	tbb	[pc, r1]
 8003d1a:	1b41      	.short	0x1b41
 8003d1c:	1d431917 	.word	0x1d431917
 8003d20:	45134343 	.word	0x45134343
 8003d24:	21431f15 	.word	0x21431f15
 8003d28:	43434323 	.word	0x43434323
 8003d2c:	2f292725 	.word	0x2f292725
 8003d30:	43314343 	.word	0x43314343
 8003d34:	43434343 	.word	0x43434343
 8003d38:	2d2b3543 	.word	0x2d2b3543
 8003d3c:	433d      	.short	0x433d
 8003d3e:	39          	.byte	0x39
 8003d3f:	00          	.byte	0x00
 8003d40:	4819      	ldr	r0, [pc, #100]	; (8003da8 <_GetDevFunc+0x98>)
 8003d42:	4770      	bx	lr
 8003d44:	4819      	ldr	r0, [pc, #100]	; (8003dac <_GetDevFunc+0x9c>)
 8003d46:	4770      	bx	lr
 8003d48:	4819      	ldr	r0, [pc, #100]	; (8003db0 <_GetDevFunc+0xa0>)
 8003d4a:	4770      	bx	lr
 8003d4c:	4819      	ldr	r0, [pc, #100]	; (8003db4 <_GetDevFunc+0xa4>)
 8003d4e:	4770      	bx	lr
 8003d50:	4819      	ldr	r0, [pc, #100]	; (8003db8 <_GetDevFunc+0xa8>)
 8003d52:	4770      	bx	lr
 8003d54:	4819      	ldr	r0, [pc, #100]	; (8003dbc <_GetDevFunc+0xac>)
 8003d56:	4770      	bx	lr
 8003d58:	4819      	ldr	r0, [pc, #100]	; (8003dc0 <_GetDevFunc+0xb0>)
 8003d5a:	4770      	bx	lr
 8003d5c:	4819      	ldr	r0, [pc, #100]	; (8003dc4 <_GetDevFunc+0xb4>)
 8003d5e:	4770      	bx	lr
 8003d60:	4819      	ldr	r0, [pc, #100]	; (8003dc8 <_GetDevFunc+0xb8>)
 8003d62:	4770      	bx	lr
 8003d64:	4819      	ldr	r0, [pc, #100]	; (8003dcc <_GetDevFunc+0xbc>)
 8003d66:	4770      	bx	lr
 8003d68:	4819      	ldr	r0, [pc, #100]	; (8003dd0 <_GetDevFunc+0xc0>)
 8003d6a:	4770      	bx	lr
 8003d6c:	4819      	ldr	r0, [pc, #100]	; (8003dd4 <_GetDevFunc+0xc4>)
 8003d6e:	4770      	bx	lr
 8003d70:	4819      	ldr	r0, [pc, #100]	; (8003dd8 <_GetDevFunc+0xc8>)
 8003d72:	4770      	bx	lr
 8003d74:	4819      	ldr	r0, [pc, #100]	; (8003ddc <_GetDevFunc+0xcc>)
 8003d76:	4770      	bx	lr
 8003d78:	4819      	ldr	r0, [pc, #100]	; (8003de0 <_GetDevFunc+0xd0>)
 8003d7a:	4770      	bx	lr
 8003d7c:	6803      	ldr	r3, [r0, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d82:	4770      	bx	lr
 8003d84:	6803      	ldr	r3, [r0, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d8a:	4770      	bx	lr
 8003d8c:	6803      	ldr	r3, [r0, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003d92:	4770      	bx	lr
 8003d94:	6803      	ldr	r3, [r0, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003d9a:	4770      	bx	lr
 8003d9c:	4811      	ldr	r0, [pc, #68]	; (8003de4 <_GetDevFunc+0xd4>)
 8003d9e:	4770      	bx	lr
 8003da0:	2000      	movs	r0, #0
 8003da2:	4770      	bx	lr
 8003da4:	4810      	ldr	r0, [pc, #64]	; (8003de8 <_GetDevFunc+0xd8>)
 8003da6:	4770      	bx	lr
 8003da8:	080044d9 	.word	0x080044d9
 8003dac:	080045ff 	.word	0x080045ff
 8003db0:	08004503 	.word	0x08004503
 8003db4:	0800442d 	.word	0x0800442d
 8003db8:	080044b1 	.word	0x080044b1
 8003dbc:	08004489 	.word	0x08004489
 8003dc0:	0800446f 	.word	0x0800446f
 8003dc4:	08003e39 	.word	0x08003e39
 8003dc8:	08003e2f 	.word	0x08003e2f
 8003dcc:	08003e19 	.word	0x08003e19
 8003dd0:	08003e03 	.word	0x08003e03
 8003dd4:	08003ded 	.word	0x08003ded
 8003dd8:	080043d5 	.word	0x080043d5
 8003ddc:	08004449 	.word	0x08004449
 8003de0:	08004389 	.word	0x08004389
 8003de4:	08003cb1 	.word	0x08003cb1
 8003de8:	08004641 	.word	0x08004641

08003dec <_SetChroma>:
 8003dec:	b507      	push	{r0, r1, r2, lr}
 8003dee:	6980      	ldr	r0, [r0, #24]
 8003df0:	e88d 0006 	stmia.w	sp, {r1, r2}
 8003df4:	210d      	movs	r1, #13
 8003df6:	466a      	mov	r2, sp
 8003df8:	f7fe fccc 	bl	8002794 <LCD_X_DisplayDriver>
 8003dfc:	b003      	add	sp, #12
 8003dfe:	f85d fb04 	ldr.w	pc, [sp], #4

08003e02 <_SetChromaMode>:
 8003e02:	b507      	push	{r0, r1, r2, lr}
 8003e04:	aa02      	add	r2, sp, #8
 8003e06:	6980      	ldr	r0, [r0, #24]
 8003e08:	f842 1d04 	str.w	r1, [r2, #-4]!
 8003e0c:	210c      	movs	r1, #12
 8003e0e:	f7fe fcc1 	bl	8002794 <LCD_X_DisplayDriver>
 8003e12:	b003      	add	sp, #12
 8003e14:	f85d fb04 	ldr.w	pc, [sp], #4

08003e18 <_SetAlphaMode>:
 8003e18:	b507      	push	{r0, r1, r2, lr}
 8003e1a:	aa02      	add	r2, sp, #8
 8003e1c:	6980      	ldr	r0, [r0, #24]
 8003e1e:	f842 1d04 	str.w	r1, [r2, #-4]!
 8003e22:	210b      	movs	r1, #11
 8003e24:	f7fe fcb6 	bl	8002794 <LCD_X_DisplayDriver>
 8003e28:	b003      	add	sp, #12
 8003e2a:	f85d fb04 	ldr.w	pc, [sp], #4

08003e2e <_Off>:
 8003e2e:	6980      	ldr	r0, [r0, #24]
 8003e30:	2106      	movs	r1, #6
 8003e32:	2200      	movs	r2, #0
 8003e34:	f7fe bcae 	b.w	8002794 <LCD_X_DisplayDriver>

08003e38 <_On>:
 8003e38:	6980      	ldr	r0, [r0, #24]
 8003e3a:	2105      	movs	r1, #5
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f7fe bca9 	b.w	8002794 <LCD_X_DisplayDriver>

08003e42 <_SetOrg>:
 8003e42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003e46:	2300      	movs	r3, #0
 8003e48:	4607      	mov	r7, r0
 8003e4a:	6884      	ldr	r4, [r0, #8]
 8003e4c:	6980      	ldr	r0, [r0, #24]
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	460d      	mov	r5, r1
 8003e52:	4616      	mov	r6, r2
 8003e54:	9301      	str	r3, [sp, #4]
 8003e56:	f000 fcba 	bl	80047ce <LCD_GetMirrorXEx>
 8003e5a:	4680      	mov	r8, r0
 8003e5c:	69b8      	ldr	r0, [r7, #24]
 8003e5e:	f000 fcb9 	bl	80047d4 <LCD_GetMirrorYEx>
 8003e62:	4681      	mov	r9, r0
 8003e64:	69b8      	ldr	r0, [r7, #24]
 8003e66:	f000 fcb8 	bl	80047da <LCD_GetSwapXYEx>
 8003e6a:	0080      	lsls	r0, r0, #2
 8003e6c:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 8003e70:	ea40 0008 	orr.w	r0, r0, r8
 8003e74:	2807      	cmp	r0, #7
 8003e76:	d826      	bhi.n	8003ec6 <_SetOrg+0x84>
 8003e78:	e8df f000 	tbb	[pc, r0]
 8003e7c:	0b0f0408 	.word	0x0b0f0408
 8003e80:	1b1f1519 	.word	0x1b1f1519
 8003e84:	6962      	ldr	r2, [r4, #20]
 8003e86:	68e3      	ldr	r3, [r4, #12]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	1b5d      	subs	r5, r3, r5
 8003e8c:	9500      	str	r5, [sp, #0]
 8003e8e:	9601      	str	r6, [sp, #4]
 8003e90:	e019      	b.n	8003ec6 <_SetOrg+0x84>
 8003e92:	6962      	ldr	r2, [r4, #20]
 8003e94:	68e3      	ldr	r3, [r4, #12]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	1b5d      	subs	r5, r3, r5
 8003e9a:	69a2      	ldr	r2, [r4, #24]
 8003e9c:	6923      	ldr	r3, [r4, #16]
 8003e9e:	9500      	str	r5, [sp, #0]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	1b9e      	subs	r6, r3, r6
 8003ea4:	e7f3      	b.n	8003e8e <_SetOrg+0x4c>
 8003ea6:	69a2      	ldr	r2, [r4, #24]
 8003ea8:	6923      	ldr	r3, [r4, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	1b9e      	subs	r6, r3, r6
 8003eae:	9600      	str	r6, [sp, #0]
 8003eb0:	e008      	b.n	8003ec4 <_SetOrg+0x82>
 8003eb2:	69a2      	ldr	r2, [r4, #24]
 8003eb4:	6923      	ldr	r3, [r4, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	1b9e      	subs	r6, r3, r6
 8003eba:	6962      	ldr	r2, [r4, #20]
 8003ebc:	68e3      	ldr	r3, [r4, #12]
 8003ebe:	9600      	str	r6, [sp, #0]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	1b5d      	subs	r5, r3, r5
 8003ec4:	9501      	str	r5, [sp, #4]
 8003ec6:	69b8      	ldr	r0, [r7, #24]
 8003ec8:	2103      	movs	r1, #3
 8003eca:	466a      	mov	r2, sp
 8003ecc:	f7fe fc62 	bl	8002794 <LCD_X_DisplayDriver>
 8003ed0:	b003      	add	sp, #12
 8003ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003ed8 <_DrawBitmap>:
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	b08d      	sub	sp, #52	; 0x34
 8003ede:	4606      	mov	r6, r0
 8003ee0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003ee2:	910a      	str	r1, [sp, #40]	; 0x28
 8003ee4:	2804      	cmp	r0, #4
 8003ee6:	469b      	mov	fp, r3
 8003ee8:	9209      	str	r2, [sp, #36]	; 0x24
 8003eea:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8003eec:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003eee:	68b3      	ldr	r3, [r6, #8]
 8003ef0:	d011      	beq.n	8003f16 <_DrawBitmap+0x3e>
 8003ef2:	dc09      	bgt.n	8003f08 <_DrawBitmap+0x30>
 8003ef4:	2801      	cmp	r0, #1
 8003ef6:	d013      	beq.n	8003f20 <_DrawBitmap+0x48>
 8003ef8:	2802      	cmp	r0, #2
 8003efa:	f040 822d 	bne.w	8004358 <_DrawBitmap+0x480>
 8003efe:	4aab      	ldr	r2, [pc, #684]	; (80041ac <_DrawBitmap+0x2d4>)
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	920b      	str	r2, [sp, #44]	; 0x2c
 8003f04:	2100      	movs	r1, #0
 8003f06:	e0b8      	b.n	800407a <_DrawBitmap+0x1a2>
 8003f08:	2808      	cmp	r0, #8
 8003f0a:	f000 8172 	beq.w	80041f2 <_DrawBitmap+0x31a>
 8003f0e:	2820      	cmp	r0, #32
 8003f10:	f000 81fb 	beq.w	800430a <_DrawBitmap+0x432>
 8003f14:	e220      	b.n	8004358 <_DrawBitmap+0x480>
 8003f16:	4aa5      	ldr	r2, [pc, #660]	; (80041ac <_DrawBitmap+0x2d4>)
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	e10a      	b.n	8004136 <_DrawBitmap+0x25e>
 8003f20:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003f22:	b90f      	cbnz	r7, 8003f28 <_DrawBitmap+0x50>
 8003f24:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003f26:	e042      	b.n	8003fae <_DrawBitmap+0xd6>
 8003f28:	4ba0      	ldr	r3, [pc, #640]	; (80041ac <_DrawBitmap+0x2d4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	7c1b      	ldrb	r3, [r3, #16]
 8003f2e:	07db      	lsls	r3, r3, #31
 8003f30:	d4f8      	bmi.n	8003f24 <_DrawBitmap+0x4c>
 8003f32:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003f34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003f36:	9302      	str	r3, [sp, #8]
 8003f38:	e88d 0801 	stmia.w	sp, {r0, fp}
 8003f3c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8003f3e:	9003      	str	r0, [sp, #12]
 8003f40:	9504      	str	r5, [sp, #16]
 8003f42:	69b0      	ldr	r0, [r6, #24]
 8003f44:	4623      	mov	r3, r4
 8003f46:	47b8      	blx	r7
 8003f48:	e206      	b.n	8004358 <_DrawBitmap+0x480>
 8003f4a:	4b98      	ldr	r3, [pc, #608]	; (80041ac <_DrawBitmap+0x2d4>)
 8003f4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003f54:	7c1b      	ldrb	r3, [r3, #16]
 8003f56:	f8d5 c000 	ldr.w	ip, [r5]
 8003f5a:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8003f5e:	68b0      	ldr	r0, [r6, #8]
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	448a      	add	sl, r1
 8003f68:	d02d      	beq.n	8003fc6 <_DrawBitmap+0xee>
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d04d      	beq.n	800400a <_DrawBitmap+0x132>
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d04b      	beq.n	800400a <_DrawBitmap+0x132>
 8003f72:	f1c1 0308 	rsb	r3, r1, #8
 8003f76:	7822      	ldrb	r2, [r4, #0]
 8003f78:	498d      	ldr	r1, [pc, #564]	; (80041b0 <_DrawBitmap+0x2d8>)
 8003f7a:	5c8a      	ldrb	r2, [r1, r2]
 8003f7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003f7e:	410a      	asrs	r2, r1
 8003f80:	69c1      	ldr	r1, [r0, #28]
 8003f82:	6800      	ldr	r0, [r0, #0]
 8003f84:	fb01 a107 	mla	r1, r1, r7, sl
 8003f88:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
 8003f8c:	4659      	mov	r1, fp
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f012 0f01 	tst.w	r2, #1
 8003f94:	bf0c      	ite	eq
 8003f96:	46e0      	moveq	r8, ip
 8003f98:	46c8      	movne	r8, r9
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	d00d      	beq.n	8003fba <_DrawBitmap+0xe2>
 8003f9e:	0852      	lsrs	r2, r2, #1
 8003fa0:	3901      	subs	r1, #1
 8003fa2:	f84a 8b04 	str.w	r8, [sl], #4
 8003fa6:	d1f3      	bne.n	8003f90 <_DrawBitmap+0xb8>
 8003fa8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003faa:	3701      	adds	r7, #1
 8003fac:	4414      	add	r4, r2
 8003fae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003fb2:	1a3b      	subs	r3, r7, r0
 8003fb4:	428b      	cmp	r3, r1
 8003fb6:	dbc8      	blt.n	8003f4a <_DrawBitmap+0x72>
 8003fb8:	e1ce      	b.n	8004358 <_DrawBitmap+0x480>
 8003fba:	7843      	ldrb	r3, [r0, #1]
 8003fbc:	4a7c      	ldr	r2, [pc, #496]	; (80041b0 <_DrawBitmap+0x2d8>)
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	5cd2      	ldrb	r2, [r2, r3]
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	e7ec      	b.n	8003fa0 <_DrawBitmap+0xc8>
 8003fc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003fc8:	4979      	ldr	r1, [pc, #484]	; (80041b0 <_DrawBitmap+0x2d8>)
 8003fca:	f1c2 0308 	rsb	r3, r2, #8
 8003fce:	7822      	ldrb	r2, [r4, #0]
 8003fd0:	5c89      	ldrb	r1, [r1, r2]
 8003fd2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003fd4:	4111      	asrs	r1, r2
 8003fd6:	69c2      	ldr	r2, [r0, #28]
 8003fd8:	6800      	ldr	r0, [r0, #0]
 8003fda:	fb02 a207 	mla	r2, r2, r7, sl
 8003fde:	eb00 0a82 	add.w	sl, r0, r2, lsl #2
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	f011 0f01 	tst.w	r1, #1
 8003fea:	bf18      	it	ne
 8003fec:	f84a 9020 	strne.w	r9, [sl, r0, lsl #2]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	d001      	beq.n	8003ff8 <_DrawBitmap+0x120>
 8003ff4:	0849      	lsrs	r1, r1, #1
 8003ff6:	e004      	b.n	8004002 <_DrawBitmap+0x12a>
 8003ff8:	7853      	ldrb	r3, [r2, #1]
 8003ffa:	496d      	ldr	r1, [pc, #436]	; (80041b0 <_DrawBitmap+0x2d8>)
 8003ffc:	3201      	adds	r2, #1
 8003ffe:	5cc9      	ldrb	r1, [r1, r3]
 8004000:	2308      	movs	r3, #8
 8004002:	3001      	adds	r0, #1
 8004004:	4558      	cmp	r0, fp
 8004006:	d1ee      	bne.n	8003fe6 <_DrawBitmap+0x10e>
 8004008:	e7ce      	b.n	8003fa8 <_DrawBitmap+0xd0>
 800400a:	6933      	ldr	r3, [r6, #16]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	4798      	blx	r3
 8004010:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004014:	900b      	str	r0, [sp, #44]	; 0x2c
 8004016:	46d9      	mov	r9, fp
 8004018:	46a4      	mov	ip, r4
 800401a:	f89c 1000 	ldrb.w	r1, [ip]
 800401e:	2280      	movs	r2, #128	; 0x80
 8004020:	fa42 f208 	asr.w	r2, r2, r8
 8004024:	eb0a 030b 	add.w	r3, sl, fp
 8004028:	4211      	tst	r1, r2
 800402a:	ebc9 0303 	rsb	r3, r9, r3
 800402e:	d013      	beq.n	8004058 <_DrawBitmap+0x180>
 8004030:	4619      	mov	r1, r3
 8004032:	463a      	mov	r2, r7
 8004034:	4630      	mov	r0, r6
 8004036:	f8cd c01c 	str.w	ip, [sp, #28]
 800403a:	9308      	str	r3, [sp, #32]
 800403c:	f7ff fd53 	bl	8003ae6 <_GetPixelIndex>
 8004040:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004042:	9b08      	ldr	r3, [sp, #32]
 8004044:	ea80 0e01 	eor.w	lr, r0, r1
 8004048:	463a      	mov	r2, r7
 800404a:	4619      	mov	r1, r3
 800404c:	4630      	mov	r0, r6
 800404e:	4673      	mov	r3, lr
 8004050:	f7ff fd40 	bl	8003ad4 <_SetPixelIndex>
 8004054:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004058:	f108 0801 	add.w	r8, r8, #1
 800405c:	f1b8 0f08 	cmp.w	r8, #8
 8004060:	bf04      	itt	eq
 8004062:	f10c 0c01 	addeq.w	ip, ip, #1
 8004066:	f04f 0800 	moveq.w	r8, #0
 800406a:	f1b9 0901 	subs.w	r9, r9, #1
 800406e:	d1d4      	bne.n	800401a <_DrawBitmap+0x142>
 8004070:	e79a      	b.n	8003fa8 <_DrawBitmap+0xd0>
 8004072:	b935      	cbnz	r5, 8004082 <_DrawBitmap+0x1aa>
 8004074:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8004076:	3101      	adds	r1, #1
 8004078:	443c      	add	r4, r7
 800407a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800407c:	42b9      	cmp	r1, r7
 800407e:	dbf8      	blt.n	8004072 <_DrawBitmap+0x19a>
 8004080:	e16a      	b.n	8004358 <_DrawBitmap+0x480>
 8004082:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004086:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004088:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	7826      	ldrb	r6, [r4, #0]
 800408e:	4438      	add	r0, r7
 8004090:	4488      	add	r8, r1
 8004092:	fb02 0808 	mla	r8, r2, r8, r0
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800409a:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 800409e:	7c02      	ldrb	r2, [r0, #16]
 80040a0:	f012 0203 	ands.w	r2, r2, #3
 80040a4:	46c4      	mov	ip, r8
 80040a6:	d005      	beq.n	80040b4 <_DrawBitmap+0x1dc>
 80040a8:	2a02      	cmp	r2, #2
 80040aa:	d1e3      	bne.n	8004074 <_DrawBitmap+0x19c>
 80040ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80040ae:	9406      	str	r4, [sp, #24]
 80040b0:	2000      	movs	r0, #0
 80040b2:	e020      	b.n	80040f6 <_DrawBitmap+0x21e>
 80040b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80040b6:	4658      	mov	r0, fp
 80040b8:	4627      	mov	r7, r4
 80040ba:	f1c2 0803 	rsb	r8, r2, #3
 80040be:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80040c2:	f1c8 0906 	rsb	r9, r8, #6
 80040c6:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 80040ca:	fa4a f909 	asr.w	r9, sl, r9
 80040ce:	ea09 0906 	and.w	r9, r9, r6
 80040d2:	fa29 f808 	lsr.w	r8, r9, r8
 80040d6:	3201      	adds	r2, #1
 80040d8:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 80040dc:	f84c 8b04 	str.w	r8, [ip], #4
 80040e0:	2a04      	cmp	r2, #4
 80040e2:	d102      	bne.n	80040ea <_DrawBitmap+0x212>
 80040e4:	787e      	ldrb	r6, [r7, #1]
 80040e6:	2200      	movs	r2, #0
 80040e8:	3701      	adds	r7, #1
 80040ea:	3801      	subs	r0, #1
 80040ec:	d1e5      	bne.n	80040ba <_DrawBitmap+0x1e2>
 80040ee:	e7c1      	b.n	8004074 <_DrawBitmap+0x19c>
 80040f0:	3001      	adds	r0, #1
 80040f2:	4558      	cmp	r0, fp
 80040f4:	d0be      	beq.n	8004074 <_DrawBitmap+0x19c>
 80040f6:	f1c2 0c03 	rsb	ip, r2, #3
 80040fa:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80040fe:	f1cc 0906 	rsb	r9, ip, #6
 8004102:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 8004106:	fa4a f909 	asr.w	r9, sl, r9
 800410a:	ea09 0906 	and.w	r9, r9, r6
 800410e:	fa39 fc0c 	lsrs.w	ip, r9, ip
 8004112:	bf1c      	itt	ne
 8004114:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 8004118:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 800411c:	3201      	adds	r2, #1
 800411e:	2a04      	cmp	r2, #4
 8004120:	d1e6      	bne.n	80040f0 <_DrawBitmap+0x218>
 8004122:	9a06      	ldr	r2, [sp, #24]
 8004124:	7856      	ldrb	r6, [r2, #1]
 8004126:	3201      	adds	r2, #1
 8004128:	9206      	str	r2, [sp, #24]
 800412a:	2200      	movs	r2, #0
 800412c:	e7e0      	b.n	80040f0 <_DrawBitmap+0x218>
 800412e:	b935      	cbnz	r5, 800413e <_DrawBitmap+0x266>
 8004130:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8004132:	3101      	adds	r1, #1
 8004134:	443c      	add	r4, r7
 8004136:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8004138:	42b9      	cmp	r1, r7
 800413a:	dbf8      	blt.n	800412e <_DrawBitmap+0x256>
 800413c:	e10c      	b.n	8004358 <_DrawBitmap+0x480>
 800413e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004142:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004144:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	7826      	ldrb	r6, [r4, #0]
 800414a:	4438      	add	r0, r7
 800414c:	4488      	add	r8, r1
 800414e:	fb02 0808 	mla	r8, r2, r8, r0
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004156:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 800415a:	7c02      	ldrb	r2, [r0, #16]
 800415c:	f012 0203 	ands.w	r2, r2, #3
 8004160:	46c4      	mov	ip, r8
 8004162:	d005      	beq.n	8004170 <_DrawBitmap+0x298>
 8004164:	2a02      	cmp	r2, #2
 8004166:	d1e3      	bne.n	8004130 <_DrawBitmap+0x258>
 8004168:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800416a:	9406      	str	r4, [sp, #24]
 800416c:	2000      	movs	r0, #0
 800416e:	e024      	b.n	80041ba <_DrawBitmap+0x2e2>
 8004170:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004172:	4658      	mov	r0, fp
 8004174:	4627      	mov	r7, r4
 8004176:	f1c2 0801 	rsb	r8, r2, #1
 800417a:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800417e:	f1c8 0904 	rsb	r9, r8, #4
 8004182:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8004186:	fa4a f909 	asr.w	r9, sl, r9
 800418a:	ea09 0906 	and.w	r9, r9, r6
 800418e:	fa29 f808 	lsr.w	r8, r9, r8
 8004192:	3201      	adds	r2, #1
 8004194:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 8004198:	f84c 8b04 	str.w	r8, [ip], #4
 800419c:	2a02      	cmp	r2, #2
 800419e:	d102      	bne.n	80041a6 <_DrawBitmap+0x2ce>
 80041a0:	787e      	ldrb	r6, [r7, #1]
 80041a2:	2200      	movs	r2, #0
 80041a4:	3701      	adds	r7, #1
 80041a6:	3801      	subs	r0, #1
 80041a8:	d1e5      	bne.n	8004176 <_DrawBitmap+0x29e>
 80041aa:	e7c1      	b.n	8004130 <_DrawBitmap+0x258>
 80041ac:	20000028 	.word	0x20000028
 80041b0:	0800a8f0 	.word	0x0800a8f0
 80041b4:	3001      	adds	r0, #1
 80041b6:	4558      	cmp	r0, fp
 80041b8:	d0ba      	beq.n	8004130 <_DrawBitmap+0x258>
 80041ba:	f1c2 0c01 	rsb	ip, r2, #1
 80041be:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80041c2:	f1cc 0904 	rsb	r9, ip, #4
 80041c6:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 80041ca:	fa4a f909 	asr.w	r9, sl, r9
 80041ce:	ea09 0906 	and.w	r9, r9, r6
 80041d2:	fa39 fc0c 	lsrs.w	ip, r9, ip
 80041d6:	bf1c      	itt	ne
 80041d8:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 80041dc:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 80041e0:	3201      	adds	r2, #1
 80041e2:	2a02      	cmp	r2, #2
 80041e4:	d1e6      	bne.n	80041b4 <_DrawBitmap+0x2dc>
 80041e6:	9a06      	ldr	r2, [sp, #24]
 80041e8:	7856      	ldrb	r6, [r2, #1]
 80041ea:	3201      	adds	r2, #1
 80041ec:	9206      	str	r2, [sp, #24]
 80041ee:	2200      	movs	r2, #0
 80041f0:	e7e0      	b.n	80041b4 <_DrawBitmap+0x2dc>
 80041f2:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80041f4:	f8df c168 	ldr.w	ip, [pc, #360]	; 8004360 <_DrawBitmap+0x488>
 80041f8:	b127      	cbz	r7, 8004204 <_DrawBitmap+0x32c>
 80041fa:	f8dc 0000 	ldr.w	r0, [ip]
 80041fe:	7c00      	ldrb	r0, [r0, #16]
 8004200:	0780      	lsls	r0, r0, #30
 8004202:	d504      	bpl.n	800420e <_DrawBitmap+0x336>
 8004204:	f8dc c000 	ldr.w	ip, [ip]
 8004208:	f04f 0900 	mov.w	r9, #0
 800420c:	e011      	b.n	8004232 <_DrawBitmap+0x35a>
 800420e:	2d00      	cmp	r5, #0
 8004210:	d0f8      	beq.n	8004204 <_DrawBitmap+0x32c>
 8004212:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004214:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004216:	9302      	str	r3, [sp, #8]
 8004218:	f8cd b000 	str.w	fp, [sp]
 800421c:	9001      	str	r0, [sp, #4]
 800421e:	9503      	str	r5, [sp, #12]
 8004220:	69b0      	ldr	r0, [r6, #24]
 8004222:	4623      	mov	r3, r4
 8004224:	47b8      	blx	r7
 8004226:	e097      	b.n	8004358 <_DrawBitmap+0x480>
 8004228:	b93d      	cbnz	r5, 800423a <_DrawBitmap+0x362>
 800422a:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800422c:	f109 0901 	add.w	r9, r9, #1
 8004230:	443c      	add	r4, r7
 8004232:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8004234:	45b9      	cmp	r9, r7
 8004236:	dbf7      	blt.n	8004228 <_DrawBitmap+0x350>
 8004238:	e08e      	b.n	8004358 <_DrawBitmap+0x480>
 800423a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004240:	4448      	add	r0, r9
 8004242:	fb02 7000 	mla	r0, r2, r0, r7
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800424c:	f89c 2010 	ldrb.w	r2, [ip, #16]
 8004250:	f012 0203 	ands.w	r2, r2, #3
 8004254:	4601      	mov	r1, r0
 8004256:	d003      	beq.n	8004260 <_DrawBitmap+0x388>
 8004258:	2a02      	cmp	r2, #2
 800425a:	d1e6      	bne.n	800422a <_DrawBitmap+0x352>
 800425c:	2100      	movs	r1, #0
 800425e:	e04f      	b.n	8004300 <_DrawBitmap+0x428>
 8004260:	4658      	mov	r0, fp
 8004262:	4622      	mov	r2, r4
 8004264:	2807      	cmp	r0, #7
 8004266:	dd23      	ble.n	80042b0 <_DrawBitmap+0x3d8>
 8004268:	7816      	ldrb	r6, [r2, #0]
 800426a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800426e:	600e      	str	r6, [r1, #0]
 8004270:	7856      	ldrb	r6, [r2, #1]
 8004272:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8004276:	604e      	str	r6, [r1, #4]
 8004278:	7896      	ldrb	r6, [r2, #2]
 800427a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800427e:	608e      	str	r6, [r1, #8]
 8004280:	78d6      	ldrb	r6, [r2, #3]
 8004282:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8004286:	60ce      	str	r6, [r1, #12]
 8004288:	7916      	ldrb	r6, [r2, #4]
 800428a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800428e:	610e      	str	r6, [r1, #16]
 8004290:	7956      	ldrb	r6, [r2, #5]
 8004292:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8004296:	614e      	str	r6, [r1, #20]
 8004298:	7996      	ldrb	r6, [r2, #6]
 800429a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800429e:	618e      	str	r6, [r1, #24]
 80042a0:	79d6      	ldrb	r6, [r2, #7]
 80042a2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80042a6:	61ce      	str	r6, [r1, #28]
 80042a8:	3808      	subs	r0, #8
 80042aa:	3208      	adds	r2, #8
 80042ac:	3120      	adds	r1, #32
 80042ae:	e7d9      	b.n	8004264 <_DrawBitmap+0x38c>
 80042b0:	2803      	cmp	r0, #3
 80042b2:	dd13      	ble.n	80042dc <_DrawBitmap+0x404>
 80042b4:	7816      	ldrb	r6, [r2, #0]
 80042b6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80042ba:	600e      	str	r6, [r1, #0]
 80042bc:	7856      	ldrb	r6, [r2, #1]
 80042be:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80042c2:	604e      	str	r6, [r1, #4]
 80042c4:	7896      	ldrb	r6, [r2, #2]
 80042c6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80042ca:	608e      	str	r6, [r1, #8]
 80042cc:	78d6      	ldrb	r6, [r2, #3]
 80042ce:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80042d2:	60ce      	str	r6, [r1, #12]
 80042d4:	3804      	subs	r0, #4
 80042d6:	3204      	adds	r2, #4
 80042d8:	3110      	adds	r1, #16
 80042da:	e7e9      	b.n	80042b0 <_DrawBitmap+0x3d8>
 80042dc:	2600      	movs	r6, #0
 80042de:	4286      	cmp	r6, r0
 80042e0:	d0a3      	beq.n	800422a <_DrawBitmap+0x352>
 80042e2:	f812 8006 	ldrb.w	r8, [r2, r6]
 80042e6:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 80042ea:	f841 7026 	str.w	r7, [r1, r6, lsl #2]
 80042ee:	3601      	adds	r6, #1
 80042f0:	e7f5      	b.n	80042de <_DrawBitmap+0x406>
 80042f2:	5c62      	ldrb	r2, [r4, r1]
 80042f4:	b11a      	cbz	r2, 80042fe <_DrawBitmap+0x426>
 80042f6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80042fa:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 80042fe:	3101      	adds	r1, #1
 8004300:	ebc1 020b 	rsb	r2, r1, fp
 8004304:	2a00      	cmp	r2, #0
 8004306:	dcf4      	bgt.n	80042f2 <_DrawBitmap+0x41a>
 8004308:	e78f      	b.n	800422a <_DrawBitmap+0x352>
 800430a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800430c:	b90d      	cbnz	r5, 8004312 <_DrawBitmap+0x43a>
 800430e:	462b      	mov	r3, r5
 8004310:	e012      	b.n	8004338 <_DrawBitmap+0x460>
 8004312:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8004314:	9701      	str	r7, [sp, #4]
 8004316:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8004318:	f8cd b000 	str.w	fp, [sp]
 800431c:	9702      	str	r7, [sp, #8]
 800431e:	69b0      	ldr	r0, [r6, #24]
 8004320:	4623      	mov	r3, r4
 8004322:	47a8      	blx	r5
 8004324:	e018      	b.n	8004358 <_DrawBitmap+0x480>
 8004326:	f851 7f04 	ldr.w	r7, [r1, #4]!
 800432a:	1b0d      	subs	r5, r1, r4
 800432c:	3a01      	subs	r2, #1
 800432e:	502f      	str	r7, [r5, r0]
 8004330:	d1f9      	bne.n	8004326 <_DrawBitmap+0x44e>
 8004332:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8004334:	3301      	adds	r3, #1
 8004336:	443c      	add	r4, r7
 8004338:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800433a:	42ab      	cmp	r3, r5
 800433c:	da0c      	bge.n	8004358 <_DrawBitmap+0x480>
 800433e:	68b2      	ldr	r2, [r6, #8]
 8004340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004342:	69d1      	ldr	r1, [r2, #28]
 8004344:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	4418      	add	r0, r3
 800434a:	fb01 5100 	mla	r1, r1, r0, r5
 800434e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8004352:	1f21      	subs	r1, r4, #4
 8004354:	465a      	mov	r2, fp
 8004356:	e7e6      	b.n	8004326 <_DrawBitmap+0x44e>
 8004358:	b00d      	add	sp, #52	; 0x34
 800435a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800435e:	bf00      	nop
 8004360:	20000028 	.word	0x20000028

08004364 <_InitOnce.isra.4>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	6805      	ldr	r5, [r0, #0]
 8004368:	4604      	mov	r4, r0
 800436a:	b93d      	cbnz	r5, 800437c <_InitOnce.isra.4+0x18>
 800436c:	204c      	movs	r0, #76	; 0x4c
 800436e:	f002 f805 	bl	800637c <GUI_ALLOC_GetFixedBlock>
 8004372:	4629      	mov	r1, r5
 8004374:	6020      	str	r0, [r4, #0]
 8004376:	224c      	movs	r2, #76	; 0x4c
 8004378:	f000 fdf2 	bl	8004f60 <GUI__memset>
 800437c:	6820      	ldr	r0, [r4, #0]
 800437e:	f1d0 0001 	rsbs	r0, r0, #1
 8004382:	bf38      	it	cc
 8004384:	2000      	movcc	r0, #0
 8004386:	bd38      	pop	{r3, r4, r5, pc}

08004388 <_SetDevFunc>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	4606      	mov	r6, r0
 800438c:	3008      	adds	r0, #8
 800438e:	460c      	mov	r4, r1
 8004390:	4615      	mov	r5, r2
 8004392:	f7ff ffe7 	bl	8004364 <_InitOnce.isra.4>
 8004396:	68b3      	ldr	r3, [r6, #8]
 8004398:	b1db      	cbz	r3, 80043d2 <_SetDevFunc+0x4a>
 800439a:	2c21      	cmp	r4, #33	; 0x21
 800439c:	d012      	beq.n	80043c4 <_SetDevFunc+0x3c>
 800439e:	dc07      	bgt.n	80043b0 <_SetDevFunc+0x28>
 80043a0:	2c19      	cmp	r4, #25
 80043a2:	d00d      	beq.n	80043c0 <_SetDevFunc+0x38>
 80043a4:	2c20      	cmp	r4, #32
 80043a6:	d00f      	beq.n	80043c8 <_SetDevFunc+0x40>
 80043a8:	2c03      	cmp	r4, #3
 80043aa:	d112      	bne.n	80043d2 <_SetDevFunc+0x4a>
 80043ac:	645d      	str	r5, [r3, #68]	; 0x44
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
 80043b0:	2c25      	cmp	r4, #37	; 0x25
 80043b2:	d00b      	beq.n	80043cc <_SetDevFunc+0x44>
 80043b4:	2c28      	cmp	r4, #40	; 0x28
 80043b6:	d00b      	beq.n	80043d0 <_SetDevFunc+0x48>
 80043b8:	2c23      	cmp	r4, #35	; 0x23
 80043ba:	d10a      	bne.n	80043d2 <_SetDevFunc+0x4a>
 80043bc:	641d      	str	r5, [r3, #64]	; 0x40
 80043be:	bd70      	pop	{r4, r5, r6, pc}
 80043c0:	631d      	str	r5, [r3, #48]	; 0x30
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	635d      	str	r5, [r3, #52]	; 0x34
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	639d      	str	r5, [r3, #56]	; 0x38
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	63dd      	str	r5, [r3, #60]	; 0x3c
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	649d      	str	r5, [r3, #72]	; 0x48
 80043d2:	bd70      	pop	{r4, r5, r6, pc}

080043d4 <_CopyBuffer>:
 80043d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043d8:	4605      	mov	r5, r0
 80043da:	3008      	adds	r0, #8
 80043dc:	460e      	mov	r6, r1
 80043de:	4617      	mov	r7, r2
 80043e0:	f7ff ffc0 	bl	8004364 <_InitOnce.isra.4>
 80043e4:	68ac      	ldr	r4, [r5, #8]
 80043e6:	b1ec      	cbz	r4, 8004424 <_CopyBuffer+0x50>
 80043e8:	42be      	cmp	r6, r7
 80043ea:	d01b      	beq.n	8004424 <_CopyBuffer+0x50>
 80043ec:	68eb      	ldr	r3, [r5, #12]
 80043ee:	2108      	movs	r1, #8
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	4628      	mov	r0, r5
 80043f4:	4798      	blx	r3
 80043f6:	6923      	ldr	r3, [r4, #16]
 80043f8:	6962      	ldr	r2, [r4, #20]
 80043fa:	6861      	ldr	r1, [r4, #4]
 80043fc:	435a      	muls	r2, r3
 80043fe:	4350      	muls	r0, r2
 8004400:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004402:	08c2      	lsrs	r2, r0, #3
 8004404:	fb07 1802 	mla	r8, r7, r2, r1
 8004408:	b123      	cbz	r3, 8004414 <_CopyBuffer+0x40>
 800440a:	69a8      	ldr	r0, [r5, #24]
 800440c:	4631      	mov	r1, r6
 800440e:	463a      	mov	r2, r7
 8004410:	4798      	blx	r3
 8004412:	e005      	b.n	8004420 <_CopyBuffer+0x4c>
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <_CopyBuffer+0x54>)
 8004416:	4640      	mov	r0, r8
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	fb06 1102 	mla	r1, r6, r2, r1
 800441e:	4798      	blx	r3
 8004420:	f8c4 8000 	str.w	r8, [r4]
 8004424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004428:	2000001c 	.word	0x2000001c

0800442c <_GetPos>:
 800442c:	b570      	push	{r4, r5, r6, lr}
 800442e:	4604      	mov	r4, r0
 8004430:	3008      	adds	r0, #8
 8004432:	460d      	mov	r5, r1
 8004434:	4616      	mov	r6, r2
 8004436:	f7ff ff95 	bl	8004364 <_InitOnce.isra.4>
 800443a:	68a3      	ldr	r3, [r4, #8]
 800443c:	b11b      	cbz	r3, 8004446 <_GetPos+0x1a>
 800443e:	6a18      	ldr	r0, [r3, #32]
 8004440:	6028      	str	r0, [r5, #0]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	6033      	str	r3, [r6, #0]
 8004446:	bd70      	pop	{r4, r5, r6, pc}

08004448 <_ShowBuffer>:
 8004448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800444a:	4604      	mov	r4, r0
 800444c:	2300      	movs	r3, #0
 800444e:	3008      	adds	r0, #8
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	460d      	mov	r5, r1
 8004454:	f7ff ff86 	bl	8004364 <_InitOnce.isra.4>
 8004458:	68a3      	ldr	r3, [r4, #8]
 800445a:	b133      	cbz	r3, 800446a <_ShowBuffer+0x22>
 800445c:	aa02      	add	r2, sp, #8
 800445e:	69a0      	ldr	r0, [r4, #24]
 8004460:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004464:	210e      	movs	r1, #14
 8004466:	f7fe f995 	bl	8002794 <LCD_X_DisplayDriver>
 800446a:	b003      	add	sp, #12
 800446c:	bd30      	pop	{r4, r5, pc}

0800446e <_Init>:
 800446e:	b538      	push	{r3, r4, r5, lr}
 8004470:	4604      	mov	r4, r0
 8004472:	3008      	adds	r0, #8
 8004474:	f7ff ff76 	bl	8004364 <_InitOnce.isra.4>
 8004478:	2101      	movs	r1, #1
 800447a:	4605      	mov	r5, r0
 800447c:	2200      	movs	r2, #0
 800447e:	69a0      	ldr	r0, [r4, #24]
 8004480:	f7fe f988 	bl	8002794 <LCD_X_DisplayDriver>
 8004484:	4328      	orrs	r0, r5
 8004486:	bd38      	pop	{r3, r4, r5, pc}

08004488 <_SetVis>:
 8004488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800448a:	4604      	mov	r4, r0
 800448c:	2300      	movs	r3, #0
 800448e:	3008      	adds	r0, #8
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	460d      	mov	r5, r1
 8004494:	f7ff ff66 	bl	8004364 <_InitOnce.isra.4>
 8004498:	68a3      	ldr	r3, [r4, #8]
 800449a:	b13b      	cbz	r3, 80044ac <_SetVis+0x24>
 800449c:	aa02      	add	r2, sp, #8
 800449e:	62dd      	str	r5, [r3, #44]	; 0x2c
 80044a0:	f842 5d04 	str.w	r5, [r2, #-4]!
 80044a4:	69a0      	ldr	r0, [r4, #24]
 80044a6:	2109      	movs	r1, #9
 80044a8:	f7fe f974 	bl	8002794 <LCD_X_DisplayDriver>
 80044ac:	b003      	add	sp, #12
 80044ae:	bd30      	pop	{r4, r5, pc}

080044b0 <_SetAlpha>:
 80044b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044b2:	4604      	mov	r4, r0
 80044b4:	2300      	movs	r3, #0
 80044b6:	3008      	adds	r0, #8
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	460d      	mov	r5, r1
 80044bc:	f7ff ff52 	bl	8004364 <_InitOnce.isra.4>
 80044c0:	68a3      	ldr	r3, [r4, #8]
 80044c2:	b13b      	cbz	r3, 80044d4 <_SetAlpha+0x24>
 80044c4:	aa02      	add	r2, sp, #8
 80044c6:	629d      	str	r5, [r3, #40]	; 0x28
 80044c8:	f842 5d04 	str.w	r5, [r2, #-4]!
 80044cc:	69a0      	ldr	r0, [r4, #24]
 80044ce:	210a      	movs	r1, #10
 80044d0:	f7fe f960 	bl	8002794 <LCD_X_DisplayDriver>
 80044d4:	b003      	add	sp, #12
 80044d6:	bd30      	pop	{r4, r5, pc}

080044d8 <_SetVRAMAddr>:
 80044d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044da:	4604      	mov	r4, r0
 80044dc:	2300      	movs	r3, #0
 80044de:	3008      	adds	r0, #8
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	460d      	mov	r5, r1
 80044e4:	f7ff ff3e 	bl	8004364 <_InitOnce.isra.4>
 80044e8:	68a3      	ldr	r3, [r4, #8]
 80044ea:	b143      	cbz	r3, 80044fe <_SetVRAMAddr+0x26>
 80044ec:	aa02      	add	r2, sp, #8
 80044ee:	601d      	str	r5, [r3, #0]
 80044f0:	605d      	str	r5, [r3, #4]
 80044f2:	f842 5d04 	str.w	r5, [r2, #-4]!
 80044f6:	69a0      	ldr	r0, [r4, #24]
 80044f8:	2102      	movs	r1, #2
 80044fa:	f7fe f94b 	bl	8002794 <LCD_X_DisplayDriver>
 80044fe:	b003      	add	sp, #12
 8004500:	bd30      	pop	{r4, r5, pc}

08004502 <_SetPos>:
 8004502:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004506:	b089      	sub	sp, #36	; 0x24
 8004508:	4604      	mov	r4, r0
 800450a:	460e      	mov	r6, r1
 800450c:	4615      	mov	r5, r2
 800450e:	2100      	movs	r1, #0
 8004510:	2218      	movs	r2, #24
 8004512:	a802      	add	r0, sp, #8
 8004514:	f004 fdd3 	bl	80090be <memset>
 8004518:	f104 0008 	add.w	r0, r4, #8
 800451c:	f7ff ff22 	bl	8004364 <_InitOnce.isra.4>
 8004520:	68a7      	ldr	r7, [r4, #8]
 8004522:	2f00      	cmp	r7, #0
 8004524:	d068      	beq.n	80045f8 <_SetPos+0xf6>
 8004526:	f8d7 8044 	ldr.w	r8, [r7, #68]	; 0x44
 800452a:	f1b8 0f00 	cmp.w	r8, #0
 800452e:	d004      	beq.n	800453a <_SetPos+0x38>
 8004530:	69a0      	ldr	r0, [r4, #24]
 8004532:	4631      	mov	r1, r6
 8004534:	462a      	mov	r2, r5
 8004536:	47c0      	blx	r8
 8004538:	e05e      	b.n	80045f8 <_SetPos+0xf6>
 800453a:	623e      	str	r6, [r7, #32]
 800453c:	627d      	str	r5, [r7, #36]	; 0x24
 800453e:	f000 f99d 	bl	800487c <LCD_GetXSizeDisplay>
 8004542:	4682      	mov	sl, r0
 8004544:	f000 f9a0 	bl	8004888 <LCD_GetYSizeDisplay>
 8004548:	68e2      	ldr	r2, [r4, #12]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8004550:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	4681      	mov	r9, r0
 8004556:	2108      	movs	r1, #8
 8004558:	4620      	mov	r0, r4
 800455a:	4790      	blx	r2
 800455c:	2208      	movs	r2, #8
 800455e:	3007      	adds	r0, #7
 8004560:	fb90 f0f2 	sdiv	r0, r0, r2
 8004564:	2e00      	cmp	r6, #0
 8004566:	9006      	str	r0, [sp, #24]
 8004568:	eb0b 0206 	add.w	r2, fp, r6
 800456c:	9b01      	ldr	r3, [sp, #4]
 800456e:	da07      	bge.n	8004580 <_SetPos+0x7e>
 8004570:	9907      	ldr	r1, [sp, #28]
 8004572:	f8cd 8008 	str.w	r8, [sp, #8]
 8004576:	fb00 1616 	mls	r6, r0, r6, r1
 800457a:	9607      	str	r6, [sp, #28]
 800457c:	9204      	str	r2, [sp, #16]
 800457e:	e007      	b.n	8004590 <_SetPos+0x8e>
 8004580:	4552      	cmp	r2, sl
 8004582:	9602      	str	r6, [sp, #8]
 8004584:	bfca      	itet	gt
 8004586:	ebc6 060a 	rsbgt	r6, r6, sl
 800458a:	f8cd b010 	strle.w	fp, [sp, #16]
 800458e:	9604      	strgt	r6, [sp, #16]
 8004590:	2d00      	cmp	r5, #0
 8004592:	eb03 0205 	add.w	r2, r3, r5
 8004596:	da09      	bge.n	80045ac <_SetPos+0xaa>
 8004598:	9b06      	ldr	r3, [sp, #24]
 800459a:	9205      	str	r2, [sp, #20]
 800459c:	435d      	muls	r5, r3
 800459e:	9b07      	ldr	r3, [sp, #28]
 80045a0:	fb0b 3315 	mls	r3, fp, r5, r3
 80045a4:	9307      	str	r3, [sp, #28]
 80045a6:	2300      	movs	r3, #0
 80045a8:	9303      	str	r3, [sp, #12]
 80045aa:	e006      	b.n	80045ba <_SetPos+0xb8>
 80045ac:	454a      	cmp	r2, r9
 80045ae:	9503      	str	r5, [sp, #12]
 80045b0:	bfca      	itet	gt
 80045b2:	ebc5 0509 	rsbgt	r5, r5, r9
 80045b6:	9305      	strle	r3, [sp, #20]
 80045b8:	9505      	strgt	r5, [sp, #20]
 80045ba:	9b04      	ldr	r3, [sp, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	dd08      	ble.n	80045d4 <_SetPos+0xd2>
 80045c2:	9a05      	ldr	r2, [sp, #20]
 80045c4:	2a00      	cmp	r2, #0
 80045c6:	dd05      	ble.n	80045d4 <_SetPos+0xd2>
 80045c8:	9a02      	ldr	r2, [sp, #8]
 80045ca:	4552      	cmp	r2, sl
 80045cc:	da02      	bge.n	80045d4 <_SetPos+0xd2>
 80045ce:	9a03      	ldr	r2, [sp, #12]
 80045d0:	454a      	cmp	r2, r9
 80045d2:	db06      	blt.n	80045e2 <_SetPos+0xe0>
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d10f      	bne.n	80045f8 <_SetPos+0xf6>
 80045d8:	4620      	mov	r0, r4
 80045da:	2100      	movs	r1, #0
 80045dc:	f7ff ff54 	bl	8004488 <_SetVis>
 80045e0:	e00a      	b.n	80045f8 <_SetPos+0xf6>
 80045e2:	b91b      	cbnz	r3, 80045ec <_SetPos+0xea>
 80045e4:	4620      	mov	r0, r4
 80045e6:	2101      	movs	r1, #1
 80045e8:	f7ff ff4e 	bl	8004488 <_SetVis>
 80045ec:	2108      	movs	r1, #8
 80045ee:	69a0      	ldr	r0, [r4, #24]
 80045f0:	eb0d 0201 	add.w	r2, sp, r1
 80045f4:	f7fe f8ce 	bl	8002794 <LCD_X_DisplayDriver>
 80045f8:	b009      	add	sp, #36	; 0x24
 80045fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080045fe <_SetSize>:
 80045fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004600:	4605      	mov	r5, r0
 8004602:	2300      	movs	r3, #0
 8004604:	3008      	adds	r0, #8
 8004606:	460e      	mov	r6, r1
 8004608:	4617      	mov	r7, r2
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	f7ff fea9 	bl	8004364 <_InitOnce.isra.4>
 8004612:	68ac      	ldr	r4, [r5, #8]
 8004614:	b194      	cbz	r4, 800463c <_SetSize+0x3e>
 8004616:	69e3      	ldr	r3, [r4, #28]
 8004618:	b93b      	cbnz	r3, 800462a <_SetSize+0x2c>
 800461a:	69a8      	ldr	r0, [r5, #24]
 800461c:	f000 f8dd 	bl	80047da <LCD_GetSwapXYEx>
 8004620:	2800      	cmp	r0, #0
 8004622:	bf0c      	ite	eq
 8004624:	4630      	moveq	r0, r6
 8004626:	4638      	movne	r0, r7
 8004628:	61e0      	str	r0, [r4, #28]
 800462a:	60e6      	str	r6, [r4, #12]
 800462c:	6127      	str	r7, [r4, #16]
 800462e:	69a8      	ldr	r0, [r5, #24]
 8004630:	2107      	movs	r1, #7
 8004632:	466a      	mov	r2, sp
 8004634:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8004638:	f7fe f8ac 	bl	8002794 <LCD_X_DisplayDriver>
 800463c:	b003      	add	sp, #12
 800463e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004640 <_SetVSize>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	4606      	mov	r6, r0
 8004644:	3008      	adds	r0, #8
 8004646:	460d      	mov	r5, r1
 8004648:	4617      	mov	r7, r2
 800464a:	f7ff fe8b 	bl	8004364 <_InitOnce.isra.4>
 800464e:	68b4      	ldr	r4, [r6, #8]
 8004650:	b144      	cbz	r4, 8004664 <_SetVSize+0x24>
 8004652:	69b0      	ldr	r0, [r6, #24]
 8004654:	f000 f8c1 	bl	80047da <LCD_GetSwapXYEx>
 8004658:	6165      	str	r5, [r4, #20]
 800465a:	61a7      	str	r7, [r4, #24]
 800465c:	b108      	cbz	r0, 8004662 <_SetVSize+0x22>
 800465e:	61e7      	str	r7, [r4, #28]
 8004660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004662:	61e5      	str	r5, [r4, #28]
 8004664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004666 <LCD_SetVRAMAddrEx>:
 8004666:	b513      	push	{r0, r1, r4, lr}
 8004668:	460c      	mov	r4, r1
 800466a:	f000 ff73 	bl	8005554 <GUI_DEVICE__GetpDriver>
 800466e:	9001      	str	r0, [sp, #4]
 8004670:	b908      	cbnz	r0, 8004676 <LCD_SetVRAMAddrEx+0x10>
 8004672:	2001      	movs	r0, #1
 8004674:	e00b      	b.n	800468e <LCD_SetVRAMAddrEx+0x28>
 8004676:	68c3      	ldr	r3, [r0, #12]
 8004678:	2109      	movs	r1, #9
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	a801      	add	r0, sp, #4
 800467e:	4798      	blx	r3
 8004680:	4603      	mov	r3, r0
 8004682:	2800      	cmp	r0, #0
 8004684:	d0f5      	beq.n	8004672 <LCD_SetVRAMAddrEx+0xc>
 8004686:	9801      	ldr	r0, [sp, #4]
 8004688:	4621      	mov	r1, r4
 800468a:	4798      	blx	r3
 800468c:	2000      	movs	r0, #0
 800468e:	b002      	add	sp, #8
 8004690:	bd10      	pop	{r4, pc}

08004692 <LCD_SetVSizeEx>:
 8004692:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004694:	460d      	mov	r5, r1
 8004696:	4614      	mov	r4, r2
 8004698:	f000 ff5c 	bl	8005554 <GUI_DEVICE__GetpDriver>
 800469c:	9001      	str	r0, [sp, #4]
 800469e:	b908      	cbnz	r0, 80046a4 <LCD_SetVSizeEx+0x12>
 80046a0:	2001      	movs	r0, #1
 80046a2:	e00c      	b.n	80046be <LCD_SetVSizeEx+0x2c>
 80046a4:	68c3      	ldr	r3, [r0, #12]
 80046a6:	210a      	movs	r1, #10
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	a801      	add	r0, sp, #4
 80046ac:	4798      	blx	r3
 80046ae:	4603      	mov	r3, r0
 80046b0:	2800      	cmp	r0, #0
 80046b2:	d0f5      	beq.n	80046a0 <LCD_SetVSizeEx+0xe>
 80046b4:	9801      	ldr	r0, [sp, #4]
 80046b6:	4629      	mov	r1, r5
 80046b8:	4622      	mov	r2, r4
 80046ba:	4798      	blx	r3
 80046bc:	2000      	movs	r0, #0
 80046be:	b003      	add	sp, #12
 80046c0:	bd30      	pop	{r4, r5, pc}

080046c2 <LCD_SetSizeEx>:
 80046c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046c4:	460d      	mov	r5, r1
 80046c6:	4614      	mov	r4, r2
 80046c8:	f000 ff44 	bl	8005554 <GUI_DEVICE__GetpDriver>
 80046cc:	9001      	str	r0, [sp, #4]
 80046ce:	b908      	cbnz	r0, 80046d4 <LCD_SetSizeEx+0x12>
 80046d0:	2001      	movs	r0, #1
 80046d2:	e00c      	b.n	80046ee <LCD_SetSizeEx+0x2c>
 80046d4:	68c3      	ldr	r3, [r0, #12]
 80046d6:	210b      	movs	r1, #11
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	a801      	add	r0, sp, #4
 80046dc:	4798      	blx	r3
 80046de:	4603      	mov	r3, r0
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d0f5      	beq.n	80046d0 <LCD_SetSizeEx+0xe>
 80046e4:	9801      	ldr	r0, [sp, #4]
 80046e6:	4629      	mov	r1, r5
 80046e8:	4622      	mov	r2, r4
 80046ea:	4798      	blx	r3
 80046ec:	2000      	movs	r0, #0
 80046ee:	b003      	add	sp, #12
 80046f0:	bd30      	pop	{r4, r5, pc}

080046f2 <LCD_SetLUTEntryEx>:
 80046f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046f4:	460d      	mov	r5, r1
 80046f6:	4614      	mov	r4, r2
 80046f8:	f000 ff2c 	bl	8005554 <GUI_DEVICE__GetpDriver>
 80046fc:	9001      	str	r0, [sp, #4]
 80046fe:	b908      	cbnz	r0, 8004704 <LCD_SetLUTEntryEx+0x12>
 8004700:	2001      	movs	r0, #1
 8004702:	e00c      	b.n	800471e <LCD_SetLUTEntryEx+0x2c>
 8004704:	68c3      	ldr	r3, [r0, #12]
 8004706:	2110      	movs	r1, #16
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	a801      	add	r0, sp, #4
 800470c:	4798      	blx	r3
 800470e:	4603      	mov	r3, r0
 8004710:	2800      	cmp	r0, #0
 8004712:	d0f5      	beq.n	8004700 <LCD_SetLUTEntryEx+0xe>
 8004714:	9801      	ldr	r0, [sp, #4]
 8004716:	4629      	mov	r1, r5
 8004718:	4622      	mov	r2, r4
 800471a:	4798      	blx	r3
 800471c:	2000      	movs	r0, #0
 800471e:	b003      	add	sp, #12
 8004720:	bd30      	pop	{r4, r5, pc}

08004722 <LCD_GetPosEx>:
 8004722:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004724:	460d      	mov	r5, r1
 8004726:	4614      	mov	r4, r2
 8004728:	f000 ff14 	bl	8005554 <GUI_DEVICE__GetpDriver>
 800472c:	9001      	str	r0, [sp, #4]
 800472e:	b908      	cbnz	r0, 8004734 <LCD_GetPosEx+0x12>
 8004730:	2001      	movs	r0, #1
 8004732:	e00c      	b.n	800474e <LCD_GetPosEx+0x2c>
 8004734:	68c3      	ldr	r3, [r0, #12]
 8004736:	2104      	movs	r1, #4
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	a801      	add	r0, sp, #4
 800473c:	4798      	blx	r3
 800473e:	4603      	mov	r3, r0
 8004740:	2800      	cmp	r0, #0
 8004742:	d0f5      	beq.n	8004730 <LCD_GetPosEx+0xe>
 8004744:	9801      	ldr	r0, [sp, #4]
 8004746:	4629      	mov	r1, r5
 8004748:	4622      	mov	r2, r4
 800474a:	4798      	blx	r3
 800474c:	2000      	movs	r0, #0
 800474e:	b003      	add	sp, #12
 8004750:	bd30      	pop	{r4, r5, pc}

08004752 <LCD_SetDevFunc>:
 8004752:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004754:	460d      	mov	r5, r1
 8004756:	4614      	mov	r4, r2
 8004758:	f000 fefc 	bl	8005554 <GUI_DEVICE__GetpDriver>
 800475c:	9001      	str	r0, [sp, #4]
 800475e:	b908      	cbnz	r0, 8004764 <LCD_SetDevFunc+0x12>
 8004760:	2001      	movs	r0, #1
 8004762:	e00c      	b.n	800477e <LCD_SetDevFunc+0x2c>
 8004764:	68c3      	ldr	r3, [r0, #12]
 8004766:	2116      	movs	r1, #22
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	a801      	add	r0, sp, #4
 800476c:	4798      	blx	r3
 800476e:	4603      	mov	r3, r0
 8004770:	2800      	cmp	r0, #0
 8004772:	d0f5      	beq.n	8004760 <LCD_SetDevFunc+0xe>
 8004774:	9801      	ldr	r0, [sp, #4]
 8004776:	4629      	mov	r1, r5
 8004778:	4622      	mov	r2, r4
 800477a:	4798      	blx	r3
 800477c:	2000      	movs	r0, #0
 800477e:	b003      	add	sp, #12
 8004780:	bd30      	pop	{r4, r5, pc}

08004782 <_GetDevProp>:
 8004782:	2801      	cmp	r0, #1
 8004784:	b510      	push	{r4, lr}
 8004786:	460c      	mov	r4, r1
 8004788:	dc08      	bgt.n	800479c <_GetDevProp+0x1a>
 800478a:	f000 fee3 	bl	8005554 <GUI_DEVICE__GetpDriver>
 800478e:	b120      	cbz	r0, 800479a <_GetDevProp+0x18>
 8004790:	68c3      	ldr	r3, [r0, #12]
 8004792:	4621      	mov	r1, r4
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	4798      	blx	r3
 8004798:	bd10      	pop	{r4, pc}
 800479a:	bd10      	pop	{r4, pc}
 800479c:	2000      	movs	r0, #0
 800479e:	bd10      	pop	{r4, pc}

080047a0 <_GetMaxValue>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	4604      	mov	r4, r0
 80047a4:	4621      	mov	r1, r4
 80047a6:	2001      	movs	r0, #1
 80047a8:	f7ff ffeb 	bl	8004782 <_GetDevProp>
 80047ac:	4621      	mov	r1, r4
 80047ae:	4605      	mov	r5, r0
 80047b0:	2000      	movs	r0, #0
 80047b2:	f7ff ffe6 	bl	8004782 <_GetDevProp>
 80047b6:	42a8      	cmp	r0, r5
 80047b8:	bfb8      	it	lt
 80047ba:	4628      	movlt	r0, r5
 80047bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80047c0:	bd38      	pop	{r3, r4, r5, pc}

080047c2 <LCD_GetBitsPerPixelEx>:
 80047c2:	2108      	movs	r1, #8
 80047c4:	f7ff bfdd 	b.w	8004782 <_GetDevProp>

080047c8 <LCD_GetNumColorsEx>:
 80047c8:	2109      	movs	r1, #9
 80047ca:	f7ff bfda 	b.w	8004782 <_GetDevProp>

080047ce <LCD_GetMirrorXEx>:
 80047ce:	210c      	movs	r1, #12
 80047d0:	f7ff bfd7 	b.w	8004782 <_GetDevProp>

080047d4 <LCD_GetMirrorYEx>:
 80047d4:	210d      	movs	r1, #13
 80047d6:	f7ff bfd4 	b.w	8004782 <_GetDevProp>

080047da <LCD_GetSwapXYEx>:
 80047da:	210e      	movs	r1, #14
 80047dc:	f7ff bfd1 	b.w	8004782 <_GetDevProp>

080047e0 <LCD_GetNumColors>:
 80047e0:	4b02      	ldr	r3, [pc, #8]	; (80047ec <LCD_GetNumColors+0xc>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	7c58      	ldrb	r0, [r3, #17]
 80047e6:	f7ff bfef 	b.w	80047c8 <LCD_GetNumColorsEx>
 80047ea:	bf00      	nop
 80047ec:	20000028 	.word	0x20000028

080047f0 <GUI_GetBitsPerPixelEx>:
 80047f0:	b508      	push	{r3, lr}
 80047f2:	4b04      	ldr	r3, [pc, #16]	; (8004804 <GUI_GetBitsPerPixelEx+0x14>)
 80047f4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80047f8:	68c3      	ldr	r3, [r0, #12]
 80047fa:	2108      	movs	r1, #8
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	4798      	blx	r3
 8004800:	bd08      	pop	{r3, pc}
 8004802:	bf00      	nop
 8004804:	20028e60 	.word	0x20028e60

08004808 <LCD_GetDevFunc>:
 8004808:	b508      	push	{r3, lr}
 800480a:	4b04      	ldr	r3, [pc, #16]	; (800481c <LCD_GetDevFunc+0x14>)
 800480c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8004810:	68d2      	ldr	r2, [r2, #12]
 8004812:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004816:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004818:	4790      	blx	r2
 800481a:	bd08      	pop	{r3, pc}
 800481c:	20028e60 	.word	0x20028e60

08004820 <LCD_GetPaletteEx>:
 8004820:	b508      	push	{r3, lr}
 8004822:	f000 fe97 	bl	8005554 <GUI_DEVICE__GetpDriver>
 8004826:	b120      	cbz	r0, 8004832 <LCD_GetPaletteEx+0x12>
 8004828:	68c3      	ldr	r3, [r0, #12]
 800482a:	2102      	movs	r1, #2
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	4798      	blx	r3
 8004830:	bd08      	pop	{r3, pc}
 8004832:	bd08      	pop	{r3, pc}

08004834 <LCD_GetPalette>:
 8004834:	4b02      	ldr	r3, [pc, #8]	; (8004840 <LCD_GetPalette+0xc>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	7c58      	ldrb	r0, [r3, #17]
 800483a:	f7ff bff1 	b.w	8004820 <LCD_GetPaletteEx>
 800483e:	bf00      	nop
 8004840:	20000028 	.word	0x20000028

08004844 <GUI_GetpfIndex2ColorEx>:
 8004844:	4b02      	ldr	r3, [pc, #8]	; (8004850 <GUI_GetpfIndex2ColorEx+0xc>)
 8004846:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	6858      	ldr	r0, [r3, #4]
 800484e:	4770      	bx	lr
 8004850:	20028e60 	.word	0x20028e60

08004854 <LCD_GetXSizeMax>:
 8004854:	2001      	movs	r0, #1
 8004856:	f7ff bfa3 	b.w	80047a0 <_GetMaxValue>

0800485a <LCD_GetYSizeMax>:
 800485a:	2002      	movs	r0, #2
 800485c:	f7ff bfa0 	b.w	80047a0 <_GetMaxValue>

08004860 <LCD_GetVXSizeMax>:
 8004860:	2003      	movs	r0, #3
 8004862:	f7ff bf9d 	b.w	80047a0 <_GetMaxValue>
	...

08004868 <LCD_SetDisplaySize>:
 8004868:	4b02      	ldr	r3, [pc, #8]	; (8004874 <LCD_SetDisplaySize+0xc>)
 800486a:	6018      	str	r0, [r3, #0]
 800486c:	4b02      	ldr	r3, [pc, #8]	; (8004878 <LCD_SetDisplaySize+0x10>)
 800486e:	6019      	str	r1, [r3, #0]
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20028b08 	.word	0x20028b08
 8004878:	20028b04 	.word	0x20028b04

0800487c <LCD_GetXSizeDisplay>:
 800487c:	4b01      	ldr	r3, [pc, #4]	; (8004884 <LCD_GetXSizeDisplay+0x8>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20028b08 	.word	0x20028b08

08004888 <LCD_GetYSizeDisplay>:
 8004888:	4b01      	ldr	r3, [pc, #4]	; (8004890 <LCD_GetYSizeDisplay+0x8>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20028b04 	.word	0x20028b04

08004894 <_OnExit>:
 8004894:	b510      	push	{r4, lr}
 8004896:	4c04      	ldr	r4, [pc, #16]	; (80048a8 <_OnExit+0x14>)
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	f001 fc97 	bl	80061cc <GUI_ALLOC_FreeFixedBlock>
 800489e:	4a03      	ldr	r2, [pc, #12]	; (80048ac <_OnExit+0x18>)
 80048a0:	2300      	movs	r3, #0
 80048a2:	6023      	str	r3, [r4, #0]
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	bd10      	pop	{r4, pc}
 80048a8:	20028e08 	.word	0x20028e08
 80048ac:	20028b0c 	.word	0x20028b0c

080048b0 <LCD_InitColors>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4d09      	ldr	r5, [pc, #36]	; (80048d8 <LCD_InitColors+0x28>)
 80048b4:	682c      	ldr	r4, [r5, #0]
 80048b6:	b95c      	cbnz	r4, 80048d0 <LCD_InitColors+0x20>
 80048b8:	4b08      	ldr	r3, [pc, #32]	; (80048dc <LCD_InitColors+0x2c>)
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	0080      	lsls	r0, r0, #2
 80048be:	f001 fd5d 	bl	800637c <GUI_ALLOC_GetFixedBlock>
 80048c2:	6028      	str	r0, [r5, #0]
 80048c4:	b130      	cbz	r0, 80048d4 <LCD_InitColors+0x24>
 80048c6:	4806      	ldr	r0, [pc, #24]	; (80048e0 <LCD_InitColors+0x30>)
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <LCD_InitColors+0x34>)
 80048ca:	6003      	str	r3, [r0, #0]
 80048cc:	f000 ffa2 	bl	8005814 <GUI__RegisterExit>
 80048d0:	2000      	movs	r0, #0
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	2001      	movs	r0, #1
 80048d6:	bd38      	pop	{r3, r4, r5, pc}
 80048d8:	20028e08 	.word	0x20028e08
 80048dc:	20000010 	.word	0x20000010
 80048e0:	20028b10 	.word	0x20028b10
 80048e4:	08004895 	.word	0x08004895

080048e8 <LCD_GetpPalConvTableUncached>:
 80048e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048ec:	4604      	mov	r4, r0
 80048ee:	b318      	cbz	r0, 8004938 <LCD_GetpPalConvTableUncached+0x50>
 80048f0:	6886      	ldr	r6, [r0, #8]
 80048f2:	b31e      	cbz	r6, 800493c <LCD_GetpPalConvTableUncached+0x54>
 80048f4:	4f14      	ldr	r7, [pc, #80]	; (8004948 <LCD_GetpPalConvTableUncached+0x60>)
 80048f6:	6838      	ldr	r0, [r7, #0]
 80048f8:	b320      	cbz	r0, 8004944 <LCD_GetpPalConvTableUncached+0x5c>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004900:	dc1f      	bgt.n	8004942 <LCD_GetpPalConvTableUncached+0x5a>
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <LCD_GetpPalConvTableUncached+0x64>)
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	2500      	movs	r5, #0
 8004908:	429a      	cmp	r2, r3
 800490a:	bfb4      	ite	lt
 800490c:	4691      	movlt	r9, r2
 800490e:	4699      	movge	r9, r3
 8004910:	454d      	cmp	r5, r9
 8004912:	da09      	bge.n	8004928 <LCD_GetpPalConvTableUncached+0x40>
 8004914:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8004918:	f8d7 8000 	ldr.w	r8, [r7]
 800491c:	f000 fa68 	bl	8004df0 <LCD_Color2Index>
 8004920:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8004924:	3501      	adds	r5, #1
 8004926:	e7f3      	b.n	8004910 <LCD_GetpPalConvTableUncached+0x28>
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <LCD_GetpPalConvTableUncached+0x68>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	b10b      	cbz	r3, 8004932 <LCD_GetpPalConvTableUncached+0x4a>
 800492e:	4620      	mov	r0, r4
 8004930:	4798      	blx	r3
 8004932:	6838      	ldr	r0, [r7, #0]
 8004934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800493c:	4630      	mov	r0, r6
 800493e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004942:	2000      	movs	r0, #0
 8004944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004948:	20028e08 	.word	0x20028e08
 800494c:	20000010 	.word	0x20000010
 8004950:	20028b0c 	.word	0x20028b0c

08004954 <LCD_GetpPalConvTable>:
 8004954:	f7ff bfc8 	b.w	80048e8 <LCD_GetpPalConvTableUncached>

08004958 <LCD_GetpPalConvTableBM>:
 8004958:	f7ff bfc6 	b.w	80048e8 <LCD_GetpPalConvTableUncached>

0800495c <LCD_InitLUT>:
 800495c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004960:	f003 ffbc 	bl	80088dc <LCD_GetNumLayers>
 8004964:	2400      	movs	r4, #0
 8004966:	4680      	mov	r8, r0
 8004968:	4544      	cmp	r4, r8
 800496a:	da2c      	bge.n	80049c6 <LCD_InitLUT+0x6a>
 800496c:	4620      	mov	r0, r4
 800496e:	f000 fdf1 	bl	8005554 <GUI_DEVICE__GetpDriver>
 8004972:	b330      	cbz	r0, 80049c2 <LCD_InitLUT+0x66>
 8004974:	4e15      	ldr	r6, [pc, #84]	; (80049cc <LCD_InitLUT+0x70>)
 8004976:	6833      	ldr	r3, [r6, #0]
 8004978:	4620      	mov	r0, r4
 800497a:	f893 9011 	ldrb.w	r9, [r3, #17]
 800497e:	745c      	strb	r4, [r3, #17]
 8004980:	f7ff ff1f 	bl	80047c2 <LCD_GetBitsPerPixelEx>
 8004984:	2808      	cmp	r0, #8
 8004986:	dd03      	ble.n	8004990 <LCD_InitLUT+0x34>
 8004988:	6833      	ldr	r3, [r6, #0]
 800498a:	f883 9011 	strb.w	r9, [r3, #17]
 800498e:	e018      	b.n	80049c2 <LCD_InitLUT+0x66>
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <LCD_InitLUT+0x74>)
 8004992:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <LCD_InitLUT+0x78>)
 800499a:	429a      	cmp	r2, r3
 800499c:	d0f4      	beq.n	8004988 <LCD_InitLUT+0x2c>
 800499e:	4620      	mov	r0, r4
 80049a0:	f7ff ff12 	bl	80047c8 <LCD_GetNumColorsEx>
 80049a4:	2500      	movs	r5, #0
 80049a6:	4682      	mov	sl, r0
 80049a8:	4555      	cmp	r5, sl
 80049aa:	daed      	bge.n	8004988 <LCD_InitLUT+0x2c>
 80049ac:	b2ef      	uxtb	r7, r5
 80049ae:	4638      	mov	r0, r7
 80049b0:	f000 fa2e 	bl	8004e10 <LCD_Index2Color>
 80049b4:	4639      	mov	r1, r7
 80049b6:	4602      	mov	r2, r0
 80049b8:	4620      	mov	r0, r4
 80049ba:	f7ff fe9a 	bl	80046f2 <LCD_SetLUTEntryEx>
 80049be:	3501      	adds	r5, #1
 80049c0:	e7f2      	b.n	80049a8 <LCD_InitLUT+0x4c>
 80049c2:	3401      	adds	r4, #1
 80049c4:	e7d0      	b.n	8004968 <LCD_InitLUT+0xc>
 80049c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ca:	bf00      	nop
 80049cc:	20000028 	.word	0x20000028
 80049d0:	20028e60 	.word	0x20028e60
 80049d4:	0800aa34 	.word	0x0800aa34

080049d8 <_SetDrawMode>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <_SetDrawMode+0x24>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	7c1a      	ldrb	r2, [r3, #16]
 80049e0:	ea80 0102 	eor.w	r1, r0, r2
 80049e4:	0749      	lsls	r1, r1, #29
 80049e6:	d505      	bpl.n	80049f4 <_SetDrawMode+0x1c>
 80049e8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80049ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80049ec:	6826      	ldr	r6, [r4, #0]
 80049ee:	680d      	ldr	r5, [r1, #0]
 80049f0:	6025      	str	r5, [r4, #0]
 80049f2:	600e      	str	r6, [r1, #0]
 80049f4:	7418      	strb	r0, [r3, #16]
 80049f6:	4610      	mov	r0, r2
 80049f8:	bd70      	pop	{r4, r5, r6, pc}
 80049fa:	bf00      	nop
 80049fc:	20000028 	.word	0x20000028

08004a00 <LCD_SetDrawMode>:
 8004a00:	b508      	push	{r3, lr}
 8004a02:	4b02      	ldr	r3, [pc, #8]	; (8004a0c <LCD_SetDrawMode+0xc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4798      	blx	r3
 8004a0a:	bd08      	pop	{r3, pc}
 8004a0c:	20000014 	.word	0x20000014

08004a10 <LCD_DrawPixel>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <LCD_DrawPixel+0x54>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	460a      	mov	r2, r1
 8004a18:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8004a1c:	428a      	cmp	r2, r1
 8004a1e:	4604      	mov	r4, r0
 8004a20:	db1e      	blt.n	8004a60 <LCD_DrawPixel+0x50>
 8004a22:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8004a26:	428a      	cmp	r2, r1
 8004a28:	dc1a      	bgt.n	8004a60 <LCD_DrawPixel+0x50>
 8004a2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8004a2e:	4288      	cmp	r0, r1
 8004a30:	db16      	blt.n	8004a60 <LCD_DrawPixel+0x50>
 8004a32:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8004a36:	4288      	cmp	r0, r1
 8004a38:	dc12      	bgt.n	8004a60 <LCD_DrawPixel+0x50>
 8004a3a:	7c19      	ldrb	r1, [r3, #16]
 8004a3c:	7c58      	ldrb	r0, [r3, #17]
 8004a3e:	f011 0f01 	tst.w	r1, #1
 8004a42:	4909      	ldr	r1, [pc, #36]	; (8004a68 <LCD_DrawPixel+0x58>)
 8004a44:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8004a48:	d004      	beq.n	8004a54 <LCD_DrawPixel+0x44>
 8004a4a:	68c3      	ldr	r3, [r0, #12]
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	4798      	blx	r3
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	68c1      	ldr	r1, [r0, #12]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	698d      	ldr	r5, [r1, #24]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	47a8      	blx	r5
 8004a60:	bd38      	pop	{r3, r4, r5, pc}
 8004a62:	bf00      	nop
 8004a64:	20000028 	.word	0x20000028
 8004a68:	20028e60 	.word	0x20028e60

08004a6c <LCD_DrawHLine>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4b10      	ldr	r3, [pc, #64]	; (8004ab0 <LCD_DrawHLine+0x44>)
 8004a70:	681c      	ldr	r4, [r3, #0]
 8004a72:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8004a76:	4299      	cmp	r1, r3
 8004a78:	460d      	mov	r5, r1
 8004a7a:	db17      	blt.n	8004aac <LCD_DrawHLine+0x40>
 8004a7c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004a80:	4299      	cmp	r1, r3
 8004a82:	dc13      	bgt.n	8004aac <LCD_DrawHLine+0x40>
 8004a84:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8004a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a8c:	4288      	cmp	r0, r1
 8004a8e:	bfa8      	it	ge
 8004a90:	4601      	movge	r1, r0
 8004a92:	429a      	cmp	r2, r3
 8004a94:	bfb8      	it	lt
 8004a96:	4613      	movlt	r3, r2
 8004a98:	428b      	cmp	r3, r1
 8004a9a:	db07      	blt.n	8004aac <LCD_DrawHLine+0x40>
 8004a9c:	7c60      	ldrb	r0, [r4, #17]
 8004a9e:	4a05      	ldr	r2, [pc, #20]	; (8004ab4 <LCD_DrawHLine+0x48>)
 8004aa0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004aa4:	68c2      	ldr	r2, [r0, #12]
 8004aa6:	6894      	ldr	r4, [r2, #8]
 8004aa8:	462a      	mov	r2, r5
 8004aaa:	47a0      	blx	r4
 8004aac:	bd38      	pop	{r3, r4, r5, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000028 	.word	0x20000028
 8004ab4:	20028e60 	.word	0x20028e60

08004ab8 <LCD_FillRect>:
 8004ab8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004aba:	460e      	mov	r6, r1
 8004abc:	4912      	ldr	r1, [pc, #72]	; (8004b08 <LCD_FillRect+0x50>)
 8004abe:	680c      	ldr	r4, [r1, #0]
 8004ac0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8004ac4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ac8:	4288      	cmp	r0, r1
 8004aca:	bfa8      	it	ge
 8004acc:	4601      	movge	r1, r0
 8004ace:	42aa      	cmp	r2, r5
 8004ad0:	bfb8      	it	lt
 8004ad2:	4615      	movlt	r5, r2
 8004ad4:	428d      	cmp	r5, r1
 8004ad6:	db14      	blt.n	8004b02 <LCD_FillRect+0x4a>
 8004ad8:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8004adc:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8004ae0:	4296      	cmp	r6, r2
 8004ae2:	bfa8      	it	ge
 8004ae4:	4632      	movge	r2, r6
 8004ae6:	4283      	cmp	r3, r0
 8004ae8:	bfa8      	it	ge
 8004aea:	4603      	movge	r3, r0
 8004aec:	4293      	cmp	r3, r2
 8004aee:	db08      	blt.n	8004b02 <LCD_FillRect+0x4a>
 8004af0:	7c64      	ldrb	r4, [r4, #17]
 8004af2:	4806      	ldr	r0, [pc, #24]	; (8004b0c <LCD_FillRect+0x54>)
 8004af4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004af8:	68c4      	ldr	r4, [r0, #12]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	6924      	ldr	r4, [r4, #16]
 8004afe:	462b      	mov	r3, r5
 8004b00:	47a0      	blx	r4
 8004b02:	b002      	add	sp, #8
 8004b04:	bd70      	pop	{r4, r5, r6, pc}
 8004b06:	bf00      	nop
 8004b08:	20000028 	.word	0x20000028
 8004b0c:	20028e60 	.word	0x20028e60

08004b10 <LCD_DrawBitmap>:
 8004b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b14:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8004d24 <LCD_DrawBitmap+0x214>
 8004b18:	b091      	sub	sp, #68	; 0x44
 8004b1a:	f8dc 9000 	ldr.w	r9, [ip]
 8004b1e:	9207      	str	r2, [sp, #28]
 8004b20:	4605      	mov	r5, r0
 8004b22:	4688      	mov	r8, r1
 8004b24:	469b      	mov	fp, r3
 8004b26:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8004b28:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8004b2a:	f1b9 0f00 	cmp.w	r9, #0
 8004b2e:	d00c      	beq.n	8004b4a <LCD_DrawBitmap+0x3a>
 8004b30:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004b32:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004b34:	9500      	str	r5, [sp, #0]
 8004b36:	9701      	str	r7, [sp, #4]
 8004b38:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004b3a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8004b3c:	9602      	str	r6, [sp, #8]
 8004b3e:	9503      	str	r5, [sp, #12]
 8004b40:	9404      	str	r4, [sp, #16]
 8004b42:	9705      	str	r7, [sp, #20]
 8004b44:	f8d9 4000 	ldr.w	r4, [r9]
 8004b48:	e081      	b.n	8004c4e <LCD_DrawBitmap+0x13e>
 8004b4a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004b4c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004b4e:	ea47 0300 	orr.w	r3, r7, r0
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d17d      	bne.n	8004c52 <LCD_DrawBitmap+0x142>
 8004b56:	4b71      	ldr	r3, [pc, #452]	; (8004d1c <LCD_DrawBitmap+0x20c>)
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8004b5e:	1a53      	subs	r3, r2, r1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	dd08      	ble.n	8004b76 <LCD_DrawBitmap+0x66>
 8004b64:	ebc3 010b 	rsb	r1, r3, fp
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	f340 80d4 	ble.w	8004d16 <LCD_DrawBitmap+0x206>
 8004b6e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8004b70:	fb07 4403 	mla	r4, r7, r3, r4
 8004b74:	e001      	b.n	8004b7a <LCD_DrawBitmap+0x6a>
 8004b76:	4659      	mov	r1, fp
 8004b78:	4642      	mov	r2, r8
 8004b7a:	44d8      	add	r8, fp
 8004b7c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8004b80:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b84:	ebc3 0808 	rsb	r8, r3, r8
 8004b88:	f1b8 0f00 	cmp.w	r8, #0
 8004b8c:	dd04      	ble.n	8004b98 <LCD_DrawBitmap+0x88>
 8004b8e:	ebc8 0101 	rsb	r1, r8, r1
 8004b92:	2900      	cmp	r1, #0
 8004b94:	f340 80bf 	ble.w	8004d16 <LCD_DrawBitmap+0x206>
 8004b98:	9b07      	ldr	r3, [sp, #28]
 8004b9a:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8004b9e:	442b      	add	r3, r5
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	ebcc 0303 	rsb	r3, ip, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	dd02      	ble.n	8004bb0 <LCD_DrawBitmap+0xa0>
 8004baa:	9f07      	ldr	r7, [sp, #28]
 8004bac:	1aff      	subs	r7, r7, r3
 8004bae:	9707      	str	r7, [sp, #28]
 8004bb0:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8004bb4:	4565      	cmp	r5, ip
 8004bb6:	da33      	bge.n	8004c20 <LCD_DrawBitmap+0x110>
 8004bb8:	9f07      	ldr	r7, [sp, #28]
 8004bba:	ebc5 030c 	rsb	r3, r5, ip
 8004bbe:	1aff      	subs	r7, r7, r3
 8004bc0:	2e08      	cmp	r6, #8
 8004bc2:	9707      	str	r7, [sp, #28]
 8004bc4:	d027      	beq.n	8004c16 <LCD_DrawBitmap+0x106>
 8004bc6:	dc0d      	bgt.n	8004be4 <LCD_DrawBitmap+0xd4>
 8004bc8:	2e02      	cmp	r6, #2
 8004bca:	d014      	beq.n	8004bf6 <LCD_DrawBitmap+0xe6>
 8004bcc:	2e04      	cmp	r6, #4
 8004bce:	d01a      	beq.n	8004c06 <LCD_DrawBitmap+0xf6>
 8004bd0:	2e01      	cmp	r6, #1
 8004bd2:	d126      	bne.n	8004c22 <LCD_DrawBitmap+0x112>
 8004bd4:	f023 0c07 	bic.w	ip, r3, #7
 8004bd8:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8004bdc:	4465      	add	r5, ip
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	e01e      	b.n	8004c22 <LCD_DrawBitmap+0x112>
 8004be4:	2e18      	cmp	r6, #24
 8004be6:	d018      	beq.n	8004c1a <LCD_DrawBitmap+0x10a>
 8004be8:	2e20      	cmp	r6, #32
 8004bea:	d016      	beq.n	8004c1a <LCD_DrawBitmap+0x10a>
 8004bec:	2e10      	cmp	r6, #16
 8004bee:	d118      	bne.n	8004c22 <LCD_DrawBitmap+0x112>
 8004bf0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8004bf4:	e013      	b.n	8004c1e <LCD_DrawBitmap+0x10e>
 8004bf6:	f023 0c03 	bic.w	ip, r3, #3
 8004bfa:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8004bfe:	4465      	add	r5, ip
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	e00d      	b.n	8004c22 <LCD_DrawBitmap+0x112>
 8004c06:	f023 0c01 	bic.w	ip, r3, #1
 8004c0a:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8004c0e:	4465      	add	r5, ip
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	e005      	b.n	8004c22 <LCD_DrawBitmap+0x112>
 8004c16:	441c      	add	r4, r3
 8004c18:	e001      	b.n	8004c1e <LCD_DrawBitmap+0x10e>
 8004c1a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004c1e:	4665      	mov	r5, ip
 8004c20:	2300      	movs	r3, #0
 8004c22:	9f07      	ldr	r7, [sp, #28]
 8004c24:	2f00      	cmp	r7, #0
 8004c26:	dd76      	ble.n	8004d16 <LCD_DrawBitmap+0x206>
 8004c28:	f890 e011 	ldrb.w	lr, [r0, #17]
 8004c2c:	483c      	ldr	r0, [pc, #240]	; (8004d20 <LCD_DrawBitmap+0x210>)
 8004c2e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8004c30:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 8004c34:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8004c38:	9403      	str	r4, [sp, #12]
 8004c3a:	e88d 0042 	stmia.w	sp, {r1, r6}
 8004c3e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8004c40:	9304      	str	r3, [sp, #16]
 8004c42:	9702      	str	r7, [sp, #8]
 8004c44:	9405      	str	r4, [sp, #20]
 8004c46:	f8de 4004 	ldr.w	r4, [lr, #4]
 8004c4a:	9b07      	ldr	r3, [sp, #28]
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	47a0      	blx	r4
 8004c50:	e061      	b.n	8004d16 <LCD_DrawBitmap+0x206>
 8004c52:	f1c6 0708 	rsb	r7, r6, #8
 8004c56:	970e      	str	r7, [sp, #56]	; 0x38
 8004c58:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8004c5c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004c5e:	455f      	cmp	r7, fp
 8004c60:	da59      	bge.n	8004d16 <LCD_DrawBitmap+0x206>
 8004c62:	4b2e      	ldr	r3, [pc, #184]	; (8004d1c <LCD_DrawBitmap+0x20c>)
 8004c64:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4447      	add	r7, r8
 8004c6a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004c6e:	970c      	str	r7, [sp, #48]	; 0x30
 8004c70:	3f01      	subs	r7, #1
 8004c72:	4297      	cmp	r7, r2
 8004c74:	970d      	str	r7, [sp, #52]	; 0x34
 8004c76:	db46      	blt.n	8004d06 <LCD_DrawBitmap+0x1f6>
 8004c78:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004c7c:	4598      	cmp	r8, r3
 8004c7e:	dc42      	bgt.n	8004d06 <LCD_DrawBitmap+0x1f6>
 8004c80:	f04f 0a00 	mov.w	sl, #0
 8004c84:	940b      	str	r4, [sp, #44]	; 0x2c
 8004c86:	46ac      	mov	ip, r5
 8004c88:	4657      	mov	r7, sl
 8004c8a:	9807      	ldr	r0, [sp, #28]
 8004c8c:	4287      	cmp	r7, r0
 8004c8e:	da3a      	bge.n	8004d06 <LCD_DrawBitmap+0x1f6>
 8004c90:	f1ba 0f00 	cmp.w	sl, #0
 8004c94:	d106      	bne.n	8004ca4 <LCD_DrawBitmap+0x194>
 8004c96:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004c98:	f890 9000 	ldrb.w	r9, [r0]
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	900b      	str	r0, [sp, #44]	; 0x2c
 8004ca0:	f04f 0a08 	mov.w	sl, #8
 8004ca4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <LCD_DrawBitmap+0x20c>)
 8004ca8:	fa49 f301 	asr.w	r3, r9, r1
 8004cac:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8004cb0:	fa09 f906 	lsl.w	r9, r9, r6
 8004cb4:	fa5f f989 	uxtb.w	r9, r9
 8004cb8:	ebc6 0a0a 	rsb	sl, r6, sl
 8004cbc:	d103      	bne.n	8004cc6 <LCD_DrawBitmap+0x1b6>
 8004cbe:	6810      	ldr	r0, [r2, #0]
 8004cc0:	7c00      	ldrb	r0, [r0, #16]
 8004cc2:	0780      	lsls	r0, r0, #30
 8004cc4:	d41b      	bmi.n	8004cfe <LCD_DrawBitmap+0x1ee>
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cca:	6810      	ldr	r0, [r2, #0]
 8004ccc:	900f      	str	r0, [sp, #60]	; 0x3c
 8004cce:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004cd0:	b110      	cbz	r0, 8004cd8 <LCD_DrawBitmap+0x1c8>
 8004cd2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8004cd6:	e000      	b.n	8004cda <LCD_DrawBitmap+0x1ca>
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	1e4a      	subs	r2, r1, #1
 8004ce0:	4462      	add	r2, ip
 8004ce2:	4660      	mov	r0, ip
 8004ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ce6:	f8cd c020 	str.w	ip, [sp, #32]
 8004cea:	4641      	mov	r1, r8
 8004cec:	f7ff fee4 	bl	8004ab8 <LCD_FillRect>
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <LCD_DrawBitmap+0x20c>)
 8004cf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004d00:	3701      	adds	r7, #1
 8004d02:	449c      	add	ip, r3
 8004d04:	e7c1      	b.n	8004c8a <LCD_DrawBitmap+0x17a>
 8004d06:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004d08:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004d0c:	3701      	adds	r7, #1
 8004d0e:	970a      	str	r7, [sp, #40]	; 0x28
 8004d10:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8004d12:	443c      	add	r4, r7
 8004d14:	e7a2      	b.n	8004c5c <LCD_DrawBitmap+0x14c>
 8004d16:	b011      	add	sp, #68	; 0x44
 8004d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1c:	20000028 	.word	0x20000028
 8004d20:	20028e60 	.word	0x20028e60
 8004d24:	20028e18 	.word	0x20028e18

08004d28 <LCD_SetClipRectMax>:
 8004d28:	b508      	push	{r3, lr}
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <LCD_SetClipRectMax+0x18>)
 8004d2c:	6819      	ldr	r1, [r3, #0]
 8004d2e:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <LCD_SetClipRectMax+0x1c>)
 8004d30:	7c4a      	ldrb	r2, [r1, #17]
 8004d32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004d36:	68c3      	ldr	r3, [r0, #12]
 8004d38:	3108      	adds	r1, #8
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	4798      	blx	r3
 8004d3e:	bd08      	pop	{r3, pc}
 8004d40:	20000028 	.word	0x20000028
 8004d44:	20028e60 	.word	0x20028e60

08004d48 <emWin_LCD_Init>:
 8004d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d4a:	f7ff ffed 	bl	8004d28 <LCD_SetClipRectMax>
 8004d4e:	f7ff fdaf 	bl	80048b0 <LCD_InitColors>
 8004d52:	4604      	mov	r4, r0
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d145      	bne.n	8004de4 <emWin_LCD_Init+0x9c>
 8004d58:	4605      	mov	r5, r0
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f000 fbfa 	bl	8005554 <GUI_DEVICE__GetpDriver>
 8004d60:	9001      	str	r0, [sp, #4]
 8004d62:	b150      	cbz	r0, 8004d7a <emWin_LCD_Init+0x32>
 8004d64:	68c3      	ldr	r3, [r0, #12]
 8004d66:	210c      	movs	r1, #12
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	a801      	add	r0, sp, #4
 8004d6c:	4798      	blx	r3
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d035      	beq.n	8004de0 <emWin_LCD_Init+0x98>
 8004d74:	9801      	ldr	r0, [sp, #4]
 8004d76:	4798      	blx	r3
 8004d78:	4304      	orrs	r4, r0
 8004d7a:	3501      	adds	r5, #1
 8004d7c:	2d02      	cmp	r5, #2
 8004d7e:	d1ec      	bne.n	8004d5a <emWin_LCD_Init+0x12>
 8004d80:	bb84      	cbnz	r4, 8004de4 <emWin_LCD_Init+0x9c>
 8004d82:	f7ff fdeb 	bl	800495c <LCD_InitLUT>
 8004d86:	4b19      	ldr	r3, [pc, #100]	; (8004dec <emWin_LCD_Init+0xa4>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d101      	bne.n	8004d96 <emWin_LCD_Init+0x4e>
 8004d92:	2000      	movs	r0, #0
 8004d94:	e027      	b.n	8004de6 <emWin_LCD_Init+0x9e>
 8004d96:	2401      	movs	r4, #1
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f000 fbdb 	bl	8005554 <GUI_DEVICE__GetpDriver>
 8004d9e:	9001      	str	r0, [sp, #4]
 8004da0:	b1d0      	cbz	r0, 8004dd8 <emWin_LCD_Init+0x90>
 8004da2:	4620      	mov	r0, r4
 8004da4:	f000 fb3c 	bl	8005420 <GUI_SelectLayer>
 8004da8:	2004      	movs	r0, #4
 8004daa:	f7ff fe29 	bl	8004a00 <LCD_SetDrawMode>
 8004dae:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8004db2:	2000      	movs	r0, #0
 8004db4:	4601      	mov	r1, r0
 8004db6:	4613      	mov	r3, r2
 8004db8:	f7ff fe7e 	bl	8004ab8 <LCD_FillRect>
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	f7ff fe1f 	bl	8004a00 <LCD_SetDrawMode>
 8004dc2:	a802      	add	r0, sp, #8
 8004dc4:	210e      	movs	r1, #14
 8004dc6:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	4798      	blx	r3
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	b108      	cbz	r0, 8004dd8 <emWin_LCD_Init+0x90>
 8004dd4:	9801      	ldr	r0, [sp, #4]
 8004dd6:	4798      	blx	r3
 8004dd8:	f114 34ff 	adds.w	r4, r4, #4294967295
 8004ddc:	d2dc      	bcs.n	8004d98 <emWin_LCD_Init+0x50>
 8004dde:	e7d8      	b.n	8004d92 <emWin_LCD_Init+0x4a>
 8004de0:	2001      	movs	r0, #1
 8004de2:	e000      	b.n	8004de6 <emWin_LCD_Init+0x9e>
 8004de4:	4620      	mov	r0, r4
 8004de6:	b003      	add	sp, #12
 8004de8:	bd30      	pop	{r4, r5, pc}
 8004dea:	bf00      	nop
 8004dec:	20028b44 	.word	0x20028b44

08004df0 <LCD_Color2Index>:
 8004df0:	b508      	push	{r3, lr}
 8004df2:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <LCD_Color2Index+0x18>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	7c5a      	ldrb	r2, [r3, #17]
 8004df8:	4b04      	ldr	r3, [pc, #16]	; (8004e0c <LCD_Color2Index+0x1c>)
 8004dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4798      	blx	r3
 8004e04:	bd08      	pop	{r3, pc}
 8004e06:	bf00      	nop
 8004e08:	20000028 	.word	0x20000028
 8004e0c:	20028e60 	.word	0x20028e60

08004e10 <LCD_Index2Color>:
 8004e10:	b508      	push	{r3, lr}
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <LCD_Index2Color+0x18>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	7c5a      	ldrb	r2, [r3, #17]
 8004e18:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <LCD_Index2Color+0x1c>)
 8004e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4798      	blx	r3
 8004e24:	bd08      	pop	{r3, pc}
 8004e26:	bf00      	nop
 8004e28:	20000028 	.word	0x20000028
 8004e2c:	20028e60 	.word	0x20028e60

08004e30 <LCD_SetColorIndex>:
 8004e30:	4b04      	ldr	r3, [pc, #16]	; (8004e44 <LCD_SetColorIndex+0x14>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	7c1a      	ldrb	r2, [r3, #16]
 8004e36:	0752      	lsls	r2, r2, #29
 8004e38:	bf4c      	ite	mi
 8004e3a:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8004e3c:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 8004e3e:	6018      	str	r0, [r3, #0]
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20000028 	.word	0x20000028

08004e48 <_SetColor>:
 8004e48:	b508      	push	{r3, lr}
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <_SetColor+0x1c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e50:	4281      	cmp	r1, r0
 8004e52:	d006      	beq.n	8004e62 <_SetColor+0x1a>
 8004e54:	6318      	str	r0, [r3, #48]	; 0x30
 8004e56:	f7ff ffcb 	bl	8004df0 <LCD_Color2Index>
 8004e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e5e:	f7ff bfe7 	b.w	8004e30 <LCD_SetColorIndex>
 8004e62:	bd08      	pop	{r3, pc}
 8004e64:	20000028 	.word	0x20000028

08004e68 <LCD_SetBkColorIndex>:
 8004e68:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <LCD_SetBkColorIndex+0x14>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	7c1a      	ldrb	r2, [r3, #16]
 8004e6e:	0752      	lsls	r2, r2, #29
 8004e70:	bf4c      	ite	mi
 8004e72:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8004e74:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8004e76:	6018      	str	r0, [r3, #0]
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000028 	.word	0x20000028

08004e80 <_SetBkColor>:
 8004e80:	b508      	push	{r3, lr}
 8004e82:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <_SetBkColor+0x1c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e88:	4281      	cmp	r1, r0
 8004e8a:	d006      	beq.n	8004e9a <_SetBkColor+0x1a>
 8004e8c:	6358      	str	r0, [r3, #52]	; 0x34
 8004e8e:	f7ff ffaf 	bl	8004df0 <LCD_Color2Index>
 8004e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e96:	f7ff bfe7 	b.w	8004e68 <LCD_SetBkColorIndex>
 8004e9a:	bd08      	pop	{r3, pc}
 8004e9c:	20000028 	.word	0x20000028

08004ea0 <LCD_SetBkColor>:
 8004ea0:	b508      	push	{r3, lr}
 8004ea2:	4b02      	ldr	r3, [pc, #8]	; (8004eac <LCD_SetBkColor+0xc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4798      	blx	r3
 8004eaa:	bd08      	pop	{r3, pc}
 8004eac:	20000014 	.word	0x20000014

08004eb0 <LCD_SetColor>:
 8004eb0:	b508      	push	{r3, lr}
 8004eb2:	4b02      	ldr	r3, [pc, #8]	; (8004ebc <LCD_SetColor+0xc>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4798      	blx	r3
 8004eba:	bd08      	pop	{r3, pc}
 8004ebc:	20000014 	.word	0x20000014

08004ec0 <GUI__IntersectRect>:
 8004ec0:	880b      	ldrh	r3, [r1, #0]
 8004ec2:	b510      	push	{r4, lr}
 8004ec4:	f9b0 4000 	ldrsh.w	r4, [r0]
 8004ec8:	b21a      	sxth	r2, r3
 8004eca:	4294      	cmp	r4, r2
 8004ecc:	bfb8      	it	lt
 8004ece:	8003      	strhlt	r3, [r0, #0]
 8004ed0:	884b      	ldrh	r3, [r1, #2]
 8004ed2:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8004ed6:	b21a      	sxth	r2, r3
 8004ed8:	4294      	cmp	r4, r2
 8004eda:	bfb8      	it	lt
 8004edc:	8043      	strhlt	r3, [r0, #2]
 8004ede:	888b      	ldrh	r3, [r1, #4]
 8004ee0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8004ee4:	b21a      	sxth	r2, r3
 8004ee6:	4294      	cmp	r4, r2
 8004ee8:	bfc8      	it	gt
 8004eea:	8083      	strhgt	r3, [r0, #4]
 8004eec:	88cb      	ldrh	r3, [r1, #6]
 8004eee:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8004ef2:	b21a      	sxth	r2, r3
 8004ef4:	4291      	cmp	r1, r2
 8004ef6:	bfc8      	it	gt
 8004ef8:	80c3      	strhgt	r3, [r0, #6]
 8004efa:	bd10      	pop	{r4, pc}

08004efc <GUI__IntersectRects>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004f02:	f9b1 4000 	ldrsh.w	r4, [r1]
 8004f06:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8004f0a:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 8004f0e:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8004f12:	429c      	cmp	r4, r3
 8004f14:	bfb8      	it	lt
 8004f16:	461c      	movlt	r4, r3
 8004f18:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8004f1c:	429d      	cmp	r5, r3
 8004f1e:	bfa8      	it	ge
 8004f20:	462b      	movge	r3, r5
 8004f22:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8004f26:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8004f2a:	42ae      	cmp	r6, r5
 8004f2c:	bfb8      	it	lt
 8004f2e:	4635      	movlt	r5, r6
 8004f30:	b2a4      	uxth	r4, r4
 8004f32:	b2ad      	uxth	r5, r5
 8004f34:	4291      	cmp	r1, r2
 8004f36:	bfb8      	it	lt
 8004f38:	460a      	movlt	r2, r1
 8004f3a:	8004      	strh	r4, [r0, #0]
 8004f3c:	8085      	strh	r5, [r0, #4]
 8004f3e:	b224      	sxth	r4, r4
 8004f40:	b22d      	sxth	r5, r5
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	b292      	uxth	r2, r2
 8004f46:	42a5      	cmp	r5, r4
 8004f48:	8043      	strh	r3, [r0, #2]
 8004f4a:	80c2      	strh	r2, [r0, #6]
 8004f4c:	db06      	blt.n	8004f5c <GUI__IntersectRects+0x60>
 8004f4e:	b210      	sxth	r0, r2
 8004f50:	b21b      	sxth	r3, r3
 8004f52:	4298      	cmp	r0, r3
 8004f54:	bfb4      	ite	lt
 8004f56:	2000      	movlt	r0, #0
 8004f58:	2001      	movge	r0, #1
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}

08004f60 <GUI__memset>:
 8004f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f62:	b2c9      	uxtb	r1, r1
 8004f64:	4603      	mov	r3, r0
 8004f66:	b12a      	cbz	r2, 8004f74 <GUI__memset+0x14>
 8004f68:	079c      	lsls	r4, r3, #30
 8004f6a:	d003      	beq.n	8004f74 <GUI__memset+0x14>
 8004f6c:	f803 1b01 	strb.w	r1, [r3], #1
 8004f70:	3a01      	subs	r2, #1
 8004f72:	e7f8      	b.n	8004f66 <GUI__memset+0x6>
 8004f74:	0894      	lsrs	r4, r2, #2
 8004f76:	d101      	bne.n	8004f7c <GUI__memset+0x1c>
 8004f78:	441a      	add	r2, r3
 8004f7a:	e017      	b.n	8004fac <GUI__memset+0x4c>
 8004f7c:	f04f 3501 	mov.w	r5, #16843009	; 0x1010101
 8004f80:	f002 0203 	and.w	r2, r2, #3
 8004f84:	434d      	muls	r5, r1
 8004f86:	2c03      	cmp	r4, #3
 8004f88:	461e      	mov	r6, r3
 8004f8a:	dd06      	ble.n	8004f9a <GUI__memset+0x3a>
 8004f8c:	601d      	str	r5, [r3, #0]
 8004f8e:	605d      	str	r5, [r3, #4]
 8004f90:	609d      	str	r5, [r3, #8]
 8004f92:	60dd      	str	r5, [r3, #12]
 8004f94:	3c04      	subs	r4, #4
 8004f96:	3310      	adds	r3, #16
 8004f98:	e7f5      	b.n	8004f86 <GUI__memset+0x26>
 8004f9a:	4627      	mov	r7, r4
 8004f9c:	b11c      	cbz	r4, 8004fa6 <GUI__memset+0x46>
 8004f9e:	f846 5b04 	str.w	r5, [r6], #4
 8004fa2:	3c01      	subs	r4, #1
 8004fa4:	e7fa      	b.n	8004f9c <GUI__memset+0x3c>
 8004fa6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8004faa:	e7e5      	b.n	8004f78 <GUI__memset+0x18>
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d002      	beq.n	8004fb6 <GUI__memset+0x56>
 8004fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb4:	e7fa      	b.n	8004fac <GUI__memset+0x4c>
 8004fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fb8 <GUI__MixColorsBulk>:
 8004fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8004fc4:	9303      	str	r3, [sp, #12]
 8004fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	9302      	str	r3, [sp, #8]
 8004fcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fce:	460d      	mov	r5, r1
 8004fd0:	4616      	mov	r6, r2
 8004fd2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8004fd6:	f04f 0900 	mov.w	r9, #0
 8004fda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fdc:	4599      	cmp	r9, r3
 8004fde:	d028      	beq.n	8005032 <GUI__MixColorsBulk+0x7a>
 8004fe0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8004fe4:	4633      	mov	r3, r6
 8004fe6:	46ab      	mov	fp, r5
 8004fe8:	4627      	mov	r7, r4
 8004fea:	f857 0b04 	ldr.w	r0, [r7], #4
 8004fee:	9903      	ldr	r1, [sp, #12]
 8004ff0:	0e02      	lsrs	r2, r0, #24
 8004ff2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8004ff6:	434a      	muls	r2, r1
 8004ff8:	21ff      	movs	r1, #255	; 0xff
 8004ffa:	fbb2 f2f1 	udiv	r2, r2, r1
 8004ffe:	490e      	ldr	r1, [pc, #56]	; (8005038 <GUI__MixColorsBulk+0x80>)
 8005000:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005004:	f8d1 c000 	ldr.w	ip, [r1]
 8005008:	f85b 1b04 	ldr.w	r1, [fp], #4
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	47e0      	blx	ip
 8005012:	9b01      	ldr	r3, [sp, #4]
 8005014:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005018:	f1b8 0801 	subs.w	r8, r8, #1
 800501c:	f843 0b04 	str.w	r0, [r3], #4
 8005020:	d1e3      	bne.n	8004fea <GUI__MixColorsBulk+0x32>
 8005022:	9b02      	ldr	r3, [sp, #8]
 8005024:	4455      	add	r5, sl
 8005026:	4454      	add	r4, sl
 8005028:	4456      	add	r6, sl
 800502a:	441d      	add	r5, r3
 800502c:	f109 0901 	add.w	r9, r9, #1
 8005030:	e7d3      	b.n	8004fda <GUI__MixColorsBulk+0x22>
 8005032:	b005      	add	sp, #20
 8005034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005038:	20000020 	.word	0x20000020

0800503c <GUI__MixColors>:
 800503c:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 8005040:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8005044:	0e0b      	lsrs	r3, r1, #24
 8005046:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800504a:	b530      	push	{r4, r5, lr}
 800504c:	fb02 f303 	mul.w	r3, r2, r3
 8005050:	f04f 04ff 	mov.w	r4, #255	; 0xff
 8005054:	fbb3 f3f4 	udiv	r3, r3, r4
 8005058:	bf08      	it	eq
 800505a:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 800505e:	1ae2      	subs	r2, r4, r3
 8005060:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8005064:	f001 25ff 	and.w	r5, r1, #4278255360	; 0xff00ff00
 8005068:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800506c:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8005070:	0a2d      	lsrs	r5, r5, #8
 8005072:	435c      	muls	r4, r3
 8005074:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8005078:	4343      	muls	r3, r0
 800507a:	fb02 4405 	mla	r4, r2, r5, r4
 800507e:	fb02 3201 	mla	r2, r2, r1, r3
 8005082:	0a12      	lsrs	r2, r2, #8
 8005084:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 8005088:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800508c:	ea44 0002 	orr.w	r0, r4, r2
 8005090:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8005094:	bd30      	pop	{r4, r5, pc}
	...

08005098 <_OnExit>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	4c0a      	ldr	r4, [pc, #40]	; (80050c4 <_OnExit+0x2c>)
 800509c:	4d0a      	ldr	r5, [pc, #40]	; (80050c8 <_OnExit+0x30>)
 800509e:	6820      	ldr	r0, [r4, #0]
 80050a0:	4e0a      	ldr	r6, [pc, #40]	; (80050cc <_OnExit+0x34>)
 80050a2:	f001 f893 	bl	80061cc <GUI_ALLOC_FreeFixedBlock>
 80050a6:	6828      	ldr	r0, [r5, #0]
 80050a8:	f001 f890 	bl	80061cc <GUI_ALLOC_FreeFixedBlock>
 80050ac:	6830      	ldr	r0, [r6, #0]
 80050ae:	f001 f88d 	bl	80061cc <GUI_ALLOC_FreeFixedBlock>
 80050b2:	4a07      	ldr	r2, [pc, #28]	; (80050d0 <_OnExit+0x38>)
 80050b4:	2300      	movs	r3, #0
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	4a06      	ldr	r2, [pc, #24]	; (80050d4 <_OnExit+0x3c>)
 80050ba:	6033      	str	r3, [r6, #0]
 80050bc:	602b      	str	r3, [r5, #0]
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
 80050c4:	20028b1c 	.word	0x20028b1c
 80050c8:	20028b18 	.word	0x20028b18
 80050cc:	20028b20 	.word	0x20028b20
 80050d0:	20028b24 	.word	0x20028b24
 80050d4:	20028b34 	.word	0x20028b34

080050d8 <GUI__GetAlphaBuffer>:
 80050d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050dc:	461c      	mov	r4, r3
 80050de:	4b28      	ldr	r3, [pc, #160]	; (8005180 <GUI__GetAlphaBuffer+0xa8>)
 80050e0:	4617      	mov	r7, r2
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4606      	mov	r6, r0
 80050e6:	4688      	mov	r8, r1
 80050e8:	b932      	cbnz	r2, 80050f8 <GUI__GetAlphaBuffer+0x20>
 80050ea:	2201      	movs	r2, #1
 80050ec:	4825      	ldr	r0, [pc, #148]	; (8005184 <GUI__GetAlphaBuffer+0xac>)
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <GUI__GetAlphaBuffer+0xb0>)
 80050f2:	6003      	str	r3, [r0, #0]
 80050f4:	f000 fb8e 	bl	8005814 <GUI__RegisterExit>
 80050f8:	4d24      	ldr	r5, [pc, #144]	; (800518c <GUI__GetAlphaBuffer+0xb4>)
 80050fa:	682b      	ldr	r3, [r5, #0]
 80050fc:	b933      	cbnz	r3, 800510c <GUI__GetAlphaBuffer+0x34>
 80050fe:	4b24      	ldr	r3, [pc, #144]	; (8005190 <GUI__GetAlphaBuffer+0xb8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	602b      	str	r3, [r5, #0]
 8005104:	b913      	cbnz	r3, 800510c <GUI__GetAlphaBuffer+0x34>
 8005106:	f7ff fbab 	bl	8004860 <LCD_GetVXSizeMax>
 800510a:	6028      	str	r0, [r5, #0]
 800510c:	b10c      	cbz	r4, 8005112 <GUI__GetAlphaBuffer+0x3a>
 800510e:	682b      	ldr	r3, [r5, #0]
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	b196      	cbz	r6, 800513a <GUI__GetAlphaBuffer+0x62>
 8005114:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <GUI__GetAlphaBuffer+0xbc>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	4699      	mov	r9, r3
 800511a:	2400      	movs	r4, #0
 800511c:	b94a      	cbnz	r2, 8005132 <GUI__GetAlphaBuffer+0x5a>
 800511e:	6828      	ldr	r0, [r5, #0]
 8005120:	0080      	lsls	r0, r0, #2
 8005122:	f001 f92b 	bl	800637c <GUI_ALLOC_GetFixedBlock>
 8005126:	f1d0 0401 	rsbs	r4, r0, #1
 800512a:	f8c9 0000 	str.w	r0, [r9]
 800512e:	bf38      	it	cc
 8005130:	2400      	movcc	r4, #0
 8005132:	f8d9 3000 	ldr.w	r3, [r9]
 8005136:	6033      	str	r3, [r6, #0]
 8005138:	e000      	b.n	800513c <GUI__GetAlphaBuffer+0x64>
 800513a:	4634      	mov	r4, r6
 800513c:	f1b8 0f00 	cmp.w	r8, #0
 8005140:	d00d      	beq.n	800515e <GUI__GetAlphaBuffer+0x86>
 8005142:	4e15      	ldr	r6, [pc, #84]	; (8005198 <GUI__GetAlphaBuffer+0xc0>)
 8005144:	6833      	ldr	r3, [r6, #0]
 8005146:	b93b      	cbnz	r3, 8005158 <GUI__GetAlphaBuffer+0x80>
 8005148:	6828      	ldr	r0, [r5, #0]
 800514a:	0080      	lsls	r0, r0, #2
 800514c:	f001 f916 	bl	800637c <GUI_ALLOC_GetFixedBlock>
 8005150:	2800      	cmp	r0, #0
 8005152:	6030      	str	r0, [r6, #0]
 8005154:	bf08      	it	eq
 8005156:	2401      	moveq	r4, #1
 8005158:	6833      	ldr	r3, [r6, #0]
 800515a:	f8c8 3000 	str.w	r3, [r8]
 800515e:	b167      	cbz	r7, 800517a <GUI__GetAlphaBuffer+0xa2>
 8005160:	4e0e      	ldr	r6, [pc, #56]	; (800519c <GUI__GetAlphaBuffer+0xc4>)
 8005162:	6833      	ldr	r3, [r6, #0]
 8005164:	b93b      	cbnz	r3, 8005176 <GUI__GetAlphaBuffer+0x9e>
 8005166:	6828      	ldr	r0, [r5, #0]
 8005168:	0080      	lsls	r0, r0, #2
 800516a:	f001 f907 	bl	800637c <GUI_ALLOC_GetFixedBlock>
 800516e:	2800      	cmp	r0, #0
 8005170:	6030      	str	r0, [r6, #0]
 8005172:	bf08      	it	eq
 8005174:	2401      	moveq	r4, #1
 8005176:	6833      	ldr	r3, [r6, #0]
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	4620      	mov	r0, r4
 800517c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005180:	20028b34 	.word	0x20028b34
 8005184:	20028b28 	.word	0x20028b28
 8005188:	08005099 	.word	0x08005099
 800518c:	20028b24 	.word	0x20028b24
 8005190:	20028e68 	.word	0x20028e68
 8005194:	20028b1c 	.word	0x20028b1c
 8005198:	20028b18 	.word	0x20028b18
 800519c:	20028b20 	.word	0x20028b20

080051a0 <GUI__DoAlphaBlending>:
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	b093      	sub	sp, #76	; 0x4c
 80051a6:	2400      	movs	r4, #0
 80051a8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80051aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80051ac:	910c      	str	r1, [sp, #48]	; 0x30
 80051ae:	4690      	mov	r8, r2
 80051b0:	461f      	mov	r7, r3
 80051b2:	6034      	str	r4, [r6, #0]
 80051b4:	a80f      	add	r0, sp, #60	; 0x3c
 80051b6:	a910      	add	r1, sp, #64	; 0x40
 80051b8:	4622      	mov	r2, r4
 80051ba:	ab11      	add	r3, sp, #68	; 0x44
 80051bc:	f7ff ff8c 	bl	80050d8 <GUI__GetAlphaBuffer>
 80051c0:	4605      	mov	r5, r0
 80051c2:	2800      	cmp	r0, #0
 80051c4:	f040 80c5 	bne.w	8005352 <GUI__DoAlphaBlending+0x1b2>
 80051c8:	4c64      	ldr	r4, [pc, #400]	; (800535c <GUI__DoAlphaBlending+0x1bc>)
 80051ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	7c58      	ldrb	r0, [r3, #17]
 80051d0:	4b63      	ldr	r3, [pc, #396]	; (8005360 <GUI__DoAlphaBlending+0x1c0>)
 80051d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80051d6:	9307      	str	r3, [sp, #28]
 80051d8:	4297      	cmp	r7, r2
 80051da:	bfa8      	it	ge
 80051dc:	4617      	movge	r7, r2
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	920d      	str	r2, [sp, #52]	; 0x34
 80051e2:	970a      	str	r7, [sp, #40]	; 0x28
 80051e4:	f7ff fb04 	bl	80047f0 <GUI_GetBitsPerPixelEx>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	9008      	str	r0, [sp, #32]
 80051ec:	7c58      	ldrb	r0, [r3, #17]
 80051ee:	f7ff fb29 	bl	8004844 <GUI_GetpfIndex2ColorEx>
 80051f2:	4b5c      	ldr	r3, [pc, #368]	; (8005364 <GUI__DoAlphaBlending+0x1c4>)
 80051f4:	9004      	str	r0, [sp, #16]
 80051f6:	4298      	cmp	r0, r3
 80051f8:	d005      	beq.n	8005206 <GUI__DoAlphaBlending+0x66>
 80051fa:	4b5b      	ldr	r3, [pc, #364]	; (8005368 <GUI__DoAlphaBlending+0x1c8>)
 80051fc:	1ac3      	subs	r3, r0, r3
 80051fe:	bf18      	it	ne
 8005200:	2301      	movne	r3, #1
 8005202:	9306      	str	r3, [sp, #24]
 8005204:	e000      	b.n	8005208 <GUI__DoAlphaBlending+0x68>
 8005206:	9506      	str	r5, [sp, #24]
 8005208:	2500      	movs	r5, #0
 800520a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800520c:	46ab      	mov	fp, r5
 800520e:	4643      	mov	r3, r8
 8005210:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005212:	f853 0b04 	ldr.w	r0, [r3], #4
 8005216:	9305      	str	r3, [sp, #20]
 8005218:	4790      	blx	r2
 800521a:	0e03      	lsrs	r3, r0, #24
 800521c:	4681      	mov	r9, r0
 800521e:	9309      	str	r3, [sp, #36]	; 0x24
 8005220:	f000 8087 	beq.w	8005332 <GUI__DoAlphaBlending+0x192>
 8005224:	f1bb 0f00 	cmp.w	fp, #0
 8005228:	d13f      	bne.n	80052aa <GUI__DoAlphaBlending+0x10a>
 800522a:	4b4c      	ldr	r3, [pc, #304]	; (800535c <GUI__DoAlphaBlending+0x1bc>)
 800522c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005232:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005236:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800523a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800523c:	442f      	add	r7, r5
 800523e:	42bb      	cmp	r3, r7
 8005240:	bfc8      	it	gt
 8005242:	ebc7 0b03 	rsbgt	fp, r7, r3
 8005246:	eb0b 0a05 	add.w	sl, fp, r5
 800524a:	bfc8      	it	gt
 800524c:	461f      	movgt	r7, r3
 800524e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005250:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005254:	4453      	add	r3, sl
 8005256:	4494      	add	ip, r2
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	9b07      	ldr	r3, [sp, #28]
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8005262:	4638      	mov	r0, r7
 8005264:	460b      	mov	r3, r1
 8005266:	f8cd c00c 	str.w	ip, [sp, #12]
 800526a:	f003 fb07 	bl	800887c <GUI_ReadRectEx>
 800526e:	9a08      	ldr	r2, [sp, #32]
 8005270:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005272:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005276:	2a17      	cmp	r2, #23
 8005278:	dc06      	bgt.n	8005288 <GUI__DoAlphaBlending+0xe8>
 800527a:	4450      	add	r0, sl
 800527c:	ebcb 0104 	rsb	r1, fp, r4
 8005280:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005282:	f003 fbc7 	bl	8008a14 <GUI__ExpandPixelIndicesEx>
 8005286:	e001      	b.n	800528c <GUI__DoAlphaBlending+0xec>
 8005288:	9b06      	ldr	r3, [sp, #24]
 800528a:	b913      	cbnz	r3, 8005292 <GUI__DoAlphaBlending+0xf2>
 800528c:	f04f 0b01 	mov.w	fp, #1
 8005290:	e00b      	b.n	80052aa <GUI__DoAlphaBlending+0x10a>
 8005292:	ebc7 070c 	rsb	r7, r7, ip
 8005296:	4482      	add	sl, r0
 8005298:	f8da 0000 	ldr.w	r0, [sl]
 800529c:	9a04      	ldr	r2, [sp, #16]
 800529e:	4790      	blx	r2
 80052a0:	3f01      	subs	r7, #1
 80052a2:	f84a 0b04 	str.w	r0, [sl], #4
 80052a6:	d1f7      	bne.n	8005298 <GUI__DoAlphaBlending+0xf8>
 80052a8:	e7f0      	b.n	800528c <GUI__DoAlphaBlending+0xec>
 80052aa:	4b30      	ldr	r3, [pc, #192]	; (800536c <GUI__DoAlphaBlending+0x1cc>)
 80052ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80052ae:	f8d3 c000 	ldr.w	ip, [r3]
 80052b2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80052b4:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 80052b8:	f1bc 0f00 	cmp.w	ip, #0
 80052bc:	d024      	beq.n	8005308 <GUI__DoAlphaBlending+0x168>
 80052be:	eb07 020a 	add.w	r2, r7, sl
 80052c2:	4451      	add	r1, sl
 80052c4:	9210      	str	r2, [sp, #64]	; 0x40
 80052c6:	4623      	mov	r3, r4
 80052c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80052ca:	4640      	mov	r0, r8
 80052cc:	47e0      	blx	ip
 80052ce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80052d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052d2:	2300      	movs	r3, #0
 80052d4:	f858 1003 	ldr.w	r1, [r8, r3]
 80052d8:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 80052dc:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 80052e0:	58e8      	ldr	r0, [r5, r3]
 80052e2:	d101      	bne.n	80052e8 <GUI__DoAlphaBlending+0x148>
 80052e4:	50d0      	str	r0, [r2, r3]
 80052e6:	e005      	b.n	80052f4 <GUI__DoAlphaBlending+0x154>
 80052e8:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 80052ec:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 80052f0:	bf08      	it	eq
 80052f2:	50d1      	streq	r1, [r2, r3]
 80052f4:	3c01      	subs	r4, #1
 80052f6:	f103 0304 	add.w	r3, r3, #4
 80052fa:	d1eb      	bne.n	80052d4 <GUI__DoAlphaBlending+0x134>
 80052fc:	6833      	ldr	r3, [r6, #0]
 80052fe:	9710      	str	r7, [sp, #64]	; 0x40
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	6033      	str	r3, [r6, #0]
 8005306:	e022      	b.n	800534e <GUI__DoAlphaBlending+0x1ae>
 8005308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530a:	2bff      	cmp	r3, #255	; 0xff
 800530c:	d104      	bne.n	8005318 <GUI__DoAlphaBlending+0x178>
 800530e:	f851 300a 	ldr.w	r3, [r1, sl]
 8005312:	f847 300a 	str.w	r3, [r7, sl]
 8005316:	e013      	b.n	8005340 <GUI__DoAlphaBlending+0x1a0>
 8005318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800531a:	f851 100a 	ldr.w	r1, [r1, sl]
 800531e:	43da      	mvns	r2, r3
 8005320:	4b13      	ldr	r3, [pc, #76]	; (8005370 <GUI__DoAlphaBlending+0x1d0>)
 8005322:	f029 407f 	bic.w	r0, r9, #4278190080	; 0xff000000
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	4798      	blx	r3
 800532c:	f847 000a 	str.w	r0, [r7, sl]
 8005330:	e002      	b.n	8005338 <GUI__DoAlphaBlending+0x198>
 8005332:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005334:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005338:	6833      	ldr	r3, [r6, #0]
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	6033      	str	r3, [r6, #0]
 8005340:	3c01      	subs	r4, #1
 8005342:	f105 0501 	add.w	r5, r5, #1
 8005346:	d002      	beq.n	800534e <GUI__DoAlphaBlending+0x1ae>
 8005348:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800534c:	e75f      	b.n	800520e <GUI__DoAlphaBlending+0x6e>
 800534e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005350:	e000      	b.n	8005354 <GUI__DoAlphaBlending+0x1b4>
 8005352:	4620      	mov	r0, r4
 8005354:	b013      	add	sp, #76	; 0x4c
 8005356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535a:	bf00      	nop
 800535c:	20000028 	.word	0x20000028
 8005360:	20028e60 	.word	0x20028e60
 8005364:	080066f7 	.word	0x080066f7
 8005368:	080066f5 	.word	0x080066f5
 800536c:	20028b30 	.word	0x20028b30
 8005370:	20000020 	.word	0x20000020

08005374 <GUI__AllocAlphaBuffer>:
 8005374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005376:	b108      	cbz	r0, 800537c <GUI__AllocAlphaBuffer+0x8>
 8005378:	aa03      	add	r2, sp, #12
 800537a:	e000      	b.n	800537e <GUI__AllocAlphaBuffer+0xa>
 800537c:	4602      	mov	r2, r0
 800537e:	a801      	add	r0, sp, #4
 8005380:	a902      	add	r1, sp, #8
 8005382:	2300      	movs	r3, #0
 8005384:	f7ff fea8 	bl	80050d8 <GUI__GetAlphaBuffer>
 8005388:	b005      	add	sp, #20
 800538a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005390 <GUI_SetFuncAlphaBlending>:
 8005390:	4b02      	ldr	r3, [pc, #8]	; (800539c <GUI_SetFuncAlphaBlending+0xc>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	6018      	str	r0, [r3, #0]
 8005396:	4610      	mov	r0, r2
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20028b30 	.word	0x20028b30

080053a0 <GUI_SetFuncMixColors>:
 80053a0:	4b02      	ldr	r3, [pc, #8]	; (80053ac <GUI_SetFuncMixColors+0xc>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	6018      	str	r0, [r3, #0]
 80053a6:	4610      	mov	r0, r2
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	20000020 	.word	0x20000020

080053b0 <GUI_SetFuncMixColorsBulk>:
 80053b0:	4b02      	ldr	r3, [pc, #8]	; (80053bc <GUI_SetFuncMixColorsBulk+0xc>)
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	6018      	str	r0, [r3, #0]
 80053b6:	4610      	mov	r0, r2
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000024 	.word	0x20000024

080053c0 <GUI_UC__GetCharCodeInc>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	4e08      	ldr	r6, [pc, #32]	; (80053e4 <GUI_UC__GetCharCodeInc+0x24>)
 80053c4:	6804      	ldr	r4, [r0, #0]
 80053c6:	6833      	ldr	r3, [r6, #0]
 80053c8:	4605      	mov	r5, r0
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4620      	mov	r0, r4
 80053ce:	4798      	blx	r3
 80053d0:	6833      	ldr	r3, [r6, #0]
 80053d2:	4607      	mov	r7, r0
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4620      	mov	r0, r4
 80053d8:	4798      	blx	r3
 80053da:	4420      	add	r0, r4
 80053dc:	6028      	str	r0, [r5, #0]
 80053de:	4638      	mov	r0, r7
 80053e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20028e58 	.word	0x20028e58

080053e8 <GUI_UC__NumChars2NumBytes>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	4604      	mov	r4, r0
 80053ec:	460e      	mov	r6, r1
 80053ee:	2500      	movs	r5, #0
 80053f0:	b146      	cbz	r6, 8005404 <GUI_UC__NumChars2NumBytes+0x1c>
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <GUI_UC__NumChars2NumBytes+0x20>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4620      	mov	r0, r4
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	4798      	blx	r3
 80053fc:	3e01      	subs	r6, #1
 80053fe:	4404      	add	r4, r0
 8005400:	4405      	add	r5, r0
 8005402:	e7f5      	b.n	80053f0 <GUI_UC__NumChars2NumBytes+0x8>
 8005404:	4628      	mov	r0, r5
 8005406:	bd70      	pop	{r4, r5, r6, pc}
 8005408:	20028e58 	.word	0x20028e58

0800540c <GUI_GetLayerPosEx>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	460d      	mov	r5, r1
 8005410:	4614      	mov	r4, r2
 8005412:	f7ff f986 	bl	8004722 <LCD_GetPosEx>
 8005416:	b110      	cbz	r0, 800541e <GUI_GetLayerPosEx+0x12>
 8005418:	2300      	movs	r3, #0
 800541a:	602b      	str	r3, [r5, #0]
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	bd38      	pop	{r3, r4, r5, pc}

08005420 <GUI_SelectLayer>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	4d08      	ldr	r5, [pc, #32]	; (8005444 <GUI_SelectLayer+0x24>)
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	2801      	cmp	r0, #1
 8005428:	4604      	mov	r4, r0
 800542a:	7c5e      	ldrb	r6, [r3, #17]
 800542c:	d808      	bhi.n	8005440 <GUI_SelectLayer+0x20>
 800542e:	f000 f891 	bl	8005554 <GUI_DEVICE__GetpDriver>
 8005432:	b128      	cbz	r0, 8005440 <GUI_SelectLayer+0x20>
 8005434:	682b      	ldr	r3, [r5, #0]
 8005436:	745c      	strb	r4, [r3, #17]
 8005438:	f000 fb15 	bl	8005a66 <GUI_SelectLCD>
 800543c:	4b02      	ldr	r3, [pc, #8]	; (8005448 <GUI_SelectLayer+0x28>)
 800543e:	601c      	str	r4, [r3, #0]
 8005440:	4630      	mov	r0, r6
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	20000028 	.word	0x20000028
 8005448:	20028f58 	.word	0x20028f58

0800544c <GUI_DispString>:
 800544c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005450:	4604      	mov	r4, r0
 8005452:	2800      	cmp	r0, #0
 8005454:	d079      	beq.n	800554a <GUI_DispString+0xfe>
 8005456:	4d3e      	ldr	r5, [pc, #248]	; (8005550 <GUI_DispString+0x104>)
 8005458:	f000 fdcc 	bl	8005ff4 <GUI_GetFontDistY>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	4680      	mov	r8, r0
 8005460:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 8005464:	f000 fdae 	bl	8005fc4 <GUI_GetYAdjust>
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800546c:	b287      	uxth	r7, r0
 800546e:	1bd2      	subs	r2, r2, r7
 8005470:	849a      	strh	r2, [r3, #36]	; 0x24
 8005472:	7823      	ldrb	r3, [r4, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d05d      	beq.n	8005534 <GUI_DispString+0xe8>
 8005478:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800547c:	4620      	mov	r0, r4
 800547e:	f000 fcef 	bl	8005e60 <GUI__GetLineNumChars>
 8005482:	4606      	mov	r6, r0
 8005484:	4631      	mov	r1, r6
 8005486:	4620      	mov	r0, r4
 8005488:	f000 fd18 	bl	8005ebc <GUI__GetLineDistX>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005490:	f002 0203 	and.w	r2, r2, #3
 8005494:	2a01      	cmp	r2, #1
 8005496:	d005      	beq.n	80054a4 <GUI_DispString+0x58>
 8005498:	2a02      	cmp	r2, #2
 800549a:	bf14      	ite	ne
 800549c:	2200      	movne	r2, #0
 800549e:	fb90 f2f2 	sdiveq	r2, r0, r2
 80054a2:	e000      	b.n	80054a6 <GUI_DispString+0x5a>
 80054a4:	4602      	mov	r2, r0
 80054a6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80054a8:	1a8a      	subs	r2, r1, r2
 80054aa:	b292      	uxth	r2, r2
 80054ac:	b291      	uxth	r1, r2
 80054ae:	8459      	strh	r1, [r3, #34]	; 0x22
 80054b0:	fa1f fa80 	uxth.w	sl, r0
 80054b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80054b6:	f8ad 1000 	strh.w	r1, [sp]
 80054ba:	f10a 31ff 	add.w	r1, sl, #4294967295
 80054be:	440a      	add	r2, r1
 80054c0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80054c4:	fa1f fb88 	uxth.w	fp, r8
 80054c8:	3b01      	subs	r3, #1
 80054ca:	445b      	add	r3, fp
 80054cc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80054d0:	4620      	mov	r0, r4
 80054d2:	4631      	mov	r1, r6
 80054d4:	466a      	mov	r2, sp
 80054d6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80054da:	f000 fd1f 	bl	8005f1c <GUI__DispLine>
 80054de:	682b      	ldr	r3, [r5, #0]
 80054e0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80054e4:	849a      	strh	r2, [r3, #36]	; 0x24
 80054e6:	4620      	mov	r0, r4
 80054e8:	4631      	mov	r1, r6
 80054ea:	f7ff ff7d 	bl	80053e8 <GUI_UC__NumChars2NumBytes>
 80054ee:	5c23      	ldrb	r3, [r4, r0]
 80054f0:	2b0a      	cmp	r3, #10
 80054f2:	eb04 0200 	add.w	r2, r4, r0
 80054f6:	d001      	beq.n	80054fc <GUI_DispString+0xb0>
 80054f8:	2b0d      	cmp	r3, #13
 80054fa:	d112      	bne.n	8005522 <GUI_DispString+0xd6>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8005500:	f001 0103 	and.w	r1, r1, #3
 8005504:	3901      	subs	r1, #1
 8005506:	2901      	cmp	r1, #1
 8005508:	bf8a      	itet	hi
 800550a:	8c19      	ldrhhi	r1, [r3, #32]
 800550c:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 8005510:	8459      	strhhi	r1, [r3, #34]	; 0x22
 8005512:	7811      	ldrb	r1, [r2, #0]
 8005514:	290a      	cmp	r1, #10
 8005516:	d10b      	bne.n	8005530 <GUI_DispString+0xe4>
 8005518:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800551a:	448b      	add	fp, r1
 800551c:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 8005520:	e006      	b.n	8005530 <GUI_DispString+0xe4>
 8005522:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <GUI_DispString+0x104>)
 8005524:	f8bd 0000 	ldrh.w	r0, [sp]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4482      	add	sl, r0
 800552c:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 8005530:	7813      	ldrb	r3, [r2, #0]
 8005532:	b943      	cbnz	r3, 8005546 <GUI_DispString+0xfa>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8005538:	4417      	add	r7, r2
 800553a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800553c:	849f      	strh	r7, [r3, #36]	; 0x24
 800553e:	f022 0203 	bic.w	r2, r2, #3
 8005542:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005544:	e001      	b.n	800554a <GUI_DispString+0xfe>
 8005546:	1c54      	adds	r4, r2, #1
 8005548:	e793      	b.n	8005472 <GUI_DispString+0x26>
 800554a:	b003      	add	sp, #12
 800554c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005550:	20000028 	.word	0x20000028

08005554 <GUI_DEVICE__GetpDriver>:
 8005554:	2801      	cmp	r0, #1
 8005556:	dc09      	bgt.n	800556c <GUI_DEVICE__GetpDriver+0x18>
 8005558:	4b05      	ldr	r3, [pc, #20]	; (8005570 <GUI_DEVICE__GetpDriver+0x1c>)
 800555a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800555e:	b120      	cbz	r0, 800556a <GUI_DEVICE__GetpDriver+0x16>
 8005560:	68c3      	ldr	r3, [r0, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	b11b      	cbz	r3, 800556e <GUI_DEVICE__GetpDriver+0x1a>
 8005566:	6800      	ldr	r0, [r0, #0]
 8005568:	e7f9      	b.n	800555e <GUI_DEVICE__GetpDriver+0xa>
 800556a:	4770      	bx	lr
 800556c:	2000      	movs	r0, #0
 800556e:	4770      	bx	lr
 8005570:	20028e60 	.word	0x20028e60

08005574 <GUI_DEVICE_Delete>:
 8005574:	f000 be2a 	b.w	80061cc <GUI_ALLOC_FreeFixedBlock>

08005578 <GUI_DEVICE_Create>:
 8005578:	2b01      	cmp	r3, #1
 800557a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557c:	4606      	mov	r6, r0
 800557e:	460d      	mov	r5, r1
 8005580:	4617      	mov	r7, r2
 8005582:	461c      	mov	r4, r3
 8005584:	dd01      	ble.n	800558a <GUI_DEVICE_Create+0x12>
 8005586:	2000      	movs	r0, #0
 8005588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800558a:	201c      	movs	r0, #28
 800558c:	f000 fef6 	bl	800637c <GUI_ALLOC_GetFixedBlock>
 8005590:	2800      	cmp	r0, #0
 8005592:	d0f8      	beq.n	8005586 <GUI_DEVICE_Create+0xe>
 8005594:	b10d      	cbz	r5, 800559a <GUI_DEVICE_Create+0x22>
 8005596:	6105      	str	r5, [r0, #16]
 8005598:	e009      	b.n	80055ae <GUI_DEVICE_Create+0x36>
 800559a:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <GUI_DEVICE_Create+0x48>)
 800559c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80055a0:	b129      	cbz	r1, 80055ae <GUI_DEVICE_Create+0x36>
 80055a2:	680b      	ldr	r3, [r1, #0]
 80055a4:	b10b      	cbz	r3, 80055aa <GUI_DEVICE_Create+0x32>
 80055a6:	4619      	mov	r1, r3
 80055a8:	e7fb      	b.n	80055a2 <GUI_DEVICE_Create+0x2a>
 80055aa:	690b      	ldr	r3, [r1, #16]
 80055ac:	6103      	str	r3, [r0, #16]
 80055ae:	2300      	movs	r3, #0
 80055b0:	6083      	str	r3, [r0, #8]
 80055b2:	6184      	str	r4, [r0, #24]
 80055b4:	8287      	strh	r7, [r0, #20]
 80055b6:	60c6      	str	r6, [r0, #12]
 80055b8:	6003      	str	r3, [r0, #0]
 80055ba:	6043      	str	r3, [r0, #4]
 80055bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055be:	bf00      	nop
 80055c0:	20028e60 	.word	0x20028e60

080055c4 <GUI_DEVICE_Unlink>:
 80055c4:	6981      	ldr	r1, [r0, #24]
 80055c6:	4a0b      	ldr	r2, [pc, #44]	; (80055f4 <GUI_DEVICE_Unlink+0x30>)
 80055c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80055cc:	4283      	cmp	r3, r0
 80055ce:	d105      	bne.n	80055dc <GUI_DEVICE_Unlink+0x18>
 80055d0:	6803      	ldr	r3, [r0, #0]
 80055d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80055d6:	b10b      	cbz	r3, 80055dc <GUI_DEVICE_Unlink+0x18>
 80055d8:	2200      	movs	r2, #0
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	6843      	ldr	r3, [r0, #4]
 80055de:	b10b      	cbz	r3, 80055e4 <GUI_DEVICE_Unlink+0x20>
 80055e0:	6802      	ldr	r2, [r0, #0]
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	6802      	ldr	r2, [r0, #0]
 80055e6:	b102      	cbz	r2, 80055ea <GUI_DEVICE_Unlink+0x26>
 80055e8:	6053      	str	r3, [r2, #4]
 80055ea:	2300      	movs	r3, #0
 80055ec:	6003      	str	r3, [r0, #0]
 80055ee:	6043      	str	r3, [r0, #4]
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20028e60 	.word	0x20028e60

080055f8 <GUI_DEVICE_Link>:
 80055f8:	b570      	push	{r4, r5, r6, lr}
 80055fa:	b908      	cbnz	r0, 8005600 <GUI_DEVICE_Link+0x8>
 80055fc:	2001      	movs	r0, #1
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
 8005600:	6982      	ldr	r2, [r0, #24]
 8005602:	2a01      	cmp	r2, #1
 8005604:	dcfa      	bgt.n	80055fc <GUI_DEVICE_Link+0x4>
 8005606:	4b1b      	ldr	r3, [pc, #108]	; (8005674 <GUI_DEVICE_Link+0x7c>)
 8005608:	7819      	ldrb	r1, [r3, #0]
 800560a:	428a      	cmp	r2, r1
 800560c:	bfa4      	itt	ge
 800560e:	1c51      	addge	r1, r2, #1
 8005610:	7019      	strbge	r1, [r3, #0]
 8005612:	4919      	ldr	r1, [pc, #100]	; (8005678 <GUI_DEVICE_Link+0x80>)
 8005614:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8005618:	460d      	mov	r5, r1
 800561a:	b913      	cbnz	r3, 8005622 <GUI_DEVICE_Link+0x2a>
 800561c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8005620:	e01a      	b.n	8005658 <GUI_DEVICE_Link+0x60>
 8005622:	6859      	ldr	r1, [r3, #4]
 8005624:	b109      	cbz	r1, 800562a <GUI_DEVICE_Link+0x32>
 8005626:	460b      	mov	r3, r1
 8005628:	e7fb      	b.n	8005622 <GUI_DEVICE_Link+0x2a>
 800562a:	68c1      	ldr	r1, [r0, #12]
 800562c:	680e      	ldr	r6, [r1, #0]
 800562e:	68d9      	ldr	r1, [r3, #12]
 8005630:	680c      	ldr	r4, [r1, #0]
 8005632:	42b4      	cmp	r4, r6
 8005634:	dd03      	ble.n	800563e <GUI_DEVICE_Link+0x46>
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f8      	bne.n	800562e <GUI_DEVICE_Link+0x36>
 800563c:	e7de      	b.n	80055fc <GUI_DEVICE_Link+0x4>
 800563e:	d102      	bne.n	8005646 <GUI_DEVICE_Link+0x4e>
 8005640:	8a81      	ldrh	r1, [r0, #20]
 8005642:	2901      	cmp	r1, #1
 8005644:	d00f      	beq.n	8005666 <GUI_DEVICE_Link+0x6e>
 8005646:	6859      	ldr	r1, [r3, #4]
 8005648:	b189      	cbz	r1, 800566e <GUI_DEVICE_Link+0x76>
 800564a:	6008      	str	r0, [r1, #0]
 800564c:	6041      	str	r1, [r0, #4]
 800564e:	6058      	str	r0, [r3, #4]
 8005650:	4298      	cmp	r0, r3
 8005652:	bf08      	it	eq
 8005654:	2300      	moveq	r3, #0
 8005656:	6003      	str	r3, [r0, #0]
 8005658:	2000      	movs	r0, #0
 800565a:	bd70      	pop	{r4, r5, r6, pc}
 800565c:	68cb      	ldr	r3, [r1, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	42a3      	cmp	r3, r4
 8005662:	460b      	mov	r3, r1
 8005664:	dbef      	blt.n	8005646 <GUI_DEVICE_Link+0x4e>
 8005666:	6819      	ldr	r1, [r3, #0]
 8005668:	2900      	cmp	r1, #0
 800566a:	d1f7      	bne.n	800565c <GUI_DEVICE_Link+0x64>
 800566c:	e7eb      	b.n	8005646 <GUI_DEVICE_Link+0x4e>
 800566e:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 8005672:	e7ec      	b.n	800564e <GUI_DEVICE_Link+0x56>
 8005674:	20028e0e 	.word	0x20028e0e
 8005678:	20028e60 	.word	0x20028e60

0800567c <GUI_DEVICE_CreateAndLink>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	461d      	mov	r5, r3
 8005680:	f7ff ff7a 	bl	8005578 <GUI_DEVICE_Create>
 8005684:	4604      	mov	r4, r0
 8005686:	b148      	cbz	r0, 800569c <GUI_DEVICE_CreateAndLink+0x20>
 8005688:	f7ff ffb6 	bl	80055f8 <GUI_DEVICE_Link>
 800568c:	68e3      	ldr	r3, [r4, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	b923      	cbnz	r3, 800569c <GUI_DEVICE_CreateAndLink+0x20>
 8005692:	4b03      	ldr	r3, [pc, #12]	; (80056a0 <GUI_DEVICE_CreateAndLink+0x24>)
 8005694:	3516      	adds	r5, #22
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800569c:	4620      	mov	r0, r4
 800569e:	bd38      	pop	{r3, r4, r5, pc}
 80056a0:	20000028 	.word	0x20000028

080056a4 <_OnExit>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <_OnExit+0x30>)
 80056a8:	4e0b      	ldr	r6, [pc, #44]	; (80056d8 <_OnExit+0x34>)
 80056aa:	4d0c      	ldr	r5, [pc, #48]	; (80056dc <_OnExit+0x38>)
 80056ac:	2400      	movs	r4, #0
 80056ae:	601c      	str	r4, [r3, #0]
 80056b0:	4621      	mov	r1, r4
 80056b2:	6833      	ldr	r3, [r6, #0]
 80056b4:	2270      	movs	r2, #112	; 0x70
 80056b6:	4628      	mov	r0, r5
 80056b8:	4798      	blx	r3
 80056ba:	6833      	ldr	r3, [r6, #0]
 80056bc:	4808      	ldr	r0, [pc, #32]	; (80056e0 <_OnExit+0x3c>)
 80056be:	4621      	mov	r1, r4
 80056c0:	2208      	movs	r2, #8
 80056c2:	4798      	blx	r3
 80056c4:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <_OnExit+0x40>)
 80056c6:	601d      	str	r5, [r3, #0]
 80056c8:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <_OnExit+0x44>)
 80056ca:	701c      	strb	r4, [r3, #0]
 80056cc:	4b07      	ldr	r3, [pc, #28]	; (80056ec <_OnExit+0x48>)
 80056ce:	601c      	str	r4, [r3, #0]
 80056d0:	bd70      	pop	{r4, r5, r6, pc}
 80056d2:	bf00      	nop
 80056d4:	20028bb8 	.word	0x20028bb8
 80056d8:	20000018 	.word	0x20000018
 80056dc:	20028b48 	.word	0x20028b48
 80056e0:	20028e60 	.word	0x20028e60
 80056e4:	20000028 	.word	0x20000028
 80056e8:	20028e48 	.word	0x20028e48
 80056ec:	20028e20 	.word	0x20028e20

080056f0 <_InitContext>:
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	4d19      	ldr	r5, [pc, #100]	; (8005758 <_InitContext+0x68>)
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	1d1a      	adds	r2, r3, #4
 80056f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80056fa:	f103 0208 	add.w	r2, r3, #8
 80056fe:	639b      	str	r3, [r3, #56]	; 0x38
 8005700:	641b      	str	r3, [r3, #64]	; 0x40
 8005702:	6142      	str	r2, [r0, #20]
 8005704:	7c5a      	ldrb	r2, [r3, #17]
 8005706:	4b15      	ldr	r3, [pc, #84]	; (800575c <_InitContext+0x6c>)
 8005708:	4604      	mov	r4, r0
 800570a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800570e:	68c3      	ldr	r3, [r0, #12]
 8005710:	f104 0108 	add.w	r1, r4, #8
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	4798      	blx	r3
 8005718:	4b11      	ldr	r3, [pc, #68]	; (8005760 <_InitContext+0x70>)
 800571a:	6663      	str	r3, [r4, #100]	; 0x64
 800571c:	4b11      	ldr	r3, [pc, #68]	; (8005764 <_InitContext+0x74>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	61e3      	str	r3, [r4, #28]
 8005722:	682b      	ldr	r3, [r5, #0]
 8005724:	3308      	adds	r3, #8
 8005726:	6163      	str	r3, [r4, #20]
 8005728:	2301      	movs	r3, #1
 800572a:	7623      	strb	r3, [r4, #24]
 800572c:	f001 fb60 	bl	8006df0 <WM_GetDesktopWindow>
 8005730:	2303      	movs	r3, #3
 8005732:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8005736:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800573a:	6323      	str	r3, [r4, #48]	; 0x30
 800573c:	6363      	str	r3, [r4, #52]	; 0x34
 800573e:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <_InitContext+0x78>)
 8005740:	64a0      	str	r0, [r4, #72]	; 0x48
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	f7ff fbac 	bl	8004ea0 <LCD_SetBkColor>
 8005748:	4b08      	ldr	r3, [pc, #32]	; (800576c <_InitContext+0x7c>)
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	f7ff fbb0 	bl	8004eb0 <LCD_SetColor>
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <_InitContext+0x80>)
 8005752:	4a08      	ldr	r2, [pc, #32]	; (8005774 <_InitContext+0x84>)
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	20000028 	.word	0x20000028
 800575c:	20028e60 	.word	0x20028e60
 8005760:	0800a9fc 	.word	0x0800a9fc
 8005764:	2000002c 	.word	0x2000002c
 8005768:	20028b44 	.word	0x20028b44
 800576c:	20000034 	.word	0x20000034
 8005770:	20028e58 	.word	0x20028e58
 8005774:	0800be84 	.word	0x0800be84

08005778 <GUI_SetFuncGetpPalConvTable>:
 8005778:	4b01      	ldr	r3, [pc, #4]	; (8005780 <GUI_SetFuncGetpPalConvTable+0x8>)
 800577a:	6018      	str	r0, [r3, #0]
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	20000030 	.word	0x20000030

08005784 <GUI_SetDefaultFont>:
 8005784:	4b01      	ldr	r3, [pc, #4]	; (800578c <GUI_SetDefaultFont+0x8>)
 8005786:	6018      	str	r0, [r3, #0]
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	2000002c 	.word	0x2000002c

08005790 <GUI_ClearRect>:
 8005790:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005794:	4607      	mov	r7, r0
 8005796:	2004      	movs	r0, #4
 8005798:	469a      	mov	sl, r3
 800579a:	460e      	mov	r6, r1
 800579c:	4691      	mov	r9, r2
 800579e:	f7ff f92f 	bl	8004a00 <LCD_SetDrawMode>
 80057a2:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <GUI_ClearRect+0x60>)
 80057a4:	681c      	ldr	r4, [r3, #0]
 80057a6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80057a8:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80057aa:	442f      	add	r7, r5
 80057ac:	4426      	add	r6, r4
 80057ae:	4680      	mov	r8, r0
 80057b0:	444d      	add	r5, r9
 80057b2:	4454      	add	r4, sl
 80057b4:	4668      	mov	r0, sp
 80057b6:	f8ad 7000 	strh.w	r7, [sp]
 80057ba:	f8ad 5004 	strh.w	r5, [sp, #4]
 80057be:	f8ad 6002 	strh.w	r6, [sp, #2]
 80057c2:	f8ad 4006 	strh.w	r4, [sp, #6]
 80057c6:	f002 f87f 	bl	80078c8 <WM__InitIVRSearch>
 80057ca:	b928      	cbnz	r0, 80057d8 <GUI_ClearRect+0x48>
 80057cc:	4640      	mov	r0, r8
 80057ce:	f7ff f917 	bl	8004a00 <LCD_SetDrawMode>
 80057d2:	b002      	add	sp, #8
 80057d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d8:	4638      	mov	r0, r7
 80057da:	4631      	mov	r1, r6
 80057dc:	462a      	mov	r2, r5
 80057de:	4623      	mov	r3, r4
 80057e0:	f7ff f96a 	bl	8004ab8 <LCD_FillRect>
 80057e4:	f001 ffae 	bl	8007744 <WM__GetNextIVR>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d1f5      	bne.n	80057d8 <GUI_ClearRect+0x48>
 80057ec:	e7ee      	b.n	80057cc <GUI_ClearRect+0x3c>
 80057ee:	bf00      	nop
 80057f0:	20000028 	.word	0x20000028

080057f4 <GUI_Clear>:
 80057f4:	b510      	push	{r4, lr}
 80057f6:	2000      	movs	r0, #0
 80057f8:	4601      	mov	r1, r0
 80057fa:	f000 f90f 	bl	8005a1c <GUI_GotoXY>
 80057fe:	4804      	ldr	r0, [pc, #16]	; (8005810 <GUI_Clear+0x1c>)
 8005800:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8005804:	4601      	mov	r1, r0
 8005806:	4613      	mov	r3, r2
 8005808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800580c:	f7ff bfc0 	b.w	8005790 <GUI_ClearRect>
 8005810:	ffffc001 	.word	0xffffc001

08005814 <GUI__RegisterExit>:
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <GUI__RegisterExit+0x20>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	605a      	str	r2, [r3, #4]
 8005824:	4b03      	ldr	r3, [pc, #12]	; (8005834 <GUI__RegisterExit+0x20>)
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	20028b38 	.word	0x20028b38

08005838 <GUI__Config>:
 8005838:	b508      	push	{r3, lr}
 800583a:	4b08      	ldr	r3, [pc, #32]	; (800585c <GUI__Config+0x24>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	b962      	cbnz	r2, 800585a <GUI__Config+0x22>
 8005840:	2201      	movs	r2, #1
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	f7fc fe5e 	bl	8002504 <GUI_X_Config>
 8005848:	f7fc feaa 	bl	80025a0 <LCD_X_Config>
 800584c:	4804      	ldr	r0, [pc, #16]	; (8005860 <GUI__Config+0x28>)
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <GUI__Config+0x2c>)
 8005850:	6003      	str	r3, [r0, #0]
 8005852:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005856:	f7ff bfdd 	b.w	8005814 <GUI__RegisterExit>
 800585a:	bd08      	pop	{r3, pc}
 800585c:	20028bb8 	.word	0x20028bb8
 8005860:	20028b3c 	.word	0x20028b3c
 8005864:	080056a5 	.word	0x080056a5

08005868 <GUI_Init>:
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	4b26      	ldr	r3, [pc, #152]	; (8005908 <GUI_Init+0xa0>)
 8005870:	4a25      	ldr	r2, [pc, #148]	; (8005908 <GUI_Init+0xa0>)
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	4b24      	ldr	r3, [pc, #144]	; (800590c <GUI_Init+0xa4>)
 800587c:	2201      	movs	r2, #1
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	bf00      	nop
 8005882:	4b22      	ldr	r3, [pc, #136]	; (800590c <GUI_Init+0xa4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1fb      	bne.n	8005882 <GUI_Init+0x1a>
 800588a:	4b21      	ldr	r3, [pc, #132]	; (8005910 <GUI_Init+0xa8>)
 800588c:	4a21      	ldr	r2, [pc, #132]	; (8005914 <GUI_Init+0xac>)
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	4b1f      	ldr	r3, [pc, #124]	; (8005910 <GUI_Init+0xa8>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	4b20      	ldr	r3, [pc, #128]	; (8005918 <GUI_Init+0xb0>)
 8005896:	429a      	cmp	r2, r3
 8005898:	d000      	beq.n	800589c <GUI_Init+0x34>
 800589a:	e7fe      	b.n	800589a <GUI_Init+0x32>
 800589c:	f7ff ffcc 	bl	8005838 <GUI__Config>
 80058a0:	4b1e      	ldr	r3, [pc, #120]	; (800591c <GUI_Init+0xb4>)
 80058a2:	222e      	movs	r2, #46	; 0x2e
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	f7fc fe3d 	bl	8002524 <GUI_X_Init>
 80058aa:	481d      	ldr	r0, [pc, #116]	; (8005920 <GUI_Init+0xb8>)
 80058ac:	f7ff ff20 	bl	80056f0 <_InitContext>
 80058b0:	f7ff fa4a 	bl	8004d48 <emWin_LCD_Init>
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	f7fe ffe1 	bl	800487c <LCD_GetXSizeDisplay>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <GUI_Init+0x62>
 80058c0:	f7fe ffe2 	bl	8004888 <LCD_GetYSizeDisplay>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <GUI_Init+0x76>
 80058ca:	f7fe ffc3 	bl	8004854 <LCD_GetXSizeMax>
 80058ce:	4604      	mov	r4, r0
 80058d0:	f7fe ffc3 	bl	800485a <LCD_GetYSizeMax>
 80058d4:	4603      	mov	r3, r0
 80058d6:	4620      	mov	r0, r4
 80058d8:	4619      	mov	r1, r3
 80058da:	f7fe ffc5 	bl	8004868 <LCD_SetDisplaySize>
 80058de:	2000      	movs	r0, #0
 80058e0:	2100      	movs	r1, #0
 80058e2:	f000 f8d7 	bl	8005a94 <GUI_SetOrg>
 80058e6:	f002 f8cd 	bl	8007a84 <WM_Init>
 80058ea:	4b0e      	ldr	r3, [pc, #56]	; (8005924 <GUI_Init+0xbc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <GUI_Init+0x90>
 80058f2:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <GUI_Init+0xbc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4798      	blx	r3
 80058f8:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <GUI_Init+0xc0>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4618      	mov	r0, r3
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	bd90      	pop	{r4, r7, pc}
 8005908:	e0002000 	.word	0xe0002000
 800590c:	40023008 	.word	0x40023008
 8005910:	40023000 	.word	0x40023000
 8005914:	f407a5c2 	.word	0xf407a5c2
 8005918:	b5e8b5cd 	.word	0xb5e8b5cd
 800591c:	20028e14 	.word	0x20028e14
 8005920:	20028b48 	.word	0x20028b48
 8005924:	20028e38 	.word	0x20028e38
 8005928:	20028e40 	.word	0x20028e40

0800592c <GUI_CalcColorDist>:
 800592c:	b2cb      	uxtb	r3, r1
 800592e:	b2c2      	uxtb	r2, r0
 8005930:	1ad2      	subs	r2, r2, r3
 8005932:	b292      	uxth	r2, r2
 8005934:	b293      	uxth	r3, r2
 8005936:	b530      	push	{r4, r5, lr}
 8005938:	041c      	lsls	r4, r3, #16
 800593a:	bf48      	it	mi
 800593c:	4253      	negmi	r3, r2
 800593e:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8005942:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8005946:	ebc5 0202 	rsb	r2, r5, r2
 800594a:	bf48      	it	mi
 800594c:	b29b      	uxthmi	r3, r3
 800594e:	b292      	uxth	r2, r2
 8005950:	0c09      	lsrs	r1, r1, #16
 8005952:	fb13 f403 	smulbb	r4, r3, r3
 8005956:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800595a:	b293      	uxth	r3, r2
 800595c:	041d      	lsls	r5, r3, #16
 800595e:	b289      	uxth	r1, r1
 8005960:	b288      	uxth	r0, r1
 8005962:	bf44      	itt	mi
 8005964:	4253      	negmi	r3, r2
 8005966:	b29b      	uxthmi	r3, r3
 8005968:	0402      	lsls	r2, r0, #16
 800596a:	bf48      	it	mi
 800596c:	4248      	negmi	r0, r1
 800596e:	fb13 4303 	smlabb	r3, r3, r3, r4
 8005972:	bf48      	it	mi
 8005974:	b280      	uxthmi	r0, r0
 8005976:	fb00 3000 	mla	r0, r0, r0, r3
 800597a:	bd30      	pop	{r4, r5, pc}

0800597c <GUI_GetBkColor>:
 800597c:	b508      	push	{r3, lr}
 800597e:	f002 ffbd 	bl	80088fc <LCD_GetBkColorIndex>
 8005982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005986:	f7ff ba43 	b.w	8004e10 <LCD_Index2Color>

0800598a <GUI_GetColor>:
 800598a:	b508      	push	{r3, lr}
 800598c:	f002 ffbe 	bl	800890c <LCD_GetColorIndex>
 8005990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005994:	f7ff ba3c 	b.w	8004e10 <LCD_Index2Color>

08005998 <GUI_GetDrawMode>:
 8005998:	4b01      	ldr	r3, [pc, #4]	; (80059a0 <GUI_GetDrawMode+0x8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	7c18      	ldrb	r0, [r3, #16]
 800599e:	4770      	bx	lr
 80059a0:	20000028 	.word	0x20000028

080059a4 <GUI_MergeRect>:
 80059a4:	b510      	push	{r4, lr}
 80059a6:	b338      	cbz	r0, 80059f8 <GUI_MergeRect+0x54>
 80059a8:	b309      	cbz	r1, 80059ee <GUI_MergeRect+0x4a>
 80059aa:	b30a      	cbz	r2, 80059f0 <GUI_MergeRect+0x4c>
 80059ac:	f9b1 4000 	ldrsh.w	r4, [r1]
 80059b0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80059b4:	429c      	cmp	r4, r3
 80059b6:	bfb8      	it	lt
 80059b8:	4623      	movlt	r3, r4
 80059ba:	8003      	strh	r3, [r0, #0]
 80059bc:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80059c0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80059c4:	429c      	cmp	r4, r3
 80059c6:	bfb8      	it	lt
 80059c8:	4623      	movlt	r3, r4
 80059ca:	8043      	strh	r3, [r0, #2]
 80059cc:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80059d0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80059d4:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 80059d8:	429c      	cmp	r4, r3
 80059da:	bfa8      	it	ge
 80059dc:	4623      	movge	r3, r4
 80059de:	8083      	strh	r3, [r0, #4]
 80059e0:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 80059e4:	4299      	cmp	r1, r3
 80059e6:	bfa8      	it	ge
 80059e8:	460b      	movge	r3, r1
 80059ea:	80c3      	strh	r3, [r0, #6]
 80059ec:	bd10      	pop	{r4, pc}
 80059ee:	4611      	mov	r1, r2
 80059f0:	680b      	ldr	r3, [r1, #0]
 80059f2:	6003      	str	r3, [r0, #0]
 80059f4:	684b      	ldr	r3, [r1, #4]
 80059f6:	6043      	str	r3, [r0, #4]
 80059f8:	bd10      	pop	{r4, pc}

080059fa <GUI_MoveRect>:
 80059fa:	b168      	cbz	r0, 8005a18 <GUI_MoveRect+0x1e>
 80059fc:	8803      	ldrh	r3, [r0, #0]
 80059fe:	b289      	uxth	r1, r1
 8005a00:	440b      	add	r3, r1
 8005a02:	8003      	strh	r3, [r0, #0]
 8005a04:	8883      	ldrh	r3, [r0, #4]
 8005a06:	4419      	add	r1, r3
 8005a08:	8843      	ldrh	r3, [r0, #2]
 8005a0a:	8081      	strh	r1, [r0, #4]
 8005a0c:	b292      	uxth	r2, r2
 8005a0e:	4413      	add	r3, r2
 8005a10:	8043      	strh	r3, [r0, #2]
 8005a12:	88c3      	ldrh	r3, [r0, #6]
 8005a14:	441a      	add	r2, r3
 8005a16:	80c2      	strh	r2, [r0, #6]
 8005a18:	4770      	bx	lr
	...

08005a1c <GUI_GotoXY>:
 8005a1c:	4b02      	ldr	r3, [pc, #8]	; (8005a28 <GUI_GotoXY+0xc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	8458      	strh	r0, [r3, #34]	; 0x22
 8005a22:	8499      	strh	r1, [r3, #36]	; 0x24
 8005a24:	2000      	movs	r0, #0
 8005a26:	4770      	bx	lr
 8005a28:	20000028 	.word	0x20000028

08005a2c <GUI_RectsIntersect>:
 8005a2c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005a30:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	dc14      	bgt.n	8005a62 <GUI_RectsIntersect+0x36>
 8005a38:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8005a3c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	dc0e      	bgt.n	8005a62 <GUI_RectsIntersect+0x36>
 8005a44:	f9b0 2000 	ldrsh.w	r2, [r0]
 8005a48:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	dc08      	bgt.n	8005a62 <GUI_RectsIntersect+0x36>
 8005a50:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8005a54:	f9b1 2000 	ldrsh.w	r2, [r1]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	bfcc      	ite	gt
 8005a5c:	2000      	movgt	r0, #0
 8005a5e:	2001      	movle	r0, #1
 8005a60:	4770      	bx	lr
 8005a62:	2000      	movs	r0, #0
 8005a64:	4770      	bx	lr

08005a66 <GUI_SelectLCD>:
 8005a66:	b508      	push	{r3, lr}
 8005a68:	f002 fdf4 	bl	8008654 <LCD_SelectLCD>
 8005a6c:	f002 fdc8 	bl	8008600 <LCD_UpdateColorIndices>
 8005a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005a74:	f001 bfa6 	b.w	80079c4 <WM_Activate>

08005a78 <GUI_SetBkColor>:
 8005a78:	f7ff ba12 	b.w	8004ea0 <LCD_SetBkColor>

08005a7c <GUI_SetColor>:
 8005a7c:	f7ff ba18 	b.w	8004eb0 <LCD_SetColor>

08005a80 <GUI_SetFont>:
 8005a80:	4b03      	ldr	r3, [pc, #12]	; (8005a90 <GUI_SetFont+0x10>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69d9      	ldr	r1, [r3, #28]
 8005a86:	b100      	cbz	r0, 8005a8a <GUI_SetFont+0xa>
 8005a88:	61d8      	str	r0, [r3, #28]
 8005a8a:	4608      	mov	r0, r1
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	20000028 	.word	0x20000028

08005a94 <GUI_SetOrg>:
 8005a94:	460a      	mov	r2, r1
 8005a96:	4908      	ldr	r1, [pc, #32]	; (8005ab8 <GUI_SetOrg+0x24>)
 8005a98:	b510      	push	{r4, lr}
 8005a9a:	8008      	strh	r0, [r1, #0]
 8005a9c:	4907      	ldr	r1, [pc, #28]	; (8005abc <GUI_SetOrg+0x28>)
 8005a9e:	800a      	strh	r2, [r1, #0]
 8005aa0:	4907      	ldr	r1, [pc, #28]	; (8005ac0 <GUI_SetOrg+0x2c>)
 8005aa2:	6809      	ldr	r1, [r1, #0]
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	7c48      	ldrb	r0, [r1, #17]
 8005aa8:	4906      	ldr	r1, [pc, #24]	; (8005ac4 <GUI_SetOrg+0x30>)
 8005aaa:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8005aae:	68c1      	ldr	r1, [r0, #12]
 8005ab0:	6a0c      	ldr	r4, [r1, #32]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	47a0      	blx	r4
 8005ab6:	bd10      	pop	{r4, pc}
 8005ab8:	20028e34 	.word	0x20028e34
 8005abc:	20028e24 	.word	0x20028e24
 8005ac0:	20000028 	.word	0x20000028
 8005ac4:	20028e60 	.word	0x20028e60

08005ac8 <GUIPROP__FindChar>:
 8005ac8:	b138      	cbz	r0, 8005ada <GUIPROP__FindChar+0x12>
 8005aca:	8803      	ldrh	r3, [r0, #0]
 8005acc:	428b      	cmp	r3, r1
 8005ace:	d802      	bhi.n	8005ad6 <GUIPROP__FindChar+0xe>
 8005ad0:	8843      	ldrh	r3, [r0, #2]
 8005ad2:	428b      	cmp	r3, r1
 8005ad4:	d201      	bcs.n	8005ada <GUIPROP__FindChar+0x12>
 8005ad6:	6880      	ldr	r0, [r0, #8]
 8005ad8:	e7f6      	b.n	8005ac8 <GUIPROP__FindChar>
 8005ada:	4770      	bx	lr

08005adc <GUIPROP_DispChar>:
 8005adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae0:	4c38      	ldr	r4, [pc, #224]	; (8005bc4 <GUIPROP_DispChar+0xe8>)
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	4605      	mov	r5, r0
 8005aec:	b089      	sub	sp, #36	; 0x24
 8005aee:	69d8      	ldr	r0, [r3, #28]
 8005af0:	4629      	mov	r1, r5
 8005af2:	f7ff ffe9 	bl	8005ac8 <GUIPROP__FindChar>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d061      	beq.n	8005bbe <GUIPROP_DispChar+0xe2>
 8005afa:	f8b0 8000 	ldrh.w	r8, [r0]
 8005afe:	6847      	ldr	r7, [r0, #4]
 8005b00:	ebc8 0805 	rsb	r8, r8, r5
 8005b04:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 8005b08:	4648      	mov	r0, r9
 8005b0a:	f896 b002 	ldrb.w	fp, [r6, #2]
 8005b0e:	f7fe ff77 	bl	8004a00 <LCD_SetDrawMode>
 8005b12:	6825      	ldr	r5, [r4, #0]
 8005b14:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 8005b18:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 8005b1c:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 8005b20:	f89e c01a 	ldrb.w	ip, [lr, #26]
 8005b24:	f89e 3018 	ldrb.w	r3, [lr, #24]
 8005b28:	9306      	str	r3, [sp, #24]
 8005b2a:	4682      	mov	sl, r0
 8005b2c:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 8005b30:	f8cd c000 	str.w	ip, [sp]
 8005b34:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8005b38:	f8cd e004 	str.w	lr, [sp, #4]
 8005b3c:	f04f 0e01 	mov.w	lr, #1
 8005b40:	f8cd b00c 	str.w	fp, [sp, #12]
 8005b44:	f8cd e008 	str.w	lr, [sp, #8]
 8005b48:	6873      	ldr	r3, [r6, #4]
 8005b4a:	9304      	str	r3, [sp, #16]
 8005b4c:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8005b4e:	9b06      	ldr	r3, [sp, #24]
 8005b50:	9505      	str	r5, [sp, #20]
 8005b52:	f7fe ffdd 	bl	8004b10 <LCD_DrawBitmap>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	69da      	ldr	r2, [r3, #28]
 8005b5a:	f892 b019 	ldrb.w	fp, [r2, #25]
 8005b5e:	7e11      	ldrb	r1, [r2, #24]
 8005b60:	458b      	cmp	fp, r1
 8005b62:	d920      	bls.n	8005ba6 <GUIPROP_DispChar+0xca>
 8005b64:	f1b9 0f02 	cmp.w	r9, #2
 8005b68:	7ed5      	ldrb	r5, [r2, #27]
 8005b6a:	d01c      	beq.n	8005ba6 <GUIPROP_DispChar+0xca>
 8005b6c:	9107      	str	r1, [sp, #28]
 8005b6e:	f7ff ff0c 	bl	800598a <GUI_GetColor>
 8005b72:	4681      	mov	r9, r0
 8005b74:	f7ff ff02 	bl	800597c <GUI_GetBkColor>
 8005b78:	f7ff ff80 	bl	8005a7c <GUI_SetColor>
 8005b7c:	6824      	ldr	r4, [r4, #0]
 8005b7e:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 8005b82:	69e2      	ldr	r2, [r4, #28]
 8005b84:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8005b88:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8005b8c:	7ed2      	ldrb	r2, [r2, #27]
 8005b8e:	9907      	ldr	r1, [sp, #28]
 8005b90:	fb07 0202 	mla	r2, r7, r2, r0
 8005b94:	fb01 3105 	mla	r1, r1, r5, r3
 8005b98:	fb0b 3305 	mla	r3, fp, r5, r3
 8005b9c:	f7fe ff8c 	bl	8004ab8 <LCD_FillRect>
 8005ba0:	4648      	mov	r0, r9
 8005ba2:	f7ff ff6b 	bl	8005a7c <GUI_SetColor>
 8005ba6:	4650      	mov	r0, sl
 8005ba8:	f7fe ff2a 	bl	8004a00 <LCD_SetDrawMode>
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <GUIPROP_DispChar+0xe8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69da      	ldr	r2, [r3, #28]
 8005bb2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8005bb4:	7e90      	ldrb	r0, [r2, #26]
 8005bb6:	7872      	ldrb	r2, [r6, #1]
 8005bb8:	fb00 1202 	mla	r2, r0, r2, r1
 8005bbc:	845a      	strh	r2, [r3, #34]	; 0x22
 8005bbe:	b009      	add	sp, #36	; 0x24
 8005bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc4:	20000028 	.word	0x20000028

08005bc8 <GUIPROP_GetCharDistX>:
 8005bc8:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <GUIPROP_GetCharDistX+0x38>)
 8005bca:	b570      	push	{r4, r5, r6, lr}
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69dd      	ldr	r5, [r3, #28]
 8005bd0:	4606      	mov	r6, r0
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	69e8      	ldr	r0, [r5, #28]
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	f7ff ff76 	bl	8005ac8 <GUIPROP__FindChar>
 8005bdc:	b170      	cbz	r0, 8005bfc <GUIPROP_GetCharDistX+0x34>
 8005bde:	8803      	ldrh	r3, [r0, #0]
 8005be0:	6842      	ldr	r2, [r0, #4]
 8005be2:	1af6      	subs	r6, r6, r3
 8005be4:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 8005be8:	7858      	ldrb	r0, [r3, #1]
 8005bea:	7eab      	ldrb	r3, [r5, #26]
 8005bec:	fb10 f003 	smulbb	r0, r0, r3
 8005bf0:	b124      	cbz	r4, 8005bfc <GUIPROP_GetCharDistX+0x34>
 8005bf2:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 8005bf6:	fb12 f303 	smulbb	r3, r2, r3
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000028 	.word	0x20000028

08005c04 <GUIPROP_GetFontInfo>:
 8005c04:	2301      	movs	r3, #1
 8005c06:	800b      	strh	r3, [r1, #0]
 8005c08:	4770      	bx	lr

08005c0a <GUIPROP_IsInFont>:
 8005c0a:	b508      	push	{r3, lr}
 8005c0c:	69c0      	ldr	r0, [r0, #28]
 8005c0e:	f7ff ff5b 	bl	8005ac8 <GUIPROP__FindChar>
 8005c12:	3000      	adds	r0, #0
 8005c14:	bf18      	it	ne
 8005c16:	2001      	movne	r0, #1
 8005c18:	bd08      	pop	{r3, pc}
	...

08005c1c <GUIMONO_DispChar>:
 8005c1c:	4b52      	ldr	r3, [pc, #328]	; (8005d68 <GUIMONO_DispChar+0x14c>)
 8005c1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69d9      	ldr	r1, [r3, #28]
 8005c26:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 8005c28:	69cc      	ldr	r4, [r1, #28]
 8005c2a:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 8005c2c:	89a2      	ldrh	r2, [r4, #12]
 8005c2e:	4290      	cmp	r0, r2
 8005c30:	b08b      	sub	sp, #44	; 0x2c
 8005c32:	d308      	bcc.n	8005c46 <GUIMONO_DispChar+0x2a>
 8005c34:	89e6      	ldrh	r6, [r4, #14]
 8005c36:	4286      	cmp	r6, r0
 8005c38:	d305      	bcc.n	8005c46 <GUIMONO_DispChar+0x2a>
 8005c3a:	f8d4 9000 	ldr.w	r9, [r4]
 8005c3e:	1a82      	subs	r2, r0, r2
 8005c40:	f04f 3bff 	mov.w	fp, #4294967295
 8005c44:	e015      	b.n	8005c72 <GUIMONO_DispChar+0x56>
 8005c46:	68a2      	ldr	r2, [r4, #8]
 8005c48:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	f000 8081 	beq.w	8005d54 <GUIMONO_DispChar+0x138>
 8005c52:	8816      	ldrh	r6, [r2, #0]
 8005c54:	42b0      	cmp	r0, r6
 8005c56:	d37d      	bcc.n	8005d54 <GUIMONO_DispChar+0x138>
 8005c58:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8005c5c:	4584      	cmp	ip, r0
 8005c5e:	d379      	bcc.n	8005d54 <GUIMONO_DispChar+0x138>
 8005c60:	6852      	ldr	r2, [r2, #4]
 8005c62:	1b80      	subs	r0, r0, r6
 8005c64:	b280      	uxth	r0, r0
 8005c66:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8005c6a:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 8005c6e:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 8005c72:	1c50      	adds	r0, r2, #1
 8005c74:	d06e      	beq.n	8005d54 <GUIMONO_DispChar+0x138>
 8005c76:	f891 8018 	ldrb.w	r8, [r1, #24]
 8005c7a:	7ca1      	ldrb	r1, [r4, #18]
 8005c7c:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 8005c80:	7c26      	ldrb	r6, [r4, #16]
 8005c82:	9206      	str	r2, [sp, #24]
 8005c84:	fb18 f101 	smulbb	r1, r8, r1
 8005c88:	9107      	str	r1, [sp, #28]
 8005c8a:	fa0f f18a 	sxth.w	r1, sl
 8005c8e:	4608      	mov	r0, r1
 8005c90:	9108      	str	r1, [sp, #32]
 8005c92:	f7fe feb5 	bl	8004a00 <LCD_SetDrawMode>
 8005c96:	4934      	ldr	r1, [pc, #208]	; (8005d68 <GUIMONO_DispChar+0x14c>)
 8005c98:	9009      	str	r0, [sp, #36]	; 0x24
 8005c9a:	680b      	ldr	r3, [r1, #0]
 8005c9c:	9a06      	ldr	r2, [sp, #24]
 8005c9e:	69d9      	ldr	r1, [r3, #28]
 8005ca0:	7e88      	ldrb	r0, [r1, #26]
 8005ca2:	9000      	str	r0, [sp, #0]
 8005ca4:	7ec9      	ldrb	r1, [r1, #27]
 8005ca6:	9101      	str	r1, [sp, #4]
 8005ca8:	2101      	movs	r1, #1
 8005caa:	9102      	str	r1, [sp, #8]
 8005cac:	7ca1      	ldrb	r1, [r4, #18]
 8005cae:	9103      	str	r1, [sp, #12]
 8005cb0:	9907      	ldr	r1, [sp, #28]
 8005cb2:	fb01 9202 	mla	r2, r1, r2, r9
 8005cb6:	9204      	str	r2, [sp, #16]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	9305      	str	r3, [sp, #20]
 8005cbc:	b23f      	sxth	r7, r7
 8005cbe:	b22d      	sxth	r5, r5
 8005cc0:	4638      	mov	r0, r7
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	4643      	mov	r3, r8
 8005cc8:	f7fe ff22 	bl	8004b10 <LCD_DrawBitmap>
 8005ccc:	f1bb 3fff 	cmp.w	fp, #4294967295
 8005cd0:	d01b      	beq.n	8005d0a <GUIMONO_DispChar+0xee>
 8005cd2:	f04a 0002 	orr.w	r0, sl, #2
 8005cd6:	b200      	sxth	r0, r0
 8005cd8:	f7fe fe92 	bl	8004a00 <LCD_SetDrawMode>
 8005cdc:	4a22      	ldr	r2, [pc, #136]	; (8005d68 <GUIMONO_DispChar+0x14c>)
 8005cde:	6813      	ldr	r3, [r2, #0]
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	7e91      	ldrb	r1, [r2, #26]
 8005ce4:	9100      	str	r1, [sp, #0]
 8005ce6:	7ed2      	ldrb	r2, [r2, #27]
 8005ce8:	9201      	str	r2, [sp, #4]
 8005cea:	2101      	movs	r1, #1
 8005cec:	9102      	str	r1, [sp, #8]
 8005cee:	9907      	ldr	r1, [sp, #28]
 8005cf0:	7ca2      	ldrb	r2, [r4, #18]
 8005cf2:	9203      	str	r2, [sp, #12]
 8005cf4:	fb01 920b 	mla	r2, r1, fp, r9
 8005cf8:	9204      	str	r2, [sp, #16]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	9305      	str	r3, [sp, #20]
 8005cfe:	4638      	mov	r0, r7
 8005d00:	4629      	mov	r1, r5
 8005d02:	4632      	mov	r2, r6
 8005d04:	4643      	mov	r3, r8
 8005d06:	f7fe ff03 	bl	8004b10 <LCD_DrawBitmap>
 8005d0a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8005d68 <GUIMONO_DispChar+0x14c>
 8005d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	7e5a      	ldrb	r2, [r3, #25]
 8005d16:	7e1b      	ldrb	r3, [r3, #24]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d917      	bls.n	8005d4c <GUIMONO_DispChar+0x130>
 8005d1c:	9a08      	ldr	r2, [sp, #32]
 8005d1e:	2a02      	cmp	r2, #2
 8005d20:	d014      	beq.n	8005d4c <GUIMONO_DispChar+0x130>
 8005d22:	f08a 0004 	eor.w	r0, sl, #4
 8005d26:	b200      	sxth	r0, r0
 8005d28:	f7fe fe6a 	bl	8004a00 <LCD_SetDrawMode>
 8005d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f893 e018 	ldrb.w	lr, [r3, #24]
 8005d36:	7ed9      	ldrb	r1, [r3, #27]
 8005d38:	7e9a      	ldrb	r2, [r3, #26]
 8005d3a:	7e5b      	ldrb	r3, [r3, #25]
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	fb0e 5101 	mla	r1, lr, r1, r5
 8005d42:	fb06 7202 	mla	r2, r6, r2, r7
 8005d46:	442b      	add	r3, r5
 8005d48:	f7fe feb6 	bl	8004ab8 <LCD_FillRect>
 8005d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4e:	b2d8      	uxtb	r0, r3
 8005d50:	f7fe fe56 	bl	8004a00 <LCD_SetDrawMode>
 8005d54:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <GUIMONO_DispChar+0x14c>)
 8005d56:	7c61      	ldrb	r1, [r4, #17]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8005d5c:	440a      	add	r2, r1
 8005d5e:	845a      	strh	r2, [r3, #34]	; 0x22
 8005d60:	b00b      	add	sp, #44	; 0x2c
 8005d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d66:	bf00      	nop
 8005d68:	20000028 	.word	0x20000028

08005d6c <GUIMONO_GetCharDistX>:
 8005d6c:	4b04      	ldr	r3, [pc, #16]	; (8005d80 <GUIMONO_GetCharDistX+0x14>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	b109      	cbz	r1, 8005d7a <GUIMONO_GetCharDistX+0xe>
 8005d76:	7c1a      	ldrb	r2, [r3, #16]
 8005d78:	600a      	str	r2, [r1, #0]
 8005d7a:	7c58      	ldrb	r0, [r3, #17]
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	20000028 	.word	0x20000028

08005d84 <GUIMONO_GetFontInfo>:
 8005d84:	2302      	movs	r3, #2
 8005d86:	800b      	strh	r3, [r1, #0]
 8005d88:	4770      	bx	lr

08005d8a <GUIMONO_IsInFont>:
 8005d8a:	69c3      	ldr	r3, [r0, #28]
 8005d8c:	899a      	ldrh	r2, [r3, #12]
 8005d8e:	428a      	cmp	r2, r1
 8005d90:	d802      	bhi.n	8005d98 <GUIMONO_IsInFont+0xe>
 8005d92:	89da      	ldrh	r2, [r3, #14]
 8005d94:	428a      	cmp	r2, r1
 8005d96:	d20f      	bcs.n	8005db8 <GUIMONO_IsInFont+0x2e>
 8005d98:	6898      	ldr	r0, [r3, #8]
 8005d9a:	b180      	cbz	r0, 8005dbe <GUIMONO_IsInFont+0x34>
 8005d9c:	8803      	ldrh	r3, [r0, #0]
 8005d9e:	4299      	cmp	r1, r3
 8005da0:	d30c      	bcc.n	8005dbc <GUIMONO_IsInFont+0x32>
 8005da2:	8842      	ldrh	r2, [r0, #2]
 8005da4:	428a      	cmp	r2, r1
 8005da6:	d309      	bcc.n	8005dbc <GUIMONO_IsInFont+0x32>
 8005da8:	1ac9      	subs	r1, r1, r3
 8005daa:	6842      	ldr	r2, [r0, #4]
 8005dac:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 8005db0:	43c0      	mvns	r0, r0
 8005db2:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8005db6:	4770      	bx	lr
 8005db8:	2001      	movs	r0, #1
 8005dba:	4770      	bx	lr
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	4770      	bx	lr

08005dc0 <_Log2VisBuffered>:
 8005dc0:	4770      	bx	lr
	...

08005dc4 <_DispLine>:
 8005dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dc6:	4615      	mov	r5, r2
 8005dc8:	ab02      	add	r3, sp, #8
 8005dca:	4a21      	ldr	r2, [pc, #132]	; (8005e50 <_DispLine+0x8c>)
 8005dcc:	f843 1d08 	str.w	r1, [r3, #-8]!
 8005dd0:	9001      	str	r0, [sp, #4]
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	4c1f      	ldr	r4, [pc, #124]	; (8005e54 <_DispLine+0x90>)
 8005dd6:	4669      	mov	r1, sp
 8005dd8:	4790      	blx	r2
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	9001      	str	r0, [sp, #4]
 8005dde:	6958      	ldr	r0, [r3, #20]
 8005de0:	b938      	cbnz	r0, 8005df2 <_DispLine+0x2e>
 8005de2:	2001      	movs	r0, #1
 8005de4:	f002 fe0e 	bl	8008a04 <GUI__ManageCache>
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	69d3      	ldr	r3, [r2, #28]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	b933      	cbnz	r3, 8005dfe <_DispLine+0x3a>
 8005df0:	e023      	b.n	8005e3a <_DispLine+0x76>
 8005df2:	4629      	mov	r1, r5
 8005df4:	f7ff fe1a 	bl	8005a2c <GUI_RectsIntersect>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d1f2      	bne.n	8005de2 <_DispLine+0x1e>
 8005dfc:	e025      	b.n	8005e4a <_DispLine+0x86>
 8005dfe:	4c16      	ldr	r4, [pc, #88]	; (8005e58 <_DispLine+0x94>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	6821      	ldr	r1, [r4, #0]
 8005e04:	b141      	cbz	r1, 8005e18 <_DispLine+0x54>
 8005e06:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 8005e0a:	9801      	ldr	r0, [sp, #4]
 8005e0c:	9900      	ldr	r1, [sp, #0]
 8005e0e:	4798      	blx	r3
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	4628      	mov	r0, r5
 8005e14:	4798      	blx	r3
 8005e16:	e015      	b.n	8005e44 <_DispLine+0x80>
 8005e18:	9801      	ldr	r0, [sp, #4]
 8005e1a:	9900      	ldr	r1, [sp, #0]
 8005e1c:	4798      	blx	r3
 8005e1e:	e011      	b.n	8005e44 <_DispLine+0x80>
 8005e20:	a801      	add	r0, sp, #4
 8005e22:	f7ff facd 	bl	80053c0 <GUI_UC__GetCharCodeInc>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	4798      	blx	r3
 8005e30:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <_DispLine+0x98>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	b10b      	cbz	r3, 8005e3a <_DispLine+0x76>
 8005e36:	4628      	mov	r0, r5
 8005e38:	4798      	blx	r3
 8005e3a:	9b00      	ldr	r3, [sp, #0]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	daed      	bge.n	8005e20 <_DispLine+0x5c>
 8005e44:	2000      	movs	r0, #0
 8005e46:	f002 fddd 	bl	8008a04 <GUI__ManageCache>
 8005e4a:	b003      	add	sp, #12
 8005e4c:	bd30      	pop	{r4, r5, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000038 	.word	0x20000038
 8005e54:	20000028 	.word	0x20000028
 8005e58:	20028e2c 	.word	0x20028e2c
 8005e5c:	20028e3c 	.word	0x20028e3c

08005e60 <GUI__GetLineNumChars>:
 8005e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e62:	460d      	mov	r5, r1
 8005e64:	9001      	str	r0, [sp, #4]
 8005e66:	4604      	mov	r4, r0
 8005e68:	b198      	cbz	r0, 8005e92 <GUI__GetLineNumChars+0x32>
 8005e6a:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <GUI__GetLineNumChars+0x38>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	b10b      	cbz	r3, 8005e78 <GUI__GetLineNumChars+0x18>
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	b90b      	cbnz	r3, 8005e7c <GUI__GetLineNumChars+0x1c>
 8005e78:	2400      	movs	r4, #0
 8005e7a:	e008      	b.n	8005e8e <GUI__GetLineNumChars+0x2e>
 8005e7c:	4798      	blx	r3
 8005e7e:	e009      	b.n	8005e94 <GUI__GetLineNumChars+0x34>
 8005e80:	a801      	add	r0, sp, #4
 8005e82:	f7ff fa9d 	bl	80053c0 <GUI_UC__GetCharCodeInc>
 8005e86:	b120      	cbz	r0, 8005e92 <GUI__GetLineNumChars+0x32>
 8005e88:	280a      	cmp	r0, #10
 8005e8a:	d002      	beq.n	8005e92 <GUI__GetLineNumChars+0x32>
 8005e8c:	3401      	adds	r4, #1
 8005e8e:	42ac      	cmp	r4, r5
 8005e90:	dbf6      	blt.n	8005e80 <GUI__GetLineNumChars+0x20>
 8005e92:	4620      	mov	r0, r4
 8005e94:	b003      	add	sp, #12
 8005e96:	bd30      	pop	{r4, r5, pc}
 8005e98:	20000028 	.word	0x20000028

08005e9c <GUI__GetOverlap>:
 8005e9c:	b513      	push	{r0, r1, r4, lr}
 8005e9e:	a902      	add	r1, sp, #8
 8005ea0:	2400      	movs	r4, #0
 8005ea2:	f841 4d04 	str.w	r4, [r1, #-4]!
 8005ea6:	f000 f8b7 	bl	8006018 <GUI_GetCharDistXEx>
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	4283      	cmp	r3, r0
 8005eae:	bfcc      	ite	gt
 8005eb0:	ebc0 0003 	rsbgt	r0, r0, r3
 8005eb4:	4620      	movle	r0, r4
 8005eb6:	b002      	add	sp, #8
 8005eb8:	bd10      	pop	{r4, pc}
	...

08005ebc <GUI__GetLineDistX>:
 8005ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ebe:	4a15      	ldr	r2, [pc, #84]	; (8005f14 <GUI__GetLineDistX+0x58>)
 8005ec0:	9001      	str	r0, [sp, #4]
 8005ec2:	ab02      	add	r3, sp, #8
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	f843 1d08 	str.w	r1, [r3, #-8]!
 8005eca:	4669      	mov	r1, sp
 8005ecc:	4790      	blx	r2
 8005ece:	9001      	str	r0, [sp, #4]
 8005ed0:	b1f0      	cbz	r0, 8005f10 <GUI__GetLineDistX+0x54>
 8005ed2:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <GUI__GetLineDistX+0x5c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	b10b      	cbz	r3, 8005ee0 <GUI__GetLineDistX+0x24>
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	b913      	cbnz	r3, 8005ee6 <GUI__GetLineDistX+0x2a>
 8005ee0:	2500      	movs	r5, #0
 8005ee2:	462c      	mov	r4, r5
 8005ee4:	e002      	b.n	8005eec <GUI__GetLineDistX+0x30>
 8005ee6:	9900      	ldr	r1, [sp, #0]
 8005ee8:	4798      	blx	r3
 8005eea:	e011      	b.n	8005f10 <GUI__GetLineDistX+0x54>
 8005eec:	9b00      	ldr	r3, [sp, #0]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	db07      	blt.n	8005f06 <GUI__GetLineDistX+0x4a>
 8005ef6:	a801      	add	r0, sp, #4
 8005ef8:	f7ff fa62 	bl	80053c0 <GUI_UC__GetCharCodeInc>
 8005efc:	4605      	mov	r5, r0
 8005efe:	f000 f881 	bl	8006004 <GUI_GetCharDistX>
 8005f02:	4404      	add	r4, r0
 8005f04:	e7f2      	b.n	8005eec <GUI__GetLineDistX+0x30>
 8005f06:	4628      	mov	r0, r5
 8005f08:	f7ff ffc8 	bl	8005e9c <GUI__GetOverlap>
 8005f0c:	4420      	add	r0, r4
 8005f0e:	e7ff      	b.n	8005f10 <GUI__GetLineDistX+0x54>
 8005f10:	b003      	add	sp, #12
 8005f12:	bd30      	pop	{r4, r5, pc}
 8005f14:	20000038 	.word	0x20000038
 8005f18:	20000028 	.word	0x20000028

08005f1c <GUI__DispLine>:
 8005f1c:	4b27      	ldr	r3, [pc, #156]	; (8005fbc <GUI__DispLine+0xa0>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f22:	4605      	mov	r5, r0
 8005f24:	460c      	mov	r4, r1
 8005f26:	b163      	cbz	r3, 8005f42 <GUI__DispLine+0x26>
 8005f28:	2000      	movs	r0, #0
 8005f2a:	f001 fccd 	bl	80078c8 <WM__InitIVRSearch>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d041      	beq.n	8005fb6 <GUI__DispLine+0x9a>
 8005f32:	4628      	mov	r0, r5
 8005f34:	4621      	mov	r1, r4
 8005f36:	466a      	mov	r2, sp
 8005f38:	f7ff ff44 	bl	8005dc4 <_DispLine>
 8005f3c:	f001 fc02 	bl	8007744 <WM__GetNextIVR>
 8005f40:	e7f5      	b.n	8005f2e <GUI__DispLine+0x12>
 8005f42:	6810      	ldr	r0, [r2, #0]
 8005f44:	6851      	ldr	r1, [r2, #4]
 8005f46:	4e1e      	ldr	r6, [pc, #120]	; (8005fc0 <GUI__DispLine+0xa4>)
 8005f48:	466b      	mov	r3, sp
 8005f4a:	c303      	stmia	r3!, {r0, r1}
 8005f4c:	6833      	ldr	r3, [r6, #0]
 8005f4e:	f8bd 1000 	ldrh.w	r1, [sp]
 8005f52:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f5a:	4411      	add	r1, r2
 8005f5c:	f8ad 1000 	strh.w	r1, [sp]
 8005f60:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8005f64:	4419      	add	r1, r3
 8005f66:	f8ad 1002 	strh.w	r1, [sp, #2]
 8005f6a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005f74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005f78:	4668      	mov	r0, sp
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8005f80:	f001 fca2 	bl	80078c8 <WM__InitIVRSearch>
 8005f84:	6833      	ldr	r3, [r6, #0]
 8005f86:	b940      	cbnz	r0, 8005f9a <GUI__DispLine+0x7e>
 8005f88:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8005f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f8c:	1a8a      	subs	r2, r1, r2
 8005f8e:	845a      	strh	r2, [r3, #34]	; 0x22
 8005f90:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8005f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f94:	1a8a      	subs	r2, r1, r2
 8005f96:	849a      	strh	r2, [r3, #36]	; 0x24
 8005f98:	e00d      	b.n	8005fb6 <GUI__DispLine+0x9a>
 8005f9a:	f8bd 2000 	ldrh.w	r2, [sp]
 8005f9e:	845a      	strh	r2, [r3, #34]	; 0x22
 8005fa0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005fa4:	849a      	strh	r2, [r3, #36]	; 0x24
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	4621      	mov	r1, r4
 8005faa:	466a      	mov	r2, sp
 8005fac:	f7ff ff0a 	bl	8005dc4 <_DispLine>
 8005fb0:	f001 fbc8 	bl	8007744 <WM__GetNextIVR>
 8005fb4:	e7e6      	b.n	8005f84 <GUI__DispLine+0x68>
 8005fb6:	b002      	add	sp, #8
 8005fb8:	bd70      	pop	{r4, r5, r6, pc}
 8005fba:	bf00      	nop
 8005fbc:	20028e18 	.word	0x20028e18
 8005fc0:	20000028 	.word	0x20000028

08005fc4 <GUI_GetYAdjust>:
 8005fc4:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <GUI_GetYAdjust+0x2c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fca:	f002 020c 	and.w	r2, r2, #12
 8005fce:	2a08      	cmp	r2, #8
 8005fd0:	d007      	beq.n	8005fe2 <GUI_GetYAdjust+0x1e>
 8005fd2:	2a0c      	cmp	r2, #12
 8005fd4:	d005      	beq.n	8005fe2 <GUI_GetYAdjust+0x1e>
 8005fd6:	2a04      	cmp	r2, #4
 8005fd8:	d107      	bne.n	8005fea <GUI_GetYAdjust+0x26>
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	7e18      	ldrb	r0, [r3, #24]
 8005fde:	3801      	subs	r0, #1
 8005fe0:	4770      	bx	lr
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	7e18      	ldrb	r0, [r3, #24]
 8005fe6:	0840      	lsrs	r0, r0, #1
 8005fe8:	4770      	bx	lr
 8005fea:	2000      	movs	r0, #0
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000028 	.word	0x20000028

08005ff4 <GUI_GetFontDistY>:
 8005ff4:	4b02      	ldr	r3, [pc, #8]	; (8006000 <GUI_GetFontDistY+0xc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	7e58      	ldrb	r0, [r3, #25]
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	20000028 	.word	0x20000028

08006004 <GUI_GetCharDistX>:
 8006004:	b508      	push	{r3, lr}
 8006006:	4b03      	ldr	r3, [pc, #12]	; (8006014 <GUI_GetCharDistX+0x10>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	2100      	movs	r1, #0
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	4798      	blx	r3
 8006012:	bd08      	pop	{r3, pc}
 8006014:	20000028 	.word	0x20000028

08006018 <GUI_GetCharDistXEx>:
 8006018:	b508      	push	{r3, lr}
 800601a:	4b03      	ldr	r3, [pc, #12]	; (8006028 <GUI_GetCharDistXEx+0x10>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	4798      	blx	r3
 8006024:	bd08      	pop	{r3, pc}
 8006026:	bf00      	nop
 8006028:	20000028 	.word	0x20000028

0800602c <_PushFreeBlock>:
 800602c:	4b07      	ldr	r3, [pc, #28]	; (800604c <_PushFreeBlock+0x20>)
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006032:	3201      	adds	r2, #1
 8006034:	b510      	push	{r4, lr}
 8006036:	605a      	str	r2, [r3, #4]
 8006038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800603a:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800603e:	6061      	str	r1, [r4, #4]
 8006040:	2100      	movs	r1, #0
 8006042:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8006046:	6258      	str	r0, [r3, #36]	; 0x24
 8006048:	bd10      	pop	{r4, pc}
 800604a:	bf00      	nop
 800604c:	20028e70 	.word	0x20028e70

08006050 <_RemoveFreeBlock>:
 8006050:	b510      	push	{r4, lr}
 8006052:	6842      	ldr	r2, [r0, #4]
 8006054:	230f      	movs	r3, #15
 8006056:	490d      	ldr	r1, [pc, #52]	; (800608c <_RemoveFreeBlock+0x3c>)
 8006058:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800605c:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800605e:	42a2      	cmp	r2, r4
 8006060:	d203      	bcs.n	800606a <_RemoveFreeBlock+0x1a>
 8006062:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006066:	d2f6      	bcs.n	8006056 <_RemoveFreeBlock+0x6>
 8006068:	bd10      	pop	{r4, pc}
 800606a:	2b0f      	cmp	r3, #15
 800606c:	d80c      	bhi.n	8006088 <_RemoveFreeBlock+0x38>
 800606e:	680c      	ldr	r4, [r1, #0]
 8006070:	1aa2      	subs	r2, r4, r2
 8006072:	600a      	str	r2, [r1, #0]
 8006074:	6882      	ldr	r2, [r0, #8]
 8006076:	68c0      	ldr	r0, [r0, #12]
 8006078:	b102      	cbz	r2, 800607c <_RemoveFreeBlock+0x2c>
 800607a:	6050      	str	r0, [r2, #4]
 800607c:	b108      	cbz	r0, 8006082 <_RemoveFreeBlock+0x32>
 800607e:	6002      	str	r2, [r0, #0]
 8006080:	bd10      	pop	{r4, pc}
 8006082:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8006086:	645a      	str	r2, [r3, #68]	; 0x44
 8006088:	bd10      	pop	{r4, pc}
 800608a:	bf00      	nop
 800608c:	20028e70 	.word	0x20028e70

08006090 <_AddFreeMemory>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	4e26      	ldr	r6, [pc, #152]	; (800612c <_AddFreeMemory+0x9c>)
 8006094:	68f3      	ldr	r3, [r6, #12]
 8006096:	1e5a      	subs	r2, r3, #1
 8006098:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800609a:	4605      	mov	r5, r0
 800609c:	4413      	add	r3, r2
 800609e:	1808      	adds	r0, r1, r0
 80060a0:	4298      	cmp	r0, r3
 80060a2:	460c      	mov	r4, r1
 80060a4:	d805      	bhi.n	80060b2 <_AddFreeMemory+0x22>
 80060a6:	594b      	ldr	r3, [r1, r5]
 80060a8:	b91b      	cbnz	r3, 80060b2 <_AddFreeMemory+0x22>
 80060aa:	6843      	ldr	r3, [r0, #4]
 80060ac:	441d      	add	r5, r3
 80060ae:	f7ff ffcf 	bl	8006050 <_RemoveFreeBlock>
 80060b2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80060b4:	429c      	cmp	r4, r3
 80060b6:	d90a      	bls.n	80060ce <_AddFreeMemory+0x3e>
 80060b8:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80060bc:	1be7      	subs	r7, r4, r7
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	b92b      	cbnz	r3, 80060ce <_AddFreeMemory+0x3e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4638      	mov	r0, r7
 80060c6:	441d      	add	r5, r3
 80060c8:	f7ff ffc2 	bl	8006050 <_RemoveFreeBlock>
 80060cc:	463c      	mov	r4, r7
 80060ce:	230f      	movs	r3, #15
 80060d0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80060d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80060d6:	4295      	cmp	r5, r2
 80060d8:	d203      	bcs.n	80060e2 <_AddFreeMemory+0x52>
 80060da:	f113 33ff 	adds.w	r3, r3, #4294967295
 80060de:	d2f7      	bcs.n	80060d0 <_AddFreeMemory+0x40>
 80060e0:	e022      	b.n	8006128 <_AddFreeMemory+0x98>
 80060e2:	2b0f      	cmp	r3, #15
 80060e4:	d820      	bhi.n	8006128 <_AddFreeMemory+0x98>
 80060e6:	3308      	adds	r3, #8
 80060e8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80060ec:	1961      	adds	r1, r4, r5
 80060ee:	6852      	ldr	r2, [r2, #4]
 80060f0:	60a2      	str	r2, [r4, #8]
 80060f2:	2000      	movs	r0, #0
 80060f4:	e884 0021 	stmia.w	r4, {r0, r5}
 80060f8:	6124      	str	r4, [r4, #16]
 80060fa:	f841 5c04 	str.w	r5, [r1, #-4]
 80060fe:	f104 0108 	add.w	r1, r4, #8
 8006102:	b102      	cbz	r2, 8006106 <_AddFreeMemory+0x76>
 8006104:	6051      	str	r1, [r2, #4]
 8006106:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800610a:	60e0      	str	r0, [r4, #12]
 800610c:	6059      	str	r1, [r3, #4]
 800610e:	6833      	ldr	r3, [r6, #0]
 8006110:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 8006114:	4a05      	ldr	r2, [pc, #20]	; (800612c <_AddFreeMemory+0x9c>)
 8006116:	442b      	add	r3, r5
 8006118:	6033      	str	r3, [r6, #0]
 800611a:	b929      	cbnz	r1, 8006128 <_AddFreeMemory+0x98>
 800611c:	68d1      	ldr	r1, [r2, #12]
 800611e:	1acb      	subs	r3, r1, r3
 8006120:	6891      	ldr	r1, [r2, #8]
 8006122:	4299      	cmp	r1, r3
 8006124:	bf38      	it	cc
 8006126:	6093      	strcc	r3, [r2, #8]
 8006128:	4628      	mov	r0, r5
 800612a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800612c:	20028e70 	.word	0x20028e70

08006130 <_RemoveHoles>:
 8006130:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <_RemoveHoles+0x98>)
 8006132:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800613a:	3a01      	subs	r2, #1
 800613c:	4682      	mov	sl, r0
 800613e:	eb02 0904 	add.w	r9, r2, r4
 8006142:	469b      	mov	fp, r3
 8006144:	e894 0028 	ldmia.w	r4, {r3, r5}
 8006148:	2b00      	cmp	r3, #0
 800614a:	d133      	bne.n	80061b4 <_RemoveHoles+0x84>
 800614c:	eb04 0805 	add.w	r8, r4, r5
 8006150:	45c8      	cmp	r8, r9
 8006152:	d22f      	bcs.n	80061b4 <_RemoveHoles+0x84>
 8006154:	f854 c005 	ldr.w	ip, [r4, r5]
 8006158:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800615c:	f1bc 0f00 	cmp.w	ip, #0
 8006160:	d028      	beq.n	80061b4 <_RemoveHoles+0x84>
 8006162:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8006166:	4f18      	ldr	r7, [pc, #96]	; (80061c8 <_RemoveHoles+0x98>)
 8006168:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d121      	bne.n	80061b4 <_RemoveHoles+0x84>
 8006170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006172:	4620      	mov	r0, r4
 8006174:	e88d 1008 	stmia.w	sp, {r3, ip}
 8006178:	f7ff ff6a 	bl	8006050 <_RemoveFreeBlock>
 800617c:	f8d8 1000 	ldr.w	r1, [r8]
 8006180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006182:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006186:	4620      	mov	r0, r4
 8006188:	6054      	str	r4, [r2, #4]
 800618a:	4641      	mov	r1, r8
 800618c:	4632      	mov	r2, r6
 800618e:	f002 ff7c 	bl	800908a <memmove>
 8006192:	e89d 1008 	ldmia.w	sp, {r3, ip}
 8006196:	459c      	cmp	ip, r3
 8006198:	d102      	bne.n	80061a0 <_RemoveHoles+0x70>
 800619a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619c:	1b5b      	subs	r3, r3, r5
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
 80061a0:	4628      	mov	r0, r5
 80061a2:	19a1      	adds	r1, r4, r6
 80061a4:	f7ff ff74 	bl	8006090 <_AddFreeMemory>
 80061a8:	f1ba 0f00 	cmp.w	sl, #0
 80061ac:	d001      	beq.n	80061b2 <_RemoveHoles+0x82>
 80061ae:	4582      	cmp	sl, r0
 80061b0:	d905      	bls.n	80061be <_RemoveHoles+0x8e>
 80061b2:	4635      	mov	r5, r6
 80061b4:	442c      	add	r4, r5
 80061b6:	454c      	cmp	r4, r9
 80061b8:	d3c4      	bcc.n	8006144 <_RemoveHoles+0x14>
 80061ba:	2001      	movs	r0, #1
 80061bc:	e000      	b.n	80061c0 <_RemoveHoles+0x90>
 80061be:	2000      	movs	r0, #0
 80061c0:	b003      	add	sp, #12
 80061c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c6:	bf00      	nop
 80061c8:	20028e70 	.word	0x20028e70

080061cc <GUI_ALLOC_FreeFixedBlock>:
 80061cc:	b128      	cbz	r0, 80061da <GUI_ALLOC_FreeFixedBlock+0xe>
 80061ce:	4a03      	ldr	r2, [pc, #12]	; (80061dc <GUI_ALLOC_FreeFixedBlock+0x10>)
 80061d0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80061d2:	6003      	str	r3, [r0, #0]
 80061d4:	b103      	cbz	r3, 80061d8 <GUI_ALLOC_FreeFixedBlock+0xc>
 80061d6:	6058      	str	r0, [r3, #4]
 80061d8:	63d0      	str	r0, [r2, #60]	; 0x3c
 80061da:	4770      	bx	lr
 80061dc:	20028e70 	.word	0x20028e70

080061e0 <GUI_ALLOC_h2p>:
 80061e0:	4b03      	ldr	r3, [pc, #12]	; (80061f0 <GUI_ALLOC_h2p+0x10>)
 80061e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80061e8:	6840      	ldr	r0, [r0, #4]
 80061ea:	3008      	adds	r0, #8
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20028e70 	.word	0x20028e70

080061f4 <GUI_ALLOC_LockH>:
 80061f4:	4b05      	ldr	r3, [pc, #20]	; (800620c <GUI_ALLOC_LockH+0x18>)
 80061f6:	69d9      	ldr	r1, [r3, #28]
 80061f8:	3101      	adds	r1, #1
 80061fa:	61d9      	str	r1, [r3, #28]
 80061fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fe:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 8006202:	3101      	adds	r1, #1
 8006204:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 8006208:	f7ff bfea 	b.w	80061e0 <GUI_ALLOC_h2p>
 800620c:	20028e70 	.word	0x20028e70

08006210 <GUI_ALLOC_UnlockH>:
 8006210:	b530      	push	{r4, r5, lr}
 8006212:	6802      	ldr	r2, [r0, #0]
 8006214:	4b09      	ldr	r3, [pc, #36]	; (800623c <GUI_ALLOC_UnlockH+0x2c>)
 8006216:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800621a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800621c:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 8006220:	2c01      	cmp	r4, #1
 8006222:	d903      	bls.n	800622c <GUI_ALLOC_UnlockH+0x1c>
 8006224:	69dd      	ldr	r5, [r3, #28]
 8006226:	b10d      	cbz	r5, 800622c <GUI_ALLOC_UnlockH+0x1c>
 8006228:	3d01      	subs	r5, #1
 800622a:	61dd      	str	r5, [r3, #28]
 800622c:	3c01      	subs	r4, #1
 800622e:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 8006232:	2300      	movs	r3, #0
 8006234:	6003      	str	r3, [r0, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	bd30      	pop	{r4, r5, pc}
 800623a:	bf00      	nop
 800623c:	20028e70 	.word	0x20028e70

08006240 <GUI_ALLOC_AssignMemory>:
 8006240:	4b02      	ldr	r3, [pc, #8]	; (800624c <GUI_ALLOC_AssignMemory+0xc>)
 8006242:	f021 0103 	bic.w	r1, r1, #3
 8006246:	6018      	str	r0, [r3, #0]
 8006248:	6059      	str	r1, [r3, #4]
 800624a:	4770      	bx	lr
 800624c:	20028bbc 	.word	0x20028bbc

08006250 <GUI_ALLOC_Free>:
 8006250:	b510      	push	{r4, lr}
 8006252:	4604      	mov	r4, r0
 8006254:	b160      	cbz	r0, 8006270 <GUI_ALLOC_Free+0x20>
 8006256:	4b07      	ldr	r3, [pc, #28]	; (8006274 <GUI_ALLOC_Free+0x24>)
 8006258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800625e:	6859      	ldr	r1, [r3, #4]
 8006260:	6848      	ldr	r0, [r1, #4]
 8006262:	f7ff ff15 	bl	8006090 <_AddFreeMemory>
 8006266:	4620      	mov	r0, r4
 8006268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800626c:	f7ff bede 	b.w	800602c <_PushFreeBlock>
 8006270:	bd10      	pop	{r4, pc}
 8006272:	bf00      	nop
 8006274:	20028e70 	.word	0x20028e70

08006278 <_EnlargeBlocks>:
 8006278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800627c:	4c23      	ldr	r4, [pc, #140]	; (800630c <_EnlargeBlocks+0x94>)
 800627e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006280:	b93b      	cbnz	r3, 8006292 <_EnlargeBlocks+0x1a>
 8006282:	4b23      	ldr	r3, [pc, #140]	; (8006310 <_EnlargeBlocks+0x98>)
 8006284:	689d      	ldr	r5, [r3, #8]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	3508      	adds	r5, #8
 800628a:	fbb3 f5f5 	udiv	r5, r3, r5
 800628e:	3502      	adds	r5, #2
 8006290:	e003      	b.n	800629a <_EnlargeBlocks+0x22>
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	1d1d      	adds	r5, r3, #4
 8006296:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800629a:	00e8      	lsls	r0, r5, #3
 800629c:	f000 f8c0 	bl	8006420 <_Alloc>
 80062a0:	4680      	mov	r8, r0
 80062a2:	b368      	cbz	r0, 8006300 <_EnlargeBlocks+0x88>
 80062a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062a6:	6922      	ldr	r2, [r4, #16]
 80062a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80062aa:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 80062ae:	00d2      	lsls	r2, r2, #3
 80062b0:	685e      	ldr	r6, [r3, #4]
 80062b2:	4b18      	ldr	r3, [pc, #96]	; (8006314 <_EnlargeBlocks+0x9c>)
 80062b4:	3608      	adds	r6, #8
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4630      	mov	r0, r6
 80062ba:	4798      	blx	r3
 80062bc:	6922      	ldr	r2, [r4, #16]
 80062be:	6366      	str	r6, [r4, #52]	; 0x34
 80062c0:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 80062c4:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 80062c8:	3104      	adds	r1, #4
 80062ca:	4613      	mov	r3, r2
 80062cc:	1e68      	subs	r0, r5, #1
 80062ce:	4283      	cmp	r3, r0
 80062d0:	f101 0108 	add.w	r1, r1, #8
 80062d4:	d203      	bcs.n	80062de <_EnlargeBlocks+0x66>
 80062d6:	3301      	adds	r3, #1
 80062d8:	f841 3c08 	str.w	r3, [r1, #-8]
 80062dc:	e7f6      	b.n	80062cc <_EnlargeBlocks+0x54>
 80062de:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80062e2:	2600      	movs	r6, #0
 80062e4:	605e      	str	r6, [r3, #4]
 80062e6:	6863      	ldr	r3, [r4, #4]
 80062e8:	6262      	str	r2, [r4, #36]	; 0x24
 80062ea:	1a9b      	subs	r3, r3, r2
 80062ec:	442b      	add	r3, r5
 80062ee:	6063      	str	r3, [r4, #4]
 80062f0:	6125      	str	r5, [r4, #16]
 80062f2:	4638      	mov	r0, r7
 80062f4:	b13f      	cbz	r7, 8006306 <_EnlargeBlocks+0x8e>
 80062f6:	f7ff ffab 	bl	8006250 <GUI_ALLOC_Free>
 80062fa:	4630      	mov	r0, r6
 80062fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006300:	2001      	movs	r0, #1
 8006302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800630a:	bf00      	nop
 800630c:	20028e70 	.word	0x20028e70
 8006310:	20028bbc 	.word	0x20028bbc
 8006314:	2000001c 	.word	0x2000001c

08006318 <_InitOnce>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4916      	ldr	r1, [pc, #88]	; (8006374 <_InitOnce+0x5c>)
 800631c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8006320:	bb3b      	cbnz	r3, 8006372 <_InitOnce+0x5a>
 8006322:	4a15      	ldr	r2, [pc, #84]	; (8006378 <_InitOnce+0x60>)
 8006324:	2301      	movs	r3, #1
 8006326:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
 800632a:	6893      	ldr	r3, [r2, #8]
 800632c:	b913      	cbnz	r3, 8006334 <_InitOnce+0x1c>
 800632e:	6853      	ldr	r3, [r2, #4]
 8006330:	089b      	lsrs	r3, r3, #2
 8006332:	6093      	str	r3, [r2, #8]
 8006334:	235a      	movs	r3, #90	; 0x5a
 8006336:	620b      	str	r3, [r1, #32]
 8006338:	2300      	movs	r3, #0
 800633a:	2510      	movs	r5, #16
 800633c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 8006340:	409d      	lsls	r5, r3
 8006342:	3301      	adds	r3, #1
 8006344:	2b10      	cmp	r3, #16
 8006346:	4c0b      	ldr	r4, [pc, #44]	; (8006374 <_InitOnce+0x5c>)
 8006348:	6405      	str	r5, [r0, #64]	; 0x40
 800634a:	d1f6      	bne.n	800633a <_InitOnce+0x22>
 800634c:	6850      	ldr	r0, [r2, #4]
 800634e:	6811      	ldr	r1, [r2, #0]
 8006350:	63a1      	str	r1, [r4, #56]	; 0x38
 8006352:	2302      	movs	r3, #2
 8006354:	6123      	str	r3, [r4, #16]
 8006356:	f1a0 0314 	sub.w	r3, r0, #20
 800635a:	440b      	add	r3, r1
 800635c:	2501      	movs	r5, #1
 800635e:	6363      	str	r3, [r4, #52]	; 0x34
 8006360:	60e0      	str	r0, [r4, #12]
 8006362:	605d      	str	r5, [r3, #4]
 8006364:	6265      	str	r5, [r4, #36]	; 0x24
 8006366:	6065      	str	r5, [r4, #4]
 8006368:	f7ff fe92 	bl	8006090 <_AddFreeMemory>
 800636c:	f7ff ff84 	bl	8006278 <_EnlargeBlocks>
 8006370:	6325      	str	r5, [r4, #48]	; 0x30
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	20028e70 	.word	0x20028e70
 8006378:	20028bbc 	.word	0x20028bbc

0800637c <GUI_ALLOC_GetFixedBlock>:
 800637c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006380:	4605      	mov	r5, r0
 8006382:	4e26      	ldr	r6, [pc, #152]	; (800641c <GUI_ALLOC_GetFixedBlock+0xa0>)
 8006384:	3503      	adds	r5, #3
 8006386:	f7ff ffc7 	bl	8006318 <_InitOnce>
 800638a:	f025 0503 	bic.w	r5, r5, #3
 800638e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8006390:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8006392:	3504      	adds	r5, #4
 8006394:	429d      	cmp	r5, r3
 8006396:	bf38      	it	cc
 8006398:	461d      	movcc	r5, r3
 800639a:	4614      	mov	r4, r2
 800639c:	b12c      	cbz	r4, 80063aa <GUI_ALLOC_GetFixedBlock+0x2e>
 800639e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80063a2:	42ab      	cmp	r3, r5
 80063a4:	d02c      	beq.n	8006400 <GUI_ALLOC_GetFixedBlock+0x84>
 80063a6:	6824      	ldr	r4, [r4, #0]
 80063a8:	e7f8      	b.n	800639c <GUI_ALLOC_GetFixedBlock+0x20>
 80063aa:	68f3      	ldr	r3, [r6, #12]
 80063ac:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80063ae:	eb02 0803 	add.w	r8, r2, r3
 80063b2:	f858 7c04 	ldr.w	r7, [r8, #-4]
 80063b6:	ebc7 0708 	rsb	r7, r7, r8
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	b133      	cbz	r3, 80063cc <GUI_ALLOC_GetFixedBlock+0x50>
 80063be:	4620      	mov	r0, r4
 80063c0:	f7ff feb6 	bl	8006130 <_RemoveHoles>
 80063c4:	f858 7c04 	ldr.w	r7, [r8, #-4]
 80063c8:	ebc7 0708 	rsb	r7, r7, r8
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	bb13      	cbnz	r3, 8006416 <GUI_ALLOC_GetFixedBlock+0x9a>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	42ab      	cmp	r3, r5
 80063d4:	db1f      	blt.n	8006416 <GUI_ALLOC_GetFixedBlock+0x9a>
 80063d6:	4638      	mov	r0, r7
 80063d8:	1d1c      	adds	r4, r3, #4
 80063da:	f7ff fe39 	bl	8006050 <_RemoveFreeBlock>
 80063de:	68f3      	ldr	r3, [r6, #12]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	1b5b      	subs	r3, r3, r5
 80063e4:	60f3      	str	r3, [r6, #12]
 80063e6:	6973      	ldr	r3, [r6, #20]
 80063e8:	1b64      	subs	r4, r4, r5
 80063ea:	442b      	add	r3, r5
 80063ec:	1b40      	subs	r0, r0, r5
 80063ee:	443c      	add	r4, r7
 80063f0:	6173      	str	r3, [r6, #20]
 80063f2:	d002      	beq.n	80063fa <GUI_ALLOC_GetFixedBlock+0x7e>
 80063f4:	4639      	mov	r1, r7
 80063f6:	f7ff fe4b 	bl	8006090 <_AddFreeMemory>
 80063fa:	f844 5c04 	str.w	r5, [r4, #-4]
 80063fe:	e00a      	b.n	8006416 <GUI_ALLOC_GetFixedBlock+0x9a>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	b10b      	cbz	r3, 8006408 <GUI_ALLOC_GetFixedBlock+0x8c>
 8006404:	6861      	ldr	r1, [r4, #4]
 8006406:	6059      	str	r1, [r3, #4]
 8006408:	6861      	ldr	r1, [r4, #4]
 800640a:	b101      	cbz	r1, 800640e <GUI_ALLOC_GetFixedBlock+0x92>
 800640c:	600b      	str	r3, [r1, #0]
 800640e:	42a2      	cmp	r2, r4
 8006410:	d101      	bne.n	8006416 <GUI_ALLOC_GetFixedBlock+0x9a>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	63f3      	str	r3, [r6, #60]	; 0x3c
 8006416:	4620      	mov	r0, r4
 8006418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800641c:	20028e70 	.word	0x20028e70

08006420 <_Alloc>:
 8006420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006424:	4d38      	ldr	r5, [pc, #224]	; (8006508 <_Alloc+0xe8>)
 8006426:	4604      	mov	r4, r0
 8006428:	f7ff ff76 	bl	8006318 <_InitOnce>
 800642c:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800642e:	682b      	ldr	r3, [r5, #0]
 8006430:	42bc      	cmp	r4, r7
 8006432:	bf24      	itt	cs
 8006434:	1ce7      	addcs	r7, r4, #3
 8006436:	f027 0703 	biccs.w	r7, r7, #3
 800643a:	370c      	adds	r7, #12
 800643c:	429f      	cmp	r7, r3
 800643e:	4c32      	ldr	r4, [pc, #200]	; (8006508 <_Alloc+0xe8>)
 8006440:	d83e      	bhi.n	80064c0 <_Alloc+0xa0>
 8006442:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006444:	6862      	ldr	r2, [r4, #4]
 8006446:	429a      	cmp	r2, r3
 8006448:	d90f      	bls.n	800646a <_Alloc+0x4a>
 800644a:	686b      	ldr	r3, [r5, #4]
 800644c:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800644e:	3b01      	subs	r3, #1
 8006450:	606b      	str	r3, [r5, #4]
 8006452:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006454:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8006458:	eb03 0209 	add.w	r2, r3, r9
 800645c:	6852      	ldr	r2, [r2, #4]
 800645e:	626a      	str	r2, [r5, #36]	; 0x24
 8006460:	2201      	movs	r2, #1
 8006462:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 8006466:	b956      	cbnz	r6, 800647e <_Alloc+0x5e>
 8006468:	e02a      	b.n	80064c0 <_Alloc+0xa0>
 800646a:	3b01      	subs	r3, #1
 800646c:	6323      	str	r3, [r4, #48]	; 0x30
 800646e:	f7ff ff03 	bl	8006278 <_EnlargeBlocks>
 8006472:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006474:	3301      	adds	r3, #1
 8006476:	6323      	str	r3, [r4, #48]	; 0x30
 8006478:	2800      	cmp	r0, #0
 800647a:	d0e6      	beq.n	800644a <_Alloc+0x2a>
 800647c:	e020      	b.n	80064c0 <_Alloc+0xa0>
 800647e:	230f      	movs	r3, #15
 8006480:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8006484:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006486:	4297      	cmp	r7, r2
 8006488:	d20c      	bcs.n	80064a4 <_Alloc+0x84>
 800648a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800648e:	d2f7      	bcs.n	8006480 <_Alloc+0x60>
 8006490:	e008      	b.n	80064a4 <_Alloc+0x84>
 8006492:	6894      	ldr	r4, [r2, #8]
 8006494:	b12c      	cbz	r4, 80064a2 <_Alloc+0x82>
 8006496:	6862      	ldr	r2, [r4, #4]
 8006498:	4297      	cmp	r7, r2
 800649a:	d914      	bls.n	80064c6 <_Alloc+0xa6>
 800649c:	68a2      	ldr	r2, [r4, #8]
 800649e:	2a00      	cmp	r2, #0
 80064a0:	d1f7      	bne.n	8006492 <_Alloc+0x72>
 80064a2:	3301      	adds	r3, #1
 80064a4:	2b0f      	cmp	r3, #15
 80064a6:	d803      	bhi.n	80064b0 <_Alloc+0x90>
 80064a8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80064ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80064ae:	e7f6      	b.n	800649e <_Alloc+0x7e>
 80064b0:	4638      	mov	r0, r7
 80064b2:	f7ff fe3d 	bl	8006130 <_RemoveHoles>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d0e1      	beq.n	800647e <_Alloc+0x5e>
 80064ba:	4630      	mov	r0, r6
 80064bc:	f7ff fdb6 	bl	800602c <_PushFreeBlock>
 80064c0:	2000      	movs	r0, #0
 80064c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064c6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80064ca:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80064cc:	ebc7 0208 	rsb	r2, r7, r8
 80064d0:	330c      	adds	r3, #12
 80064d2:	4620      	mov	r0, r4
 80064d4:	429a      	cmp	r2, r3
 80064d6:	bf38      	it	cc
 80064d8:	4647      	movcc	r7, r8
 80064da:	f7ff fdb9 	bl	8006050 <_RemoveFreeBlock>
 80064de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80064e0:	444b      	add	r3, r9
 80064e2:	19e1      	adds	r1, r4, r7
 80064e4:	605c      	str	r4, [r3, #4]
 80064e6:	45b8      	cmp	r8, r7
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	e884 00c0 	stmia.w	r4, {r6, r7}
 80064f0:	60a3      	str	r3, [r4, #8]
 80064f2:	6124      	str	r4, [r4, #16]
 80064f4:	f841 7c04 	str.w	r7, [r1, #-4]
 80064f8:	dd03      	ble.n	8006502 <_Alloc+0xe2>
 80064fa:	ebc7 0008 	rsb	r0, r7, r8
 80064fe:	f7ff fdc7 	bl	8006090 <_AddFreeMemory>
 8006502:	4630      	mov	r0, r6
 8006504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006508:	20028e70 	.word	0x20028e70

0800650c <GUI_ALLOC_AllocNoInit>:
 800650c:	b108      	cbz	r0, 8006512 <GUI_ALLOC_AllocNoInit+0x6>
 800650e:	f7ff bf87 	b.w	8006420 <_Alloc>
 8006512:	4770      	bx	lr

08006514 <GUI_ALLOC_AllocZero>:
 8006514:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006516:	4605      	mov	r5, r0
 8006518:	f7ff fff8 	bl	800650c <GUI_ALLOC_AllocNoInit>
 800651c:	4606      	mov	r6, r0
 800651e:	b160      	cbz	r0, 800653a <GUI_ALLOC_AllocZero+0x26>
 8006520:	f7ff fe68 	bl	80061f4 <GUI_ALLOC_LockH>
 8006524:	ac02      	add	r4, sp, #8
 8006526:	4b06      	ldr	r3, [pc, #24]	; (8006540 <GUI_ALLOC_AllocZero+0x2c>)
 8006528:	f844 0d04 	str.w	r0, [r4, #-4]!
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2100      	movs	r1, #0
 8006530:	462a      	mov	r2, r5
 8006532:	4798      	blx	r3
 8006534:	4620      	mov	r0, r4
 8006536:	f7ff fe6b 	bl	8006210 <GUI_ALLOC_UnlockH>
 800653a:	4630      	mov	r0, r6
 800653c:	b002      	add	sp, #8
 800653e:	bd70      	pop	{r4, r5, r6, pc}
 8006540:	20000018 	.word	0x20000018

08006544 <_Color2Index_M888>:
 8006544:	b2c2      	uxtb	r2, r0
 8006546:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800654a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800654e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8006552:	4318      	orrs	r0, r3
 8006554:	4770      	bx	lr

08006556 <_GetIndexMask_M888>:
 8006556:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800655a:	4770      	bx	lr

0800655c <_Color2IndexBulk>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	4f0c      	ldr	r7, [pc, #48]	; (8006590 <_Color2IndexBulk+0x34>)
 8006560:	683f      	ldr	r7, [r7, #0]
 8006562:	4606      	mov	r6, r0
 8006564:	460d      	mov	r5, r1
 8006566:	4614      	mov	r4, r2
 8006568:	469c      	mov	ip, r3
 800656a:	b10f      	cbz	r7, 8006570 <_Color2IndexBulk+0x14>
 800656c:	47b8      	blx	r7
 800656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006570:	f856 2b04 	ldr.w	r2, [r6], #4
 8006574:	b2d1      	uxtb	r1, r2
 8006576:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800657a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800657e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8006582:	431a      	orrs	r2, r3
 8006584:	3c01      	subs	r4, #1
 8006586:	602a      	str	r2, [r5, #0]
 8006588:	4465      	add	r5, ip
 800658a:	d1f1      	bne.n	8006570 <_Color2IndexBulk+0x14>
 800658c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800658e:	bf00      	nop
 8006590:	20028bcc 	.word	0x20028bcc

08006594 <_Index2ColorBulk>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	4f0c      	ldr	r7, [pc, #48]	; (80065c8 <_Index2ColorBulk+0x34>)
 8006598:	683f      	ldr	r7, [r7, #0]
 800659a:	4605      	mov	r5, r0
 800659c:	460e      	mov	r6, r1
 800659e:	4614      	mov	r4, r2
 80065a0:	469c      	mov	ip, r3
 80065a2:	b10f      	cbz	r7, 80065a8 <_Index2ColorBulk+0x14>
 80065a4:	47b8      	blx	r7
 80065a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065a8:	682a      	ldr	r2, [r5, #0]
 80065aa:	b2d1      	uxtb	r1, r2
 80065ac:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80065b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80065b4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80065b8:	431a      	orrs	r2, r3
 80065ba:	3c01      	subs	r4, #1
 80065bc:	f846 2b04 	str.w	r2, [r6], #4
 80065c0:	4465      	add	r5, ip
 80065c2:	d1f1      	bne.n	80065a8 <_Index2ColorBulk+0x14>
 80065c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20028bc8 	.word	0x20028bc8

080065cc <GUICC_M888_SetCustColorConv>:
 80065cc:	4b02      	ldr	r3, [pc, #8]	; (80065d8 <GUICC_M888_SetCustColorConv+0xc>)
 80065ce:	6018      	str	r0, [r3, #0]
 80065d0:	4b02      	ldr	r3, [pc, #8]	; (80065dc <GUICC_M888_SetCustColorConv+0x10>)
 80065d2:	6019      	str	r1, [r3, #0]
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	20028bcc 	.word	0x20028bcc
 80065dc:	20028bc8 	.word	0x20028bc8

080065e0 <LCD_Index2Color_M565>:
 80065e0:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 80065e4:	4b06      	ldr	r3, [pc, #24]	; (8006600 <LCD_Index2Color_M565+0x20>)
 80065e6:	f000 021f 	and.w	r2, r0, #31
 80065ea:	f3c0 1045 	ubfx	r0, r0, #5, #6
 80065ee:	5c9a      	ldrb	r2, [r3, r2]
 80065f0:	5c5b      	ldrb	r3, [r3, r1]
 80065f2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80065f6:	4a03      	ldr	r2, [pc, #12]	; (8006604 <LCD_Index2Color_M565+0x24>)
 80065f8:	5c10      	ldrb	r0, [r2, r0]
 80065fa:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80065fe:	4770      	bx	lr
 8006600:	0800bd24 	.word	0x0800bd24
 8006604:	0800bd44 	.word	0x0800bd44

08006608 <_Color2Index_M565>:
 8006608:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <_Color2Index_M565+0x20>)
 800660e:	b2c2      	uxtb	r2, r0
 8006610:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8006614:	5c9a      	ldrb	r2, [r3, r2]
 8006616:	5c5b      	ldrb	r3, [r3, r1]
 8006618:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 800661c:	4a03      	ldr	r2, [pc, #12]	; (800662c <_Color2Index_M565+0x24>)
 800661e:	5c10      	ldrb	r0, [r2, r0]
 8006620:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	0800bc24 	.word	0x0800bc24
 800662c:	0800bd84 	.word	0x0800bd84

08006630 <_GetIndexMask_M565>:
 8006630:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006634:	4770      	bx	lr
	...

08006638 <_Color2IndexBulk>:
 8006638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663a:	4f0f      	ldr	r7, [pc, #60]	; (8006678 <_Color2IndexBulk+0x40>)
 800663c:	683f      	ldr	r7, [r7, #0]
 800663e:	4606      	mov	r6, r0
 8006640:	460d      	mov	r5, r1
 8006642:	4614      	mov	r4, r2
 8006644:	469c      	mov	ip, r3
 8006646:	b10f      	cbz	r7, 800664c <_Color2IndexBulk+0x14>
 8006648:	47b8      	blx	r7
 800664a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800664c:	f856 2b04 	ldr.w	r2, [r6], #4
 8006650:	490a      	ldr	r1, [pc, #40]	; (800667c <_Color2IndexBulk+0x44>)
 8006652:	b2d3      	uxtb	r3, r2
 8006654:	3c01      	subs	r4, #1
 8006656:	5cc8      	ldrb	r0, [r1, r3]
 8006658:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800665c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8006660:	5ccb      	ldrb	r3, [r1, r3]
 8006662:	4907      	ldr	r1, [pc, #28]	; (8006680 <_Color2IndexBulk+0x48>)
 8006664:	5c8a      	ldrb	r2, [r1, r2]
 8006666:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 800666a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800666e:	802b      	strh	r3, [r5, #0]
 8006670:	4465      	add	r5, ip
 8006672:	d1eb      	bne.n	800664c <_Color2IndexBulk+0x14>
 8006674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006676:	bf00      	nop
 8006678:	20028bd4 	.word	0x20028bd4
 800667c:	0800bc24 	.word	0x0800bc24
 8006680:	0800bd84 	.word	0x0800bd84

08006684 <_Index2ColorBulk>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	4e13      	ldr	r6, [pc, #76]	; (80066d4 <_Index2ColorBulk+0x50>)
 8006688:	6836      	ldr	r6, [r6, #0]
 800668a:	4684      	mov	ip, r0
 800668c:	4614      	mov	r4, r2
 800668e:	461d      	mov	r5, r3
 8006690:	b10e      	cbz	r6, 8006696 <_Index2ColorBulk+0x12>
 8006692:	47b0      	blx	r6
 8006694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006696:	1e50      	subs	r0, r2, #1
 8006698:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800669c:	3a01      	subs	r2, #1
 800669e:	fb03 c000 	mla	r0, r3, r0, ip
 80066a2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80066a6:	8802      	ldrh	r2, [r0, #0]
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <_Index2ColorBulk+0x54>)
 80066aa:	f002 061f 	and.w	r6, r2, #31
 80066ae:	0ad7      	lsrs	r7, r2, #11
 80066b0:	5d9e      	ldrb	r6, [r3, r6]
 80066b2:	5ddb      	ldrb	r3, [r3, r7]
 80066b4:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80066b8:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80066bc:	4e07      	ldr	r6, [pc, #28]	; (80066dc <_Index2ColorBulk+0x58>)
 80066be:	5cb2      	ldrb	r2, [r6, r2]
 80066c0:	3c01      	subs	r4, #1
 80066c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80066c6:	f841 3904 	str.w	r3, [r1], #-4
 80066ca:	ebc5 0000 	rsb	r0, r5, r0
 80066ce:	d1ea      	bne.n	80066a6 <_Index2ColorBulk+0x22>
 80066d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20028bd0 	.word	0x20028bd0
 80066d8:	0800bd24 	.word	0x0800bd24
 80066dc:	0800bd44 	.word	0x0800bd44

080066e0 <GUICC_M565_SetCustColorConv>:
 80066e0:	4b02      	ldr	r3, [pc, #8]	; (80066ec <GUICC_M565_SetCustColorConv+0xc>)
 80066e2:	6018      	str	r0, [r3, #0]
 80066e4:	4b02      	ldr	r3, [pc, #8]	; (80066f0 <GUICC_M565_SetCustColorConv+0x10>)
 80066e6:	6019      	str	r1, [r3, #0]
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	20028bd4 	.word	0x20028bd4
 80066f0:	20028bd0 	.word	0x20028bd0

080066f4 <LCD_Index2Color_888>:
 80066f4:	4770      	bx	lr

080066f6 <LCD_Index2Color_8888>:
 80066f6:	4770      	bx	lr

080066f8 <_GetIndexMask_0>:
 80066f8:	b508      	push	{r3, lr}
 80066fa:	f7fe f871 	bl	80047e0 <LCD_GetNumColors>
 80066fe:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006702:	d010      	beq.n	8006726 <_GetIndexMask_0+0x2e>
 8006704:	287f      	cmp	r0, #127	; 0x7f
 8006706:	d810      	bhi.n	800672a <_GetIndexMask_0+0x32>
 8006708:	283f      	cmp	r0, #63	; 0x3f
 800670a:	d810      	bhi.n	800672e <_GetIndexMask_0+0x36>
 800670c:	281f      	cmp	r0, #31
 800670e:	d810      	bhi.n	8006732 <_GetIndexMask_0+0x3a>
 8006710:	280f      	cmp	r0, #15
 8006712:	d810      	bhi.n	8006736 <_GetIndexMask_0+0x3e>
 8006714:	2807      	cmp	r0, #7
 8006716:	d810      	bhi.n	800673a <_GetIndexMask_0+0x42>
 8006718:	2803      	cmp	r0, #3
 800671a:	d810      	bhi.n	800673e <_GetIndexMask_0+0x46>
 800671c:	2801      	cmp	r0, #1
 800671e:	bf94      	ite	ls
 8006720:	2000      	movls	r0, #0
 8006722:	2001      	movhi	r0, #1
 8006724:	e00c      	b.n	8006740 <_GetIndexMask_0+0x48>
 8006726:	2008      	movs	r0, #8
 8006728:	e00a      	b.n	8006740 <_GetIndexMask_0+0x48>
 800672a:	2007      	movs	r0, #7
 800672c:	e008      	b.n	8006740 <_GetIndexMask_0+0x48>
 800672e:	2006      	movs	r0, #6
 8006730:	e006      	b.n	8006740 <_GetIndexMask_0+0x48>
 8006732:	2005      	movs	r0, #5
 8006734:	e004      	b.n	8006740 <_GetIndexMask_0+0x48>
 8006736:	2004      	movs	r0, #4
 8006738:	e002      	b.n	8006740 <_GetIndexMask_0+0x48>
 800673a:	2003      	movs	r0, #3
 800673c:	e000      	b.n	8006740 <_GetIndexMask_0+0x48>
 800673e:	2002      	movs	r0, #2
 8006740:	2301      	movs	r3, #1
 8006742:	fa03 f000 	lsl.w	r0, r3, r0
 8006746:	3801      	subs	r0, #1
 8006748:	bd08      	pop	{r3, pc}

0800674a <_Index2Color_0>:
 800674a:	b538      	push	{r3, r4, r5, lr}
 800674c:	4604      	mov	r4, r0
 800674e:	f7fe f847 	bl	80047e0 <LCD_GetNumColors>
 8006752:	4605      	mov	r5, r0
 8006754:	f7fe f86e 	bl	8004834 <LCD_GetPalette>
 8006758:	42ac      	cmp	r4, r5
 800675a:	d203      	bcs.n	8006764 <_Index2Color_0+0x1a>
 800675c:	b118      	cbz	r0, 8006766 <_Index2Color_0+0x1c>
 800675e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8006762:	bd38      	pop	{r3, r4, r5, pc}
 8006764:	2000      	movs	r0, #0
 8006766:	bd38      	pop	{r3, r4, r5, pc}

08006768 <_Color2Index_0>:
 8006768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800676c:	4682      	mov	sl, r0
 800676e:	f7fe f837 	bl	80047e0 <LCD_GetNumColors>
 8006772:	4681      	mov	r9, r0
 8006774:	f7fe f85e 	bl	8004834 <LCD_GetPalette>
 8006778:	4605      	mov	r5, r0
 800677a:	b1e0      	cbz	r0, 80067b6 <_Color2Index_0+0x4e>
 800677c:	2300      	movs	r3, #0
 800677e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8006782:	4592      	cmp	sl, r2
 8006784:	d019      	beq.n	80067ba <_Color2Index_0+0x52>
 8006786:	3301      	adds	r3, #1
 8006788:	454b      	cmp	r3, r9
 800678a:	dbf8      	blt.n	800677e <_Color2Index_0+0x16>
 800678c:	2700      	movs	r7, #0
 800678e:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 8006792:	463c      	mov	r4, r7
 8006794:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 8006798:	4650      	mov	r0, sl
 800679a:	f7ff f8c7 	bl	800592c <GUI_CalcColorDist>
 800679e:	4626      	mov	r6, r4
 80067a0:	4540      	cmp	r0, r8
 80067a2:	f104 0401 	add.w	r4, r4, #1
 80067a6:	bf24      	itt	cs
 80067a8:	4640      	movcs	r0, r8
 80067aa:	463e      	movcs	r6, r7
 80067ac:	454c      	cmp	r4, r9
 80067ae:	da07      	bge.n	80067c0 <_Color2Index_0+0x58>
 80067b0:	4680      	mov	r8, r0
 80067b2:	4637      	mov	r7, r6
 80067b4:	e7ee      	b.n	8006794 <_Color2Index_0+0x2c>
 80067b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ba:	4618      	mov	r0, r3
 80067bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c0:	4630      	mov	r0, r6
 80067c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080067c6 <_Color2Index_M8888I>:
 80067c6:	43c3      	mvns	r3, r0
 80067c8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80067cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80067d0:	4313      	orrs	r3, r2
 80067d2:	b2c2      	uxtb	r2, r0
 80067d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067d8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80067dc:	4318      	orrs	r0, r3
 80067de:	4770      	bx	lr

080067e0 <_GetIndexMask_M8888I>:
 80067e0:	f04f 30ff 	mov.w	r0, #4294967295
 80067e4:	4770      	bx	lr
	...

080067e8 <_Color2IndexBulk_M8888I>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	4c0e      	ldr	r4, [pc, #56]	; (8006824 <_Color2IndexBulk_M8888I+0x3c>)
 80067ec:	6824      	ldr	r4, [r4, #0]
 80067ee:	4607      	mov	r7, r0
 80067f0:	460e      	mov	r6, r1
 80067f2:	4615      	mov	r5, r2
 80067f4:	469c      	mov	ip, r3
 80067f6:	b10c      	cbz	r4, 80067fc <_Color2IndexBulk_M8888I+0x14>
 80067f8:	47a0      	blx	r4
 80067fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067fc:	f857 4b04 	ldr.w	r4, [r7], #4
 8006800:	43e3      	mvns	r3, r4
 8006802:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8006806:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800680a:	4313      	orrs	r3, r2
 800680c:	b2e2      	uxtb	r2, r4
 800680e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006812:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8006816:	431c      	orrs	r4, r3
 8006818:	3d01      	subs	r5, #1
 800681a:	6034      	str	r4, [r6, #0]
 800681c:	4466      	add	r6, ip
 800681e:	d1ed      	bne.n	80067fc <_Color2IndexBulk_M8888I+0x14>
 8006820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006822:	bf00      	nop
 8006824:	20028bdc 	.word	0x20028bdc

08006828 <_Index2ColorBulk_M8888I>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	4c0e      	ldr	r4, [pc, #56]	; (8006864 <_Index2ColorBulk_M8888I+0x3c>)
 800682c:	6824      	ldr	r4, [r4, #0]
 800682e:	4606      	mov	r6, r0
 8006830:	460f      	mov	r7, r1
 8006832:	4615      	mov	r5, r2
 8006834:	469c      	mov	ip, r3
 8006836:	b10c      	cbz	r4, 800683c <_Index2ColorBulk_M8888I+0x14>
 8006838:	47a0      	blx	r4
 800683a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800683c:	6834      	ldr	r4, [r6, #0]
 800683e:	43e3      	mvns	r3, r4
 8006840:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8006844:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006848:	4313      	orrs	r3, r2
 800684a:	b2e2      	uxtb	r2, r4
 800684c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006850:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8006854:	431c      	orrs	r4, r3
 8006856:	3d01      	subs	r5, #1
 8006858:	f847 4b04 	str.w	r4, [r7], #4
 800685c:	4466      	add	r6, ip
 800685e:	d1ed      	bne.n	800683c <_Index2ColorBulk_M8888I+0x14>
 8006860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006862:	bf00      	nop
 8006864:	20028bd8 	.word	0x20028bd8

08006868 <GUICC_M8888I_SetCustColorConv>:
 8006868:	4b02      	ldr	r3, [pc, #8]	; (8006874 <GUICC_M8888I_SetCustColorConv+0xc>)
 800686a:	6018      	str	r0, [r3, #0]
 800686c:	4b02      	ldr	r3, [pc, #8]	; (8006878 <GUICC_M8888I_SetCustColorConv+0x10>)
 800686e:	6019      	str	r1, [r3, #0]
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	20028bdc 	.word	0x20028bdc
 8006878:	20028bd8 	.word	0x20028bd8

0800687c <_Color2Index_M4444I>:
 800687c:	b510      	push	{r4, lr}
 800687e:	f240 1307 	movw	r3, #263	; 0x107
 8006882:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8006886:	b2c2      	uxtb	r2, r0
 8006888:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800688c:	3408      	adds	r4, #8
 800688e:	eba3 6010 	sub.w	r0, r3, r0, lsr #24
 8006892:	2311      	movs	r3, #17
 8006894:	fbb4 f4f3 	udiv	r4, r4, r3
 8006898:	fbb0 f0f3 	udiv	r0, r0, r3
 800689c:	3208      	adds	r2, #8
 800689e:	fbb2 f2f3 	udiv	r2, r2, r3
 80068a2:	3108      	adds	r1, #8
 80068a4:	eb04 3000 	add.w	r0, r4, r0, lsl #12
 80068a8:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 80068ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80068b0:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 80068b4:	bd10      	pop	{r4, pc}
	...

080068b8 <_Index2Color_M4444I>:
 80068b8:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <_Index2Color_M4444I+0x2c>)
 80068ba:	f000 020f 	and.w	r2, r0, #15
 80068be:	5c99      	ldrb	r1, [r3, r2]
 80068c0:	f3c0 2203 	ubfx	r2, r0, #8, #4
 80068c4:	5c9a      	ldrb	r2, [r3, r2]
 80068c6:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 80068ca:	f3c0 1103 	ubfx	r1, r0, #4, #4
 80068ce:	f3c0 3003 	ubfx	r0, r0, #12, #4
 80068d2:	5c59      	ldrb	r1, [r3, r1]
 80068d4:	5c18      	ldrb	r0, [r3, r0]
 80068d6:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80068da:	43c0      	mvns	r0, r0
 80068dc:	eb02 6000 	add.w	r0, r2, r0, lsl #24
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	0800bb14 	.word	0x0800bb14

080068e8 <_GetIndexMask_M4444I>:
 80068e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80068ec:	4770      	bx	lr
	...

080068f0 <_Color2IndexBulk_M4444I>:
 80068f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f4:	4c16      	ldr	r4, [pc, #88]	; (8006950 <_Color2IndexBulk_M4444I+0x60>)
 80068f6:	6824      	ldr	r4, [r4, #0]
 80068f8:	4684      	mov	ip, r0
 80068fa:	460f      	mov	r7, r1
 80068fc:	4616      	mov	r6, r2
 80068fe:	4698      	mov	r8, r3
 8006900:	b114      	cbz	r4, 8006908 <_Color2IndexBulk_M4444I+0x18>
 8006902:	47a0      	blx	r4
 8006904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006908:	f85c 5b04 	ldr.w	r5, [ip], #4
 800690c:	b2e9      	uxtb	r1, r5
 800690e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8006912:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8006916:	0e2d      	lsrs	r5, r5, #24
 8006918:	f5c5 7583 	rsb	r5, r5, #262	; 0x106
 800691c:	2411      	movs	r4, #17
 800691e:	3501      	adds	r5, #1
 8006920:	fbb5 f5f4 	udiv	r5, r5, r4
 8006924:	3108      	adds	r1, #8
 8006926:	fbb1 f1f4 	udiv	r1, r1, r4
 800692a:	3208      	adds	r2, #8
 800692c:	032d      	lsls	r5, r5, #12
 800692e:	fbb2 f2f4 	udiv	r2, r2, r4
 8006932:	3308      	adds	r3, #8
 8006934:	eb05 2501 	add.w	r5, r5, r1, lsl #8
 8006938:	4415      	add	r5, r2
 800693a:	fbb3 f4f4 	udiv	r4, r3, r4
 800693e:	eb05 1404 	add.w	r4, r5, r4, lsl #4
 8006942:	3e01      	subs	r6, #1
 8006944:	803c      	strh	r4, [r7, #0]
 8006946:	4447      	add	r7, r8
 8006948:	d1de      	bne.n	8006908 <_Color2IndexBulk_M4444I+0x18>
 800694a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800694e:	bf00      	nop
 8006950:	20028be4 	.word	0x20028be4

08006954 <_Index2ColorBulk_M4444I>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	4d16      	ldr	r5, [pc, #88]	; (80069b0 <_Index2ColorBulk_M4444I+0x5c>)
 8006958:	682d      	ldr	r5, [r5, #0]
 800695a:	4684      	mov	ip, r0
 800695c:	4614      	mov	r4, r2
 800695e:	461e      	mov	r6, r3
 8006960:	b10d      	cbz	r5, 8006966 <_Index2ColorBulk_M4444I+0x12>
 8006962:	47a8      	blx	r5
 8006964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006966:	1e50      	subs	r0, r2, #1
 8006968:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800696c:	3a01      	subs	r2, #1
 800696e:	fb03 c000 	mla	r0, r3, r0, ip
 8006972:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006976:	8805      	ldrh	r5, [r0, #0]
 8006978:	4a0e      	ldr	r2, [pc, #56]	; (80069b4 <_Index2ColorBulk_M4444I+0x60>)
 800697a:	f005 030f 	and.w	r3, r5, #15
 800697e:	3c01      	subs	r4, #1
 8006980:	5cd7      	ldrb	r7, [r2, r3]
 8006982:	f3c5 2303 	ubfx	r3, r5, #8, #4
 8006986:	ebc6 0000 	rsb	r0, r6, r0
 800698a:	5cd3      	ldrb	r3, [r2, r3]
 800698c:	eb03 4707 	add.w	r7, r3, r7, lsl #16
 8006990:	ea4f 3315 	mov.w	r3, r5, lsr #12
 8006994:	f3c5 1503 	ubfx	r5, r5, #4, #4
 8006998:	5cd3      	ldrb	r3, [r2, r3]
 800699a:	5d52      	ldrb	r2, [r2, r5]
 800699c:	ea6f 0303 	mvn.w	r3, r3
 80069a0:	eb07 6303 	add.w	r3, r7, r3, lsl #24
 80069a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80069a8:	f841 3904 	str.w	r3, [r1], #-4
 80069ac:	d1e3      	bne.n	8006976 <_Index2ColorBulk_M4444I+0x22>
 80069ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b0:	20028be0 	.word	0x20028be0
 80069b4:	0800bb14 	.word	0x0800bb14

080069b8 <GUICC_M4444I_SetCustColorConv>:
 80069b8:	4b02      	ldr	r3, [pc, #8]	; (80069c4 <GUICC_M4444I_SetCustColorConv+0xc>)
 80069ba:	6018      	str	r0, [r3, #0]
 80069bc:	4b02      	ldr	r3, [pc, #8]	; (80069c8 <GUICC_M4444I_SetCustColorConv+0x10>)
 80069be:	6019      	str	r1, [r3, #0]
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20028be4 	.word	0x20028be4
 80069c8:	20028be0 	.word	0x20028be0

080069cc <_Color2Index_M1555I>:
 80069cc:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <_Color2Index_M1555I+0x24>)
 80069ce:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80069d2:	b2c1      	uxtb	r1, r0
 80069d4:	5c9a      	ldrb	r2, [r3, r2]
 80069d6:	5c59      	ldrb	r1, [r3, r1]
 80069d8:	eb02 2281 	add.w	r2, r2, r1, lsl #10
 80069dc:	43c1      	mvns	r1, r0
 80069de:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80069e2:	0fc9      	lsrs	r1, r1, #31
 80069e4:	5c18      	ldrb	r0, [r3, r0]
 80069e6:	eb02 32c1 	add.w	r2, r2, r1, lsl #15
 80069ea:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 80069ee:	4770      	bx	lr
 80069f0:	0800bc24 	.word	0x0800bc24

080069f4 <_Index2Color_M1555I>:
 80069f4:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <_Index2Color_M1555I+0x30>)
 80069f6:	f000 021f 	and.w	r2, r0, #31
 80069fa:	b510      	push	{r4, lr}
 80069fc:	5c99      	ldrb	r1, [r3, r2]
 80069fe:	f3c0 2484 	ubfx	r4, r0, #10, #5
 8006a02:	f3c0 1244 	ubfx	r2, r0, #5, #5
 8006a06:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8006a0a:	5c9a      	ldrb	r2, [r3, r2]
 8006a0c:	5d1b      	ldrb	r3, [r3, r4]
 8006a0e:	eb03 4001 	add.w	r0, r3, r1, lsl #16
 8006a12:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8006a16:	bf0c      	ite	eq
 8006a18:	f04f 437f 	moveq.w	r3, #4278190080	; 0xff000000
 8006a1c:	2300      	movne	r3, #0
 8006a1e:	4418      	add	r0, r3
 8006a20:	bd10      	pop	{r4, pc}
 8006a22:	bf00      	nop
 8006a24:	0800bd24 	.word	0x0800bd24

08006a28 <_GetIndexMask_M1555I>:
 8006a28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006a2c:	4770      	bx	lr
	...

08006a30 <_Color2IndexBulk_M1555I>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	4c11      	ldr	r4, [pc, #68]	; (8006a78 <_Color2IndexBulk_M1555I+0x48>)
 8006a34:	6824      	ldr	r4, [r4, #0]
 8006a36:	4607      	mov	r7, r0
 8006a38:	460e      	mov	r6, r1
 8006a3a:	4615      	mov	r5, r2
 8006a3c:	469c      	mov	ip, r3
 8006a3e:	b10c      	cbz	r4, 8006a44 <_Color2IndexBulk_M1555I+0x14>
 8006a40:	47a0      	blx	r4
 8006a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a44:	f857 4b04 	ldr.w	r4, [r7], #4
 8006a48:	4a0c      	ldr	r2, [pc, #48]	; (8006a7c <_Color2IndexBulk_M1555I+0x4c>)
 8006a4a:	b2e3      	uxtb	r3, r4
 8006a4c:	3d01      	subs	r5, #1
 8006a4e:	5cd1      	ldrb	r1, [r2, r3]
 8006a50:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8006a54:	5cd3      	ldrb	r3, [r2, r3]
 8006a56:	eb03 2381 	add.w	r3, r3, r1, lsl #10
 8006a5a:	ea6f 0104 	mvn.w	r1, r4
 8006a5e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8006a62:	ea4f 71d1 	mov.w	r1, r1, lsr #31
 8006a66:	5d12      	ldrb	r2, [r2, r4]
 8006a68:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 8006a6c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8006a70:	8033      	strh	r3, [r6, #0]
 8006a72:	4466      	add	r6, ip
 8006a74:	d1e6      	bne.n	8006a44 <_Color2IndexBulk_M1555I+0x14>
 8006a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a78:	20028bec 	.word	0x20028bec
 8006a7c:	0800bc24 	.word	0x0800bc24

08006a80 <_Index2ColorBulk_M1555I>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	4d17      	ldr	r5, [pc, #92]	; (8006ae0 <_Index2ColorBulk_M1555I+0x60>)
 8006a84:	682d      	ldr	r5, [r5, #0]
 8006a86:	4684      	mov	ip, r0
 8006a88:	4614      	mov	r4, r2
 8006a8a:	461e      	mov	r6, r3
 8006a8c:	b10d      	cbz	r5, 8006a92 <_Index2ColorBulk_M1555I+0x12>
 8006a8e:	47a8      	blx	r5
 8006a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a92:	1e50      	subs	r0, r2, #1
 8006a94:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006a98:	3a01      	subs	r2, #1
 8006a9a:	fb03 c000 	mla	r0, r3, r0, ip
 8006a9e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006aa2:	8802      	ldrh	r2, [r0, #0]
 8006aa4:	4d0f      	ldr	r5, [pc, #60]	; (8006ae4 <_Index2ColorBulk_M1555I+0x64>)
 8006aa6:	f002 031f 	and.w	r3, r2, #31
 8006aaa:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006aae:	f815 c003 	ldrb.w	ip, [r5, r3]
 8006ab2:	f3c2 1344 	ubfx	r3, r2, #5, #5
 8006ab6:	ebc6 0000 	rsb	r0, r6, r0
 8006aba:	5cef      	ldrb	r7, [r5, r3]
 8006abc:	f3c2 2384 	ubfx	r3, r2, #10, #5
 8006ac0:	bf0c      	ite	eq
 8006ac2:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
 8006ac6:	2200      	movne	r2, #0
 8006ac8:	5ceb      	ldrb	r3, [r5, r3]
 8006aca:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8006ace:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8006ad2:	4413      	add	r3, r2
 8006ad4:	3c01      	subs	r4, #1
 8006ad6:	f841 3904 	str.w	r3, [r1], #-4
 8006ada:	d1e2      	bne.n	8006aa2 <_Index2ColorBulk_M1555I+0x22>
 8006adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20028be8 	.word	0x20028be8
 8006ae4:	0800bd24 	.word	0x0800bd24

08006ae8 <GUICC_M1555I_SetCustColorConv>:
 8006ae8:	4b02      	ldr	r3, [pc, #8]	; (8006af4 <GUICC_M1555I_SetCustColorConv+0xc>)
 8006aea:	6018      	str	r0, [r3, #0]
 8006aec:	4b02      	ldr	r3, [pc, #8]	; (8006af8 <GUICC_M1555I_SetCustColorConv+0x10>)
 8006aee:	6019      	str	r1, [r3, #0]
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20028bec 	.word	0x20028bec
 8006af8:	20028be8 	.word	0x20028be8

08006afc <_Color2Index_88666I>:
 8006afc:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <_Color2Index_88666I+0x1c>)
 8006afe:	b510      	push	{r4, lr}
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4604      	mov	r4, r0
 8006b04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006b08:	4798      	blx	r3
 8006b0a:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8006b0e:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8006b12:	ea40 4014 	orr.w	r0, r0, r4, lsr #16
 8006b16:	bd10      	pop	{r4, pc}
 8006b18:	0800aaac 	.word	0x0800aaac

08006b1c <_Index2Color_88666I>:
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <_Index2Color_88666I+0x1c>)
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	4604      	mov	r4, r0
 8006b24:	b2c0      	uxtb	r0, r0
 8006b26:	4798      	blx	r3
 8006b28:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8006b2c:	0424      	lsls	r4, r4, #16
 8006b2e:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8006b32:	4320      	orrs	r0, r4
 8006b34:	bd10      	pop	{r4, pc}
 8006b36:	bf00      	nop
 8006b38:	0800aaac 	.word	0x0800aaac

08006b3c <_GetIndexMask_88666I>:
 8006b3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006b40:	4770      	bx	lr
	...

08006b44 <_Color2IndexBulk_88666I>:
 8006b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b48:	4606      	mov	r6, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	4615      	mov	r5, r2
 8006b4e:	4698      	mov	r8, r3
 8006b50:	f856 7b04 	ldr.w	r7, [r6], #4
 8006b54:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <_Color2IndexBulk_88666I+0x34>)
 8006b56:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	4790      	blx	r2
 8006b5e:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
 8006b62:	f087 477f 	eor.w	r7, r7, #4278190080	; 0xff000000
 8006b66:	ea40 4017 	orr.w	r0, r0, r7, lsr #16
 8006b6a:	3d01      	subs	r5, #1
 8006b6c:	8020      	strh	r0, [r4, #0]
 8006b6e:	4444      	add	r4, r8
 8006b70:	d1ee      	bne.n	8006b50 <_Color2IndexBulk_88666I+0xc>
 8006b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b76:	bf00      	nop
 8006b78:	0800aaac 	.word	0x0800aaac

08006b7c <_Index2ColorBulk_88666I>:
 8006b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b80:	1e55      	subs	r5, r2, #1
 8006b82:	4614      	mov	r4, r2
 8006b84:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006b88:	3a01      	subs	r2, #1
 8006b8a:	461e      	mov	r6, r3
 8006b8c:	fb03 0505 	mla	r5, r3, r5, r0
 8006b90:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 8006b94:	f8b5 8000 	ldrh.w	r8, [r5]
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <_Index2ColorBulk_88666I+0x48>)
 8006b9a:	fa5f f088 	uxtb.w	r0, r8
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	4798      	blx	r3
 8006ba2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8006ba6:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8006baa:	f088 487f 	eor.w	r8, r8, #4278190080	; 0xff000000
 8006bae:	ea48 0000 	orr.w	r0, r8, r0
 8006bb2:	3c01      	subs	r4, #1
 8006bb4:	f847 0904 	str.w	r0, [r7], #-4
 8006bb8:	ebc6 0505 	rsb	r5, r6, r5
 8006bbc:	d1ea      	bne.n	8006b94 <_Index2ColorBulk_88666I+0x18>
 8006bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc2:	bf00      	nop
 8006bc4:	0800aaac 	.word	0x0800aaac

08006bc8 <LCD_Color2Index_8666>:
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	b2c3      	uxtb	r3, r0
 8006bcc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8006bd6:	d108      	bne.n	8006bea <LCD_Color2Index_8666+0x22>
 8006bd8:	428b      	cmp	r3, r1
 8006bda:	d106      	bne.n	8006bea <LCD_Color2Index_8666+0x22>
 8006bdc:	f103 0008 	add.w	r0, r3, #8
 8006be0:	2211      	movs	r2, #17
 8006be2:	fbb0 f0f2 	udiv	r0, r0, r2
 8006be6:	3078      	adds	r0, #120	; 0x78
 8006be8:	bd10      	pop	{r4, pc}
 8006bea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006bee:	22ff      	movs	r2, #255	; 0xff
 8006bf0:	347f      	adds	r4, #127	; 0x7f
 8006bf2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006bf6:	fbb4 f4f2 	udiv	r4, r4, r2
 8006bfa:	2006      	movs	r0, #6
 8006bfc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c00:	317f      	adds	r1, #127	; 0x7f
 8006c02:	fbb1 f1f2 	udiv	r1, r1, r2
 8006c06:	4344      	muls	r4, r0
 8006c08:	337f      	adds	r3, #127	; 0x7f
 8006c0a:	2024      	movs	r0, #36	; 0x24
 8006c0c:	fb00 4001 	mla	r0, r0, r1, r4
 8006c10:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c14:	4410      	add	r0, r2
 8006c16:	286b      	cmp	r0, #107	; 0x6b
 8006c18:	bf88      	it	hi
 8006c1a:	3028      	addhi	r0, #40	; 0x28
 8006c1c:	bd10      	pop	{r4, pc}

08006c1e <_GetIndexMask_8666>:
 8006c1e:	20ff      	movs	r0, #255	; 0xff
 8006c20:	4770      	bx	lr
	...

08006c24 <LCD_Index2Color_8666>:
 8006c24:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 8006c28:	2b0f      	cmp	r3, #15
 8006c2a:	b510      	push	{r4, lr}
 8006c2c:	d805      	bhi.n	8006c3a <LCD_Index2Color_8666+0x16>
 8006c2e:	4b11      	ldr	r3, [pc, #68]	; (8006c74 <LCD_Index2Color_8666+0x50>)
 8006c30:	4358      	muls	r0, r3
 8006c32:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8006c36:	3008      	adds	r0, #8
 8006c38:	bd10      	pop	{r4, pc}
 8006c3a:	286b      	cmp	r0, #107	; 0x6b
 8006c3c:	d902      	bls.n	8006c44 <LCD_Index2Color_8666+0x20>
 8006c3e:	2893      	cmp	r0, #147	; 0x93
 8006c40:	d915      	bls.n	8006c6e <LCD_Index2Color_8666+0x4a>
 8006c42:	3828      	subs	r0, #40	; 0x28
 8006c44:	2306      	movs	r3, #6
 8006c46:	fbb0 f1f3 	udiv	r1, r0, r3
 8006c4a:	2424      	movs	r4, #36	; 0x24
 8006c4c:	2233      	movs	r2, #51	; 0x33
 8006c4e:	fbb0 f4f4 	udiv	r4, r0, r4
 8006c52:	fb03 0011 	mls	r0, r3, r1, r0
 8006c56:	4350      	muls	r0, r2
 8006c58:	4354      	muls	r4, r2
 8006c5a:	eb00 4404 	add.w	r4, r0, r4, lsl #16
 8006c5e:	fbb1 f0f3 	udiv	r0, r1, r3
 8006c62:	fb03 1010 	mls	r0, r3, r0, r1
 8006c66:	4350      	muls	r0, r2
 8006c68:	eb04 2000 	add.w	r0, r4, r0, lsl #8
 8006c6c:	bd10      	pop	{r4, pc}
 8006c6e:	2000      	movs	r0, #0
 8006c70:	bd10      	pop	{r4, pc}
 8006c72:	bf00      	nop
 8006c74:	00111111 	.word	0x00111111

08006c78 <_Color2Index_1616I>:
 8006c78:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <_Color2Index_1616I+0x20>)
 8006c7a:	b510      	push	{r4, lr}
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4604      	mov	r4, r0
 8006c80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006c84:	4798      	blx	r3
 8006c86:	0e24      	lsrs	r4, r4, #24
 8006c88:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <_Color2Index_1616I+0x24>)
 8006c8a:	5d1b      	ldrb	r3, [r3, r4]
 8006c8c:	f1c3 030f 	rsb	r3, r3, #15
 8006c90:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8006c94:	bd10      	pop	{r4, pc}
 8006c96:	bf00      	nop
 8006c98:	0800aadc 	.word	0x0800aadc
 8006c9c:	0800bb24 	.word	0x0800bb24

08006ca0 <_Index2Color_1616I>:
 8006ca0:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <_Index2Color_1616I+0x1c>)
 8006ca2:	b510      	push	{r4, lr}
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	b2c0      	uxtb	r0, r0
 8006caa:	4798      	blx	r3
 8006cac:	0924      	lsrs	r4, r4, #4
 8006cae:	4b04      	ldr	r3, [pc, #16]	; (8006cc0 <_Index2Color_1616I+0x20>)
 8006cb0:	5d1b      	ldrb	r3, [r3, r4]
 8006cb2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006cb6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8006cba:	bd10      	pop	{r4, pc}
 8006cbc:	0800aadc 	.word	0x0800aadc
 8006cc0:	0800bb14 	.word	0x0800bb14

08006cc4 <_GetIndexMask_1616I>:
 8006cc4:	20ff      	movs	r0, #255	; 0xff
 8006cc6:	4770      	bx	lr

08006cc8 <_Color2IndexBulk_1616I>:
 8006cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ccc:	4606      	mov	r6, r0
 8006cce:	460c      	mov	r4, r1
 8006cd0:	4615      	mov	r5, r2
 8006cd2:	4698      	mov	r8, r3
 8006cd4:	f856 7b04 	ldr.w	r7, [r6], #4
 8006cd8:	4b08      	ldr	r3, [pc, #32]	; (8006cfc <_Color2IndexBulk_1616I+0x34>)
 8006cda:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	4790      	blx	r2
 8006ce2:	0e3f      	lsrs	r7, r7, #24
 8006ce4:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <_Color2IndexBulk_1616I+0x38>)
 8006ce6:	5ddb      	ldrb	r3, [r3, r7]
 8006ce8:	f1c3 030f 	rsb	r3, r3, #15
 8006cec:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8006cf0:	3d01      	subs	r5, #1
 8006cf2:	7020      	strb	r0, [r4, #0]
 8006cf4:	4444      	add	r4, r8
 8006cf6:	d1ed      	bne.n	8006cd4 <_Color2IndexBulk_1616I+0xc>
 8006cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cfc:	0800aadc 	.word	0x0800aadc
 8006d00:	0800bb24 	.word	0x0800bb24

08006d04 <_Index2ColorBulk_1616I>:
 8006d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d08:	1e55      	subs	r5, r2, #1
 8006d0a:	4614      	mov	r4, r2
 8006d0c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006d10:	3a01      	subs	r2, #1
 8006d12:	461e      	mov	r6, r3
 8006d14:	fb03 0505 	mla	r5, r3, r5, r0
 8006d18:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 8006d1c:	f895 8000 	ldrb.w	r8, [r5]
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <_Index2ColorBulk_1616I+0x48>)
 8006d22:	4640      	mov	r0, r8
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4798      	blx	r3
 8006d28:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8006d2c:	4b08      	ldr	r3, [pc, #32]	; (8006d50 <_Index2ColorBulk_1616I+0x4c>)
 8006d2e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8006d32:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006d36:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8006d3a:	3c01      	subs	r4, #1
 8006d3c:	f847 0904 	str.w	r0, [r7], #-4
 8006d40:	ebc6 0505 	rsb	r5, r6, r5
 8006d44:	d1ea      	bne.n	8006d1c <_Index2ColorBulk_1616I+0x18>
 8006d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d4a:	bf00      	nop
 8006d4c:	0800aadc 	.word	0x0800aadc
 8006d50:	0800bb14 	.word	0x0800bb14

08006d54 <_Color2Index_16>:
 8006d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d56:	b2c5      	uxtb	r5, r0
 8006d58:	1c6c      	adds	r4, r5, #1
 8006d5a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006d5e:	1c59      	adds	r1, r3, #1
 8006d60:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8006d64:	2c54      	cmp	r4, #84	; 0x54
 8006d66:	f100 0201 	add.w	r2, r0, #1
 8006d6a:	bf94      	ite	ls
 8006d6c:	2400      	movls	r4, #0
 8006d6e:	2401      	movhi	r4, #1
 8006d70:	2954      	cmp	r1, #84	; 0x54
 8006d72:	bf94      	ite	ls
 8006d74:	2100      	movls	r1, #0
 8006d76:	2101      	movhi	r1, #1
 8006d78:	2a54      	cmp	r2, #84	; 0x54
 8006d7a:	bf94      	ite	ls
 8006d7c:	2200      	movls	r2, #0
 8006d7e:	2201      	movhi	r2, #1
 8006d80:	4606      	mov	r6, r0
 8006d82:	00d0      	lsls	r0, r2, #3
 8006d84:	461f      	mov	r7, r3
 8006d86:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006d8a:	188b      	adds	r3, r1, r2
 8006d8c:	4423      	add	r3, r4
 8006d8e:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8006d92:	b90c      	cbnz	r4, 8006d98 <_Color2Index_16+0x44>
 8006d94:	b901      	cbnz	r1, 8006d98 <_Color2Index_16+0x44>
 8006d96:	b152      	cbz	r2, 8006dae <_Color2Index_16+0x5a>
 8006d98:	19ba      	adds	r2, r7, r6
 8006d9a:	4415      	add	r5, r2
 8006d9c:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
 8006da0:	4415      	add	r5, r2
 8006da2:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8006da6:	fbb5 f3f3 	udiv	r3, r5, r3
 8006daa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006dae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006db0 <_Index2Color_16>:
 8006db0:	b530      	push	{r4, r5, lr}
 8006db2:	f3c0 0240 	ubfx	r2, r0, #1, #1
 8006db6:	f3c0 0580 	ubfx	r5, r0, #2, #1
 8006dba:	f3c0 01c0 	ubfx	r1, r0, #3, #1
 8006dbe:	ea02 0300 	and.w	r3, r2, r0
 8006dc2:	ea05 0400 	and.w	r4, r5, r0
 8006dc6:	4008      	ands	r0, r1
 8006dc8:	ebc0 11c1 	rsb	r1, r0, r1, lsl #7
 8006dcc:	ebc4 15c5 	rsb	r5, r4, r5, lsl #7
 8006dd0:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
 8006dd4:	eb05 14c4 	add.w	r4, r5, r4, lsl #7
 8006dd8:	ebc3 12c2 	rsb	r2, r3, r2, lsl #7
 8006ddc:	0400      	lsls	r0, r0, #16
 8006dde:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8006de2:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
 8006de6:	4318      	orrs	r0, r3
 8006de8:	bd30      	pop	{r4, r5, pc}

08006dea <_GetIndexMask_16>:
 8006dea:	200f      	movs	r0, #15
 8006dec:	4770      	bx	lr
	...

08006df0 <WM_GetDesktopWindow>:
 8006df0:	4b03      	ldr	r3, [pc, #12]	; (8006e00 <WM_GetDesktopWindow+0x10>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	7c5a      	ldrb	r2, [r3, #17]
 8006df6:	4b03      	ldr	r3, [pc, #12]	; (8006e04 <WM_GetDesktopWindow+0x14>)
 8006df8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	20000028 	.word	0x20000028
 8006e04:	20028f38 	.word	0x20028f38

08006e08 <WM_GetFirstChild>:
 8006e08:	b508      	push	{r3, lr}
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	b110      	cbz	r0, 8006e14 <WM_GetFirstChild+0xc>
 8006e0e:	f7ff f9e7 	bl	80061e0 <GUI_ALLOC_h2p>
 8006e12:	69c3      	ldr	r3, [r0, #28]
 8006e14:	4618      	mov	r0, r3
 8006e16:	bd08      	pop	{r3, pc}

08006e18 <WM_GetParent>:
 8006e18:	b508      	push	{r3, lr}
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	b110      	cbz	r0, 8006e24 <WM_GetParent+0xc>
 8006e1e:	f7ff f9df 	bl	80061e0 <GUI_ALLOC_h2p>
 8006e22:	6983      	ldr	r3, [r0, #24]
 8006e24:	4618      	mov	r0, r3
 8006e26:	bd08      	pop	{r3, pc}

08006e28 <WM_BringToBottom>:
 8006e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	b087      	sub	sp, #28
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d039      	beq.n	8006ea8 <WM_BringToBottom+0x80>
 8006e34:	f7ff f9de 	bl	80061f4 <GUI_ALLOC_LockH>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	9001      	str	r0, [sp, #4]
 8006e3c:	c803      	ldmia	r0, {r0, r1}
 8006e3e:	ad04      	add	r5, sp, #16
 8006e40:	e885 0003 	stmia.w	r5, {r0, r1}
 8006e44:	a801      	add	r0, sp, #4
 8006e46:	6a1e      	ldr	r6, [r3, #32]
 8006e48:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8006e4c:	f7ff f9e0 	bl	8006210 <GUI_ALLOC_UnlockH>
 8006e50:	4620      	mov	r0, r4
 8006e52:	f001 fed4 	bl	8008bfe <WM__GetPrevSibling>
 8006e56:	4607      	mov	r7, r0
 8006e58:	b330      	cbz	r0, 8006ea8 <WM_BringToBottom+0x80>
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f7ff ffdc 	bl	8006e18 <WM_GetParent>
 8006e60:	f019 0f02 	tst.w	r9, #2
 8006e64:	4680      	mov	r8, r0
 8006e66:	d004      	beq.n	8006e72 <WM_BringToBottom+0x4a>
 8006e68:	4628      	mov	r0, r5
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	4632      	mov	r2, r6
 8006e6e:	f000 fb52 	bl	8007516 <WM__InvalidateRectEx>
 8006e72:	4620      	mov	r0, r4
 8006e74:	f7ff f9be 	bl	80061f4 <GUI_ALLOC_LockH>
 8006e78:	9001      	str	r0, [sp, #4]
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	f7ff f9ba 	bl	80061f4 <GUI_ALLOC_LockH>
 8006e80:	9003      	str	r0, [sp, #12]
 8006e82:	4638      	mov	r0, r7
 8006e84:	f7ff f9b6 	bl	80061f4 <GUI_ALLOC_LockH>
 8006e88:	9b03      	ldr	r3, [sp, #12]
 8006e8a:	9a01      	ldr	r2, [sp, #4]
 8006e8c:	69d9      	ldr	r1, [r3, #28]
 8006e8e:	6206      	str	r6, [r0, #32]
 8006e90:	9002      	str	r0, [sp, #8]
 8006e92:	6211      	str	r1, [r2, #32]
 8006e94:	a801      	add	r0, sp, #4
 8006e96:	61dc      	str	r4, [r3, #28]
 8006e98:	f7ff f9ba 	bl	8006210 <GUI_ALLOC_UnlockH>
 8006e9c:	a803      	add	r0, sp, #12
 8006e9e:	f7ff f9b7 	bl	8006210 <GUI_ALLOC_UnlockH>
 8006ea2:	a802      	add	r0, sp, #8
 8006ea4:	f7ff f9b4 	bl	8006210 <GUI_ALLOC_UnlockH>
 8006ea8:	b007      	add	sp, #28
 8006eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006eae <WM_SendToParent>:
 8006eae:	b538      	push	{r3, r4, r5, lr}
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	b141      	cbz	r1, 8006ec8 <WM_SendToParent+0x1a>
 8006eb6:	f7ff ffaf 	bl	8006e18 <WM_GetParent>
 8006eba:	b128      	cbz	r0, 8006ec8 <WM_SendToParent+0x1a>
 8006ebc:	60a5      	str	r5, [r4, #8]
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ec4:	f001 beae 	b.w	8008c24 <WM__SendMessage>
 8006ec8:	bd38      	pop	{r3, r4, r5, pc}
	...

08006ecc <_OnExit>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4b19      	ldr	r3, [pc, #100]	; (8006f34 <_OnExit+0x68>)
 8006ed0:	4d19      	ldr	r5, [pc, #100]	; (8006f38 <_OnExit+0x6c>)
 8006ed2:	4a1a      	ldr	r2, [pc, #104]	; (8006f3c <_OnExit+0x70>)
 8006ed4:	481a      	ldr	r0, [pc, #104]	; (8006f40 <_OnExit+0x74>)
 8006ed6:	2400      	movs	r4, #0
 8006ed8:	701c      	strb	r4, [r3, #0]
 8006eda:	4b1a      	ldr	r3, [pc, #104]	; (8006f44 <_OnExit+0x78>)
 8006edc:	6014      	str	r4, [r2, #0]
 8006ede:	601c      	str	r4, [r3, #0]
 8006ee0:	4b19      	ldr	r3, [pc, #100]	; (8006f48 <_OnExit+0x7c>)
 8006ee2:	6054      	str	r4, [r2, #4]
 8006ee4:	601c      	str	r4, [r3, #0]
 8006ee6:	4b19      	ldr	r3, [pc, #100]	; (8006f4c <_OnExit+0x80>)
 8006ee8:	601c      	str	r4, [r3, #0]
 8006eea:	605c      	str	r4, [r3, #4]
 8006eec:	4b18      	ldr	r3, [pc, #96]	; (8006f50 <_OnExit+0x84>)
 8006eee:	601c      	str	r4, [r3, #0]
 8006ef0:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <_OnExit+0x88>)
 8006ef2:	601c      	str	r4, [r3, #0]
 8006ef4:	4b18      	ldr	r3, [pc, #96]	; (8006f58 <_OnExit+0x8c>)
 8006ef6:	601c      	str	r4, [r3, #0]
 8006ef8:	4b18      	ldr	r3, [pc, #96]	; (8006f5c <_OnExit+0x90>)
 8006efa:	601c      	str	r4, [r3, #0]
 8006efc:	4b18      	ldr	r3, [pc, #96]	; (8006f60 <_OnExit+0x94>)
 8006efe:	4621      	mov	r1, r4
 8006f00:	601c      	str	r4, [r3, #0]
 8006f02:	2218      	movs	r2, #24
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	4798      	blx	r3
 8006f08:	4b16      	ldr	r3, [pc, #88]	; (8006f64 <_OnExit+0x98>)
 8006f0a:	4817      	ldr	r0, [pc, #92]	; (8006f68 <_OnExit+0x9c>)
 8006f0c:	601c      	str	r4, [r3, #0]
 8006f0e:	4b17      	ldr	r3, [pc, #92]	; (8006f6c <_OnExit+0xa0>)
 8006f10:	4621      	mov	r1, r4
 8006f12:	601c      	str	r4, [r3, #0]
 8006f14:	605c      	str	r4, [r3, #4]
 8006f16:	2210      	movs	r2, #16
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	4798      	blx	r3
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	4814      	ldr	r0, [pc, #80]	; (8006f70 <_OnExit+0xa4>)
 8006f20:	4621      	mov	r1, r4
 8006f22:	2210      	movs	r2, #16
 8006f24:	4798      	blx	r3
 8006f26:	682b      	ldr	r3, [r5, #0]
 8006f28:	4812      	ldr	r0, [pc, #72]	; (8006f74 <_OnExit+0xa8>)
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	2210      	movs	r2, #16
 8006f2e:	4798      	blx	r3
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	20028c18 	.word	0x20028c18
 8006f38:	20000018 	.word	0x20000018
 8006f3c:	20028f48 	.word	0x20028f48
 8006f40:	20028bfc 	.word	0x20028bfc
 8006f44:	20028bf8 	.word	0x20028bf8
 8006f48:	20028f74 	.word	0x20028f74
 8006f4c:	20028f7c 	.word	0x20028f7c
 8006f50:	20028f88 	.word	0x20028f88
 8006f54:	20028f34 	.word	0x20028f34
 8006f58:	20028f68 	.word	0x20028f68
 8006f5c:	20028f78 	.word	0x20028f78
 8006f60:	20028c14 	.word	0x20028c14
 8006f64:	20028f44 	.word	0x20028f44
 8006f68:	20028fac 	.word	0x20028fac
 8006f6c:	20028f38 	.word	0x20028f38
 8006f70:	20028f9c 	.word	0x20028f9c
 8006f74:	20028f8c 	.word	0x20028f8c

08006f78 <_Findy1>:
 8006f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	460c      	mov	r4, r1
 8006f80:	4616      	mov	r6, r2
 8006f82:	2d00      	cmp	r5, #0
 8006f84:	d04c      	beq.n	8007020 <_Findy1+0xa8>
 8006f86:	4628      	mov	r0, r5
 8006f88:	f7ff f934 	bl	80061f4 <GUI_ALLOC_LockH>
 8006f8c:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8006f8e:	9001      	str	r0, [sp, #4]
 8006f90:	07bb      	lsls	r3, r7, #30
 8006f92:	4601      	mov	r1, r0
 8006f94:	d53d      	bpl.n	8007012 <_Findy1+0x9a>
 8006f96:	ad02      	add	r5, sp, #8
 8006f98:	b126      	cbz	r6, 8006fa4 <_Findy1+0x2c>
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	4632      	mov	r2, r6
 8006f9e:	f7fd ffad 	bl	8004efc <GUI__IntersectRects>
 8006fa2:	e002      	b.n	8006faa <_Findy1+0x32>
 8006fa4:	c803      	ldmia	r0, {r0, r1}
 8006fa6:	e885 0003 	stmia.w	r5, {r0, r1}
 8006faa:	4620      	mov	r0, r4
 8006fac:	4629      	mov	r1, r5
 8006fae:	f7fe fd3d 	bl	8005a2c <GUI_RectsIntersect>
 8006fb2:	b370      	cbz	r0, 8007012 <_Findy1+0x9a>
 8006fb4:	f017 0f01 	tst.w	r7, #1
 8006fb8:	9b01      	ldr	r3, [sp, #4]
 8006fba:	d11e      	bne.n	8006ffa <_Findy1+0x82>
 8006fbc:	b13e      	cbz	r6, 8006fce <_Findy1+0x56>
 8006fbe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8006fc2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	bfa8      	it	ge
 8006fca:	4613      	movge	r3, r2
 8006fcc:	e001      	b.n	8006fd2 <_Findy1+0x5a>
 8006fce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006fd2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8006fdc:	dd06      	ble.n	8006fec <_Findy1+0x74>
 8006fde:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8006fe2:	b219      	sxth	r1, r3
 8006fe4:	428a      	cmp	r2, r1
 8006fe6:	db14      	blt.n	8007012 <_Findy1+0x9a>
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	e004      	b.n	8006ff6 <_Findy1+0x7e>
 8006fec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8006ff0:	b219      	sxth	r1, r3
 8006ff2:	428a      	cmp	r2, r1
 8006ff4:	dd0d      	ble.n	8007012 <_Findy1+0x9a>
 8006ff6:	80e3      	strh	r3, [r4, #6]
 8006ff8:	e00b      	b.n	8007012 <_Findy1+0x9a>
 8006ffa:	69df      	ldr	r7, [r3, #28]
 8006ffc:	b14f      	cbz	r7, 8007012 <_Findy1+0x9a>
 8006ffe:	4638      	mov	r0, r7
 8007000:	4621      	mov	r1, r4
 8007002:	462a      	mov	r2, r5
 8007004:	f7ff ffb8 	bl	8006f78 <_Findy1>
 8007008:	4638      	mov	r0, r7
 800700a:	f7ff f8e9 	bl	80061e0 <GUI_ALLOC_h2p>
 800700e:	6a07      	ldr	r7, [r0, #32]
 8007010:	e7f4      	b.n	8006ffc <_Findy1+0x84>
 8007012:	a804      	add	r0, sp, #16
 8007014:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8007018:	6a1d      	ldr	r5, [r3, #32]
 800701a:	f7ff f8f9 	bl	8006210 <GUI_ALLOC_UnlockH>
 800701e:	e7b0      	b.n	8006f82 <_Findy1+0xa>
 8007020:	b005      	add	sp, #20
 8007022:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007024 <_Findx0>:
 8007024:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007028:	4604      	mov	r4, r0
 800702a:	460f      	mov	r7, r1
 800702c:	4690      	mov	r8, r2
 800702e:	2500      	movs	r5, #0
 8007030:	2c00      	cmp	r4, #0
 8007032:	d037      	beq.n	80070a4 <_Findx0+0x80>
 8007034:	4620      	mov	r0, r4
 8007036:	f7ff f8dd 	bl	80061f4 <GUI_ALLOC_LockH>
 800703a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800703c:	9001      	str	r0, [sp, #4]
 800703e:	07b2      	lsls	r2, r6, #30
 8007040:	4601      	mov	r1, r0
 8007042:	d528      	bpl.n	8007096 <_Findx0+0x72>
 8007044:	ac02      	add	r4, sp, #8
 8007046:	f1b8 0f00 	cmp.w	r8, #0
 800704a:	d004      	beq.n	8007056 <_Findx0+0x32>
 800704c:	4620      	mov	r0, r4
 800704e:	4642      	mov	r2, r8
 8007050:	f7fd ff54 	bl	8004efc <GUI__IntersectRects>
 8007054:	e002      	b.n	800705c <_Findx0+0x38>
 8007056:	c803      	ldmia	r0, {r0, r1}
 8007058:	e884 0003 	stmia.w	r4, {r0, r1}
 800705c:	4638      	mov	r0, r7
 800705e:	4621      	mov	r1, r4
 8007060:	f7fe fce4 	bl	8005a2c <GUI_RectsIntersect>
 8007064:	b1b8      	cbz	r0, 8007096 <_Findx0+0x72>
 8007066:	07f3      	lsls	r3, r6, #31
 8007068:	d405      	bmi.n	8007076 <_Findx0+0x52>
 800706a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	803b      	strh	r3, [r7, #0]
 8007072:	2501      	movs	r5, #1
 8007074:	e00f      	b.n	8007096 <_Findx0+0x72>
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	69de      	ldr	r6, [r3, #28]
 800707a:	b166      	cbz	r6, 8007096 <_Findx0+0x72>
 800707c:	4630      	mov	r0, r6
 800707e:	4639      	mov	r1, r7
 8007080:	4622      	mov	r2, r4
 8007082:	f7ff ffcf 	bl	8007024 <_Findx0>
 8007086:	2800      	cmp	r0, #0
 8007088:	4630      	mov	r0, r6
 800708a:	bf18      	it	ne
 800708c:	2501      	movne	r5, #1
 800708e:	f7ff f8a7 	bl	80061e0 <GUI_ALLOC_h2p>
 8007092:	6a06      	ldr	r6, [r0, #32]
 8007094:	e7f1      	b.n	800707a <_Findx0+0x56>
 8007096:	a804      	add	r0, sp, #16
 8007098:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800709c:	6a1c      	ldr	r4, [r3, #32]
 800709e:	f7ff f8b7 	bl	8006210 <GUI_ALLOC_UnlockH>
 80070a2:	e7c5      	b.n	8007030 <_Findx0+0xc>
 80070a4:	4628      	mov	r0, r5
 80070a6:	b004      	add	sp, #16
 80070a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080070ac <_Findx1>:
 80070ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ae:	4604      	mov	r4, r0
 80070b0:	b085      	sub	sp, #20
 80070b2:	460e      	mov	r6, r1
 80070b4:	4617      	mov	r7, r2
 80070b6:	2c00      	cmp	r4, #0
 80070b8:	d031      	beq.n	800711e <_Findx1+0x72>
 80070ba:	4620      	mov	r0, r4
 80070bc:	f7ff f89a 	bl	80061f4 <GUI_ALLOC_LockH>
 80070c0:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80070c2:	9001      	str	r0, [sp, #4]
 80070c4:	07aa      	lsls	r2, r5, #30
 80070c6:	4601      	mov	r1, r0
 80070c8:	d522      	bpl.n	8007110 <_Findx1+0x64>
 80070ca:	ac02      	add	r4, sp, #8
 80070cc:	b127      	cbz	r7, 80070d8 <_Findx1+0x2c>
 80070ce:	4620      	mov	r0, r4
 80070d0:	463a      	mov	r2, r7
 80070d2:	f7fd ff13 	bl	8004efc <GUI__IntersectRects>
 80070d6:	e002      	b.n	80070de <_Findx1+0x32>
 80070d8:	c803      	ldmia	r0, {r0, r1}
 80070da:	e884 0003 	stmia.w	r4, {r0, r1}
 80070de:	4630      	mov	r0, r6
 80070e0:	4621      	mov	r1, r4
 80070e2:	f7fe fca3 	bl	8005a2c <GUI_RectsIntersect>
 80070e6:	b198      	cbz	r0, 8007110 <_Findx1+0x64>
 80070e8:	07eb      	lsls	r3, r5, #31
 80070ea:	d404      	bmi.n	80070f6 <_Findx1+0x4a>
 80070ec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	80b3      	strh	r3, [r6, #4]
 80070f4:	e00c      	b.n	8007110 <_Findx1+0x64>
 80070f6:	9b01      	ldr	r3, [sp, #4]
 80070f8:	69dd      	ldr	r5, [r3, #28]
 80070fa:	b14d      	cbz	r5, 8007110 <_Findx1+0x64>
 80070fc:	4628      	mov	r0, r5
 80070fe:	4631      	mov	r1, r6
 8007100:	4622      	mov	r2, r4
 8007102:	f7ff ffd3 	bl	80070ac <_Findx1>
 8007106:	4628      	mov	r0, r5
 8007108:	f7ff f86a 	bl	80061e0 <GUI_ALLOC_h2p>
 800710c:	6a05      	ldr	r5, [r0, #32]
 800710e:	e7f4      	b.n	80070fa <_Findx1+0x4e>
 8007110:	a804      	add	r0, sp, #16
 8007112:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8007116:	6a1c      	ldr	r4, [r3, #32]
 8007118:	f7ff f87a 	bl	8006210 <GUI_ALLOC_UnlockH>
 800711c:	e7cb      	b.n	80070b6 <_Findx1+0xa>
 800711e:	b005      	add	sp, #20
 8007120:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007124 <WM__ClipAtParentBorders>:
 8007124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007126:	4607      	mov	r7, r0
 8007128:	460d      	mov	r5, r1
 800712a:	4628      	mov	r0, r5
 800712c:	f7ff f862 	bl	80061f4 <GUI_ALLOC_LockH>
 8007130:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007132:	ac02      	add	r4, sp, #8
 8007134:	f013 0602 	ands.w	r6, r3, #2
 8007138:	4601      	mov	r1, r0
 800713a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800713e:	d104      	bne.n	800714a <WM__ClipAtParentBorders+0x26>
 8007140:	4620      	mov	r0, r4
 8007142:	f7ff f865 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007146:	4630      	mov	r0, r6
 8007148:	e016      	b.n	8007178 <WM__ClipAtParentBorders+0x54>
 800714a:	4638      	mov	r0, r7
 800714c:	f7fd feb8 	bl	8004ec0 <GUI__IntersectRect>
 8007150:	9b01      	ldr	r3, [sp, #4]
 8007152:	699e      	ldr	r6, [r3, #24]
 8007154:	4620      	mov	r0, r4
 8007156:	b956      	cbnz	r6, 800716e <WM__ClipAtParentBorders+0x4a>
 8007158:	f7ff f85a 	bl	8006210 <GUI_ALLOC_UnlockH>
 800715c:	4b07      	ldr	r3, [pc, #28]	; (800717c <WM__ClipAtParentBorders+0x58>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	4295      	cmp	r5, r2
 8007162:	d008      	beq.n	8007176 <WM__ClipAtParentBorders+0x52>
 8007164:	6858      	ldr	r0, [r3, #4]
 8007166:	1a2b      	subs	r3, r5, r0
 8007168:	4258      	negs	r0, r3
 800716a:	4158      	adcs	r0, r3
 800716c:	e004      	b.n	8007178 <WM__ClipAtParentBorders+0x54>
 800716e:	f7ff f84f 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007172:	4635      	mov	r5, r6
 8007174:	e7d9      	b.n	800712a <WM__ClipAtParentBorders+0x6>
 8007176:	2001      	movs	r0, #1
 8007178:	b003      	add	sp, #12
 800717a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800717c:	20028f38 	.word	0x20028f38

08007180 <WM__InsertWindowIntoList>:
 8007180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007182:	4604      	mov	r4, r0
 8007184:	b085      	sub	sp, #20
 8007186:	460d      	mov	r5, r1
 8007188:	2900      	cmp	r1, #0
 800718a:	d049      	beq.n	8007220 <WM__InsertWindowIntoList+0xa0>
 800718c:	f7ff f832 	bl	80061f4 <GUI_ALLOC_LockH>
 8007190:	2300      	movs	r3, #0
 8007192:	6203      	str	r3, [r0, #32]
 8007194:	6185      	str	r5, [r0, #24]
 8007196:	9001      	str	r0, [sp, #4]
 8007198:	4628      	mov	r0, r5
 800719a:	f7ff f82b 	bl	80061f4 <GUI_ALLOC_LockH>
 800719e:	9b01      	ldr	r3, [sp, #4]
 80071a0:	69c5      	ldr	r5, [r0, #28]
 80071a2:	9002      	str	r0, [sp, #8]
 80071a4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80071a6:	b92d      	cbnz	r5, 80071b4 <WM__InsertWindowIntoList+0x34>
 80071a8:	61c4      	str	r4, [r0, #28]
 80071aa:	a801      	add	r0, sp, #4
 80071ac:	f7ff f830 	bl	8006210 <GUI_ALLOC_UnlockH>
 80071b0:	a802      	add	r0, sp, #8
 80071b2:	e033      	b.n	800721c <WM__InsertWindowIntoList+0x9c>
 80071b4:	4628      	mov	r0, r5
 80071b6:	f7ff f81d 	bl	80061f4 <GUI_ALLOC_LockH>
 80071ba:	ae04      	add	r6, sp, #16
 80071bc:	f007 0708 	and.w	r7, r7, #8
 80071c0:	f846 0d04 	str.w	r0, [r6, #-4]!
 80071c4:	b977      	cbnz	r7, 80071e4 <WM__InsertWindowIntoList+0x64>
 80071c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80071c8:	071a      	lsls	r2, r3, #28
 80071ca:	d50b      	bpl.n	80071e4 <WM__InsertWindowIntoList+0x64>
 80071cc:	9b01      	ldr	r3, [sp, #4]
 80071ce:	621d      	str	r5, [r3, #32]
 80071d0:	9b02      	ldr	r3, [sp, #8]
 80071d2:	a801      	add	r0, sp, #4
 80071d4:	61dc      	str	r4, [r3, #28]
 80071d6:	f7ff f81b 	bl	8006210 <GUI_ALLOC_UnlockH>
 80071da:	a802      	add	r0, sp, #8
 80071dc:	f7ff f818 	bl	8006210 <GUI_ALLOC_UnlockH>
 80071e0:	4630      	mov	r0, r6
 80071e2:	e01b      	b.n	800721c <WM__InsertWindowIntoList+0x9c>
 80071e4:	a802      	add	r0, sp, #8
 80071e6:	f7ff f813 	bl	8006210 <GUI_ALLOC_UnlockH>
 80071ea:	4630      	mov	r0, r6
 80071ec:	f7ff f810 	bl	8006210 <GUI_ALLOC_UnlockH>
 80071f0:	4628      	mov	r0, r5
 80071f2:	f7fe fff5 	bl	80061e0 <GUI_ALLOC_h2p>
 80071f6:	9003      	str	r0, [sp, #12]
 80071f8:	9b03      	ldr	r3, [sp, #12]
 80071fa:	6a1d      	ldr	r5, [r3, #32]
 80071fc:	b90d      	cbnz	r5, 8007202 <WM__InsertWindowIntoList+0x82>
 80071fe:	621c      	str	r4, [r3, #32]
 8007200:	e00b      	b.n	800721a <WM__InsertWindowIntoList+0x9a>
 8007202:	4628      	mov	r0, r5
 8007204:	f7fe ffec 	bl	80061e0 <GUI_ALLOC_h2p>
 8007208:	2f00      	cmp	r7, #0
 800720a:	d1f4      	bne.n	80071f6 <WM__InsertWindowIntoList+0x76>
 800720c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800720e:	071b      	lsls	r3, r3, #28
 8007210:	d5f1      	bpl.n	80071f6 <WM__InsertWindowIntoList+0x76>
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	621c      	str	r4, [r3, #32]
 8007216:	9b01      	ldr	r3, [sp, #4]
 8007218:	621d      	str	r5, [r3, #32]
 800721a:	a801      	add	r0, sp, #4
 800721c:	f7fe fff8 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007220:	b005      	add	sp, #20
 8007222:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007224 <WM__Client2Screen>:
 8007224:	4603      	mov	r3, r0
 8007226:	4608      	mov	r0, r1
 8007228:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800722c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007230:	f7fe bbe3 	b.w	80059fa <GUI_MoveRect>

08007234 <_SetClipRectUserIntersect>:
 8007234:	4b11      	ldr	r3, [pc, #68]	; (800727c <_SetClipRectUserIntersect+0x48>)
 8007236:	b530      	push	{r4, r5, lr}
 8007238:	681c      	ldr	r4, [r3, #0]
 800723a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800723c:	b085      	sub	sp, #20
 800723e:	4605      	mov	r5, r0
 8007240:	b1ba      	cbz	r2, 8007272 <_SetClipRectUserIntersect+0x3e>
 8007242:	6810      	ldr	r0, [r2, #0]
 8007244:	6851      	ldr	r1, [r2, #4]
 8007246:	ab02      	add	r3, sp, #8
 8007248:	c303      	stmia	r3!, {r0, r1}
 800724a:	4b0d      	ldr	r3, [pc, #52]	; (8007280 <_SetClipRectUserIntersect+0x4c>)
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	b900      	cbnz	r0, 8007252 <_SetClipRectUserIntersect+0x1e>
 8007250:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007252:	f7fe ffcf 	bl	80061f4 <GUI_ALLOC_LockH>
 8007256:	ac04      	add	r4, sp, #16
 8007258:	a902      	add	r1, sp, #8
 800725a:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800725e:	f7ff ffe1 	bl	8007224 <WM__Client2Screen>
 8007262:	4620      	mov	r0, r4
 8007264:	f7fe ffd4 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007268:	a802      	add	r0, sp, #8
 800726a:	4629      	mov	r1, r5
 800726c:	f7fd fe28 	bl	8004ec0 <GUI__IntersectRect>
 8007270:	a802      	add	r0, sp, #8
 8007272:	f001 f9d7 	bl	8008624 <LCD_SetClipRectEx>
 8007276:	b005      	add	sp, #20
 8007278:	bd30      	pop	{r4, r5, pc}
 800727a:	bf00      	nop
 800727c:	20000028 	.word	0x20000028
 8007280:	20028f34 	.word	0x20028f34

08007284 <WM__ActivateClipRect>:
 8007284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007286:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <WM__ActivateClipRect+0x3c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800728e:	b10a      	cbz	r2, 8007294 <WM__ActivateClipRect+0x10>
 8007290:	480c      	ldr	r0, [pc, #48]	; (80072c4 <WM__ActivateClipRect+0x40>)
 8007292:	e011      	b.n	80072b8 <WM__ActivateClipRect+0x34>
 8007294:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007296:	f7fe ffad 	bl	80061f4 <GUI_ALLOC_LockH>
 800729a:	9001      	str	r0, [sp, #4]
 800729c:	c803      	ldmia	r0, {r0, r1}
 800729e:	ac02      	add	r4, sp, #8
 80072a0:	e884 0003 	stmia.w	r4, {r0, r1}
 80072a4:	a801      	add	r0, sp, #4
 80072a6:	f7fe ffb3 	bl	8006210 <GUI_ALLOC_UnlockH>
 80072aa:	4b07      	ldr	r3, [pc, #28]	; (80072c8 <WM__ActivateClipRect+0x44>)
 80072ac:	6819      	ldr	r1, [r3, #0]
 80072ae:	b111      	cbz	r1, 80072b6 <WM__ActivateClipRect+0x32>
 80072b0:	4620      	mov	r0, r4
 80072b2:	f7ff ff37 	bl	8007124 <WM__ClipAtParentBorders>
 80072b6:	4620      	mov	r0, r4
 80072b8:	f7ff ffbc 	bl	8007234 <_SetClipRectUserIntersect>
 80072bc:	b004      	add	sp, #16
 80072be:	bd10      	pop	{r4, pc}
 80072c0:	20000028 	.word	0x20000028
 80072c4:	20028c04 	.word	0x20028c04
 80072c8:	20028f34 	.word	0x20028f34

080072cc <WM__InvalidateDrawAndDescs>:
 80072cc:	b513      	push	{r0, r1, r4, lr}
 80072ce:	4604      	mov	r4, r0
 80072d0:	b300      	cbz	r0, 8007314 <WM__InvalidateDrawAndDescs+0x48>
 80072d2:	f7fe ff8f 	bl	80061f4 <GUI_ALLOC_LockH>
 80072d6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80072d8:	9001      	str	r0, [sp, #4]
 80072da:	0793      	lsls	r3, r2, #30
 80072dc:	d517      	bpl.n	800730e <WM__InvalidateDrawAndDescs+0x42>
 80072de:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80072e0:	b140      	cbz	r0, 80072f4 <WM__InvalidateDrawAndDescs+0x28>
 80072e2:	4b0d      	ldr	r3, [pc, #52]	; (8007318 <WM__InvalidateDrawAndDescs+0x4c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	42a3      	cmp	r3, r4
 80072e8:	d004      	beq.n	80072f4 <WM__InvalidateDrawAndDescs+0x28>
 80072ea:	f001 f967 	bl	80085bc <GUI_MEMDEV_Delete>
 80072ee:	9b01      	ldr	r3, [sp, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	625a      	str	r2, [r3, #36]	; 0x24
 80072f4:	4620      	mov	r0, r4
 80072f6:	f7ff fd87 	bl	8006e08 <WM_GetFirstChild>
 80072fa:	4604      	mov	r4, r0
 80072fc:	b13c      	cbz	r4, 800730e <WM__InvalidateDrawAndDescs+0x42>
 80072fe:	4620      	mov	r0, r4
 8007300:	f7ff ffe4 	bl	80072cc <WM__InvalidateDrawAndDescs>
 8007304:	4620      	mov	r0, r4
 8007306:	f7fe ff6b 	bl	80061e0 <GUI_ALLOC_h2p>
 800730a:	6a04      	ldr	r4, [r0, #32]
 800730c:	e7f6      	b.n	80072fc <WM__InvalidateDrawAndDescs+0x30>
 800730e:	a801      	add	r0, sp, #4
 8007310:	f7fe ff7e 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007314:	b002      	add	sp, #8
 8007316:	bd10      	pop	{r4, pc}
 8007318:	20028f84 	.word	0x20028f84

0800731c <WM__RectIsNZ>:
 800731c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007320:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8007324:	429a      	cmp	r2, r3
 8007326:	dc08      	bgt.n	800733a <WM__RectIsNZ+0x1e>
 8007328:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800732c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007330:	429a      	cmp	r2, r3
 8007332:	bfcc      	ite	gt
 8007334:	2000      	movgt	r0, #0
 8007336:	2001      	movle	r0, #1
 8007338:	4770      	bx	lr
 800733a:	2000      	movs	r0, #0
 800733c:	4770      	bx	lr

0800733e <WM__SendMsgNoData>:
 800733e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007340:	ab04      	add	r3, sp, #16
 8007342:	9001      	str	r0, [sp, #4]
 8007344:	f843 1d10 	str.w	r1, [r3, #-16]!
 8007348:	4669      	mov	r1, sp
 800734a:	f001 fc6b 	bl	8008c24 <WM__SendMessage>
 800734e:	b005      	add	sp, #20
 8007350:	f85d fb04 	ldr.w	pc, [sp], #4

08007354 <WM__GetClientRectWin>:
 8007354:	2300      	movs	r3, #0
 8007356:	800b      	strh	r3, [r1, #0]
 8007358:	8882      	ldrh	r2, [r0, #4]
 800735a:	804b      	strh	r3, [r1, #2]
 800735c:	8803      	ldrh	r3, [r0, #0]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	808b      	strh	r3, [r1, #4]
 8007362:	88c2      	ldrh	r2, [r0, #6]
 8007364:	8843      	ldrh	r3, [r0, #2]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	80cb      	strh	r3, [r1, #6]
 800736a:	4770      	bx	lr

0800736c <WM__GetTopLevelLayer>:
 800736c:	b510      	push	{r4, lr}
 800736e:	4604      	mov	r4, r0
 8007370:	f7fe ff36 	bl	80061e0 <GUI_ALLOC_h2p>
 8007374:	6980      	ldr	r0, [r0, #24]
 8007376:	2800      	cmp	r0, #0
 8007378:	d1f9      	bne.n	800736e <WM__GetTopLevelLayer+0x2>
 800737a:	4b05      	ldr	r3, [pc, #20]	; (8007390 <WM__GetTopLevelLayer+0x24>)
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4294      	cmp	r4, r2
 8007380:	d005      	beq.n	800738e <WM__GetTopLevelLayer+0x22>
 8007382:	6858      	ldr	r0, [r3, #4]
 8007384:	4284      	cmp	r4, r0
 8007386:	bf14      	ite	ne
 8007388:	f04f 30ff 	movne.w	r0, #4294967295
 800738c:	2001      	moveq	r0, #1
 800738e:	bd10      	pop	{r4, pc}
 8007390:	20028f38 	.word	0x20028f38

08007394 <_Invalidate1Abs>:
 8007394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007396:	b085      	sub	sp, #20
 8007398:	4606      	mov	r6, r0
 800739a:	460d      	mov	r5, r1
 800739c:	4617      	mov	r7, r2
 800739e:	f7fe ff1f 	bl	80061e0 <GUI_ALLOC_h2p>
 80073a2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80073a4:	9001      	str	r0, [sp, #4]
 80073a6:	07a3      	lsls	r3, r4, #30
 80073a8:	d53e      	bpl.n	8007428 <_Invalidate1Abs+0x94>
 80073aa:	4628      	mov	r0, r5
 80073ac:	f7ff ffb6 	bl	800731c <WM__RectIsNZ>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d039      	beq.n	8007428 <_Invalidate1Abs+0x94>
 80073b4:	f640 0301 	movw	r3, #2049	; 0x801
 80073b8:	4023      	ands	r3, r4
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d034      	beq.n	8007428 <_Invalidate1Abs+0x94>
 80073be:	4630      	mov	r0, r6
 80073c0:	f7fe ff18 	bl	80061f4 <GUI_ALLOC_LockH>
 80073c4:	ac02      	add	r4, sp, #8
 80073c6:	4602      	mov	r2, r0
 80073c8:	9001      	str	r0, [sp, #4]
 80073ca:	4629      	mov	r1, r5
 80073cc:	4620      	mov	r0, r4
 80073ce:	f7fd fd95 	bl	8004efc <GUI__IntersectRects>
 80073d2:	4620      	mov	r0, r4
 80073d4:	f7ff ffa2 	bl	800731c <WM__RectIsNZ>
 80073d8:	b318      	cbz	r0, 8007422 <_Invalidate1Abs+0x8e>
 80073da:	9b01      	ldr	r3, [sp, #4]
 80073dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073de:	f244 0120 	movw	r1, #16416	; 0x4020
 80073e2:	4011      	ands	r1, r2
 80073e4:	f103 0508 	add.w	r5, r3, #8
 80073e8:	b129      	cbz	r1, 80073f6 <_Invalidate1Abs+0x62>
 80073ea:	4628      	mov	r0, r5
 80073ec:	4629      	mov	r1, r5
 80073ee:	4622      	mov	r2, r4
 80073f0:	f7fe fad8 	bl	80059a4 <GUI_MergeRect>
 80073f4:	e015      	b.n	8007422 <_Invalidate1Abs+0x8e>
 80073f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80073fa:	4317      	orrs	r7, r2
 80073fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8007400:	629f      	str	r7, [r3, #40]	; 0x28
 8007402:	4b0a      	ldr	r3, [pc, #40]	; (800742c <_Invalidate1Abs+0x98>)
 8007404:	881a      	ldrh	r2, [r3, #0]
 8007406:	4630      	mov	r0, r6
 8007408:	3201      	adds	r2, #1
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	f7ff ffae 	bl	800736c <WM__GetTopLevelLayer>
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <_Invalidate1Abs+0x9c>)
 8007412:	2201      	movs	r2, #1
 8007414:	fa02 f000 	lsl.w	r0, r2, r0
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4302      	orrs	r2, r0
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	f001 fbb5 	bl	8008b8c <GUI_SignalEvent>
 8007422:	a801      	add	r0, sp, #4
 8007424:	f7fe fef4 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007428:	b005      	add	sp, #20
 800742a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800742c:	20028f50 	.word	0x20028f50
 8007430:	20028f60 	.word	0x20028f60

08007434 <WM__Invalidate1Abs>:
 8007434:	2220      	movs	r2, #32
 8007436:	f7ff bfad 	b.w	8007394 <_Invalidate1Abs>

0800743a <WM_InvalidateWindowAndDescsEx>:
 800743a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800743c:	460f      	mov	r7, r1
 800743e:	b085      	sub	sp, #20
 8007440:	4615      	mov	r5, r2
 8007442:	4606      	mov	r6, r0
 8007444:	b348      	cbz	r0, 800749a <WM_InvalidateWindowAndDescsEx+0x60>
 8007446:	f7fe fed5 	bl	80061f4 <GUI_ALLOC_LockH>
 800744a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800744c:	ac04      	add	r4, sp, #16
 800744e:	079b      	lsls	r3, r3, #30
 8007450:	4602      	mov	r2, r0
 8007452:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8007456:	d403      	bmi.n	8007460 <WM_InvalidateWindowAndDescsEx+0x26>
 8007458:	4620      	mov	r0, r4
 800745a:	f7fe fed9 	bl	8006210 <GUI_ALLOC_UnlockH>
 800745e:	e01c      	b.n	800749a <WM_InvalidateWindowAndDescsEx+0x60>
 8007460:	a802      	add	r0, sp, #8
 8007462:	4639      	mov	r1, r7
 8007464:	f7fd fd4a 	bl	8004efc <GUI__IntersectRects>
 8007468:	2800      	cmp	r0, #0
 800746a:	d0f5      	beq.n	8007458 <WM_InvalidateWindowAndDescsEx+0x1e>
 800746c:	4620      	mov	r0, r4
 800746e:	f7fe fecf 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007472:	4630      	mov	r0, r6
 8007474:	a902      	add	r1, sp, #8
 8007476:	462a      	mov	r2, r5
 8007478:	f7ff ff8c 	bl	8007394 <_Invalidate1Abs>
 800747c:	4630      	mov	r0, r6
 800747e:	f7ff fcc3 	bl	8006e08 <WM_GetFirstChild>
 8007482:	4604      	mov	r4, r0
 8007484:	b14c      	cbz	r4, 800749a <WM_InvalidateWindowAndDescsEx+0x60>
 8007486:	4620      	mov	r0, r4
 8007488:	a902      	add	r1, sp, #8
 800748a:	462a      	mov	r2, r5
 800748c:	f7ff ffd5 	bl	800743a <WM_InvalidateWindowAndDescsEx>
 8007490:	4620      	mov	r0, r4
 8007492:	f7fe fea5 	bl	80061e0 <GUI_ALLOC_h2p>
 8007496:	6a04      	ldr	r4, [r0, #32]
 8007498:	e7f4      	b.n	8007484 <WM_InvalidateWindowAndDescsEx+0x4a>
 800749a:	b005      	add	sp, #20
 800749c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800749e <WM__InvalidateRect>:
 800749e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80074a2:	4680      	mov	r8, r0
 80074a4:	4617      	mov	r7, r2
 80074a6:	461d      	mov	r5, r3
 80074a8:	460c      	mov	r4, r1
 80074aa:	2900      	cmp	r1, #0
 80074ac:	d030      	beq.n	8007510 <WM__InvalidateRect+0x72>
 80074ae:	4608      	mov	r0, r1
 80074b0:	f7fe fea0 	bl	80061f4 <GUI_ALLOC_LockH>
 80074b4:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80074b6:	9001      	str	r0, [sp, #4]
 80074b8:	07b3      	lsls	r3, r6, #30
 80074ba:	4602      	mov	r2, r0
 80074bc:	d525      	bpl.n	800750a <WM__InvalidateRect+0x6c>
 80074be:	a802      	add	r0, sp, #8
 80074c0:	4641      	mov	r1, r8
 80074c2:	f7fd fd1b 	bl	8004efc <GUI__IntersectRects>
 80074c6:	b300      	cbz	r0, 800750a <WM__InvalidateRect+0x6c>
 80074c8:	f640 0301 	movw	r3, #2049	; 0x801
 80074cc:	4033      	ands	r3, r6
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d107      	bne.n	80074e2 <WM__InvalidateRect+0x44>
 80074d2:	9b01      	ldr	r3, [sp, #4]
 80074d4:	a802      	add	r0, sp, #8
 80074d6:	6999      	ldr	r1, [r3, #24]
 80074d8:	6a1a      	ldr	r2, [r3, #32]
 80074da:	462b      	mov	r3, r5
 80074dc:	f7ff ffdf 	bl	800749e <WM__InvalidateRect>
 80074e0:	e004      	b.n	80074ec <WM__InvalidateRect+0x4e>
 80074e2:	4620      	mov	r0, r4
 80074e4:	a902      	add	r1, sp, #8
 80074e6:	462a      	mov	r2, r5
 80074e8:	f7ff ff54 	bl	8007394 <_Invalidate1Abs>
 80074ec:	9b01      	ldr	r3, [sp, #4]
 80074ee:	69dc      	ldr	r4, [r3, #28]
 80074f0:	b15c      	cbz	r4, 800750a <WM__InvalidateRect+0x6c>
 80074f2:	42bc      	cmp	r4, r7
 80074f4:	d009      	beq.n	800750a <WM__InvalidateRect+0x6c>
 80074f6:	4620      	mov	r0, r4
 80074f8:	a902      	add	r1, sp, #8
 80074fa:	462a      	mov	r2, r5
 80074fc:	f7ff ff9d 	bl	800743a <WM_InvalidateWindowAndDescsEx>
 8007500:	4620      	mov	r0, r4
 8007502:	f7fe fe6d 	bl	80061e0 <GUI_ALLOC_h2p>
 8007506:	6a04      	ldr	r4, [r0, #32]
 8007508:	e7f2      	b.n	80074f0 <WM__InvalidateRect+0x52>
 800750a:	a801      	add	r0, sp, #4
 800750c:	f7fe fe80 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007510:	b004      	add	sp, #16
 8007512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007516 <WM__InvalidateRectEx>:
 8007516:	2320      	movs	r3, #32
 8007518:	f7ff bfc1 	b.w	800749e <WM__InvalidateRect>

0800751c <WM_InvalidateRect>:
 800751c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800751e:	460f      	mov	r7, r1
 8007520:	b087      	sub	sp, #28
 8007522:	4605      	mov	r5, r0
 8007524:	2800      	cmp	r0, #0
 8007526:	d033      	beq.n	8007590 <WM_InvalidateRect+0x74>
 8007528:	f7fe fe64 	bl	80061f4 <GUI_ALLOC_LockH>
 800752c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800752e:	9001      	str	r0, [sp, #4]
 8007530:	07b2      	lsls	r2, r6, #30
 8007532:	d52a      	bpl.n	800758a <WM_InvalidateRect+0x6e>
 8007534:	c803      	ldmia	r0, {r0, r1}
 8007536:	ac04      	add	r4, sp, #16
 8007538:	03f3      	lsls	r3, r6, #15
 800753a:	e884 0003 	stmia.w	r4, {r0, r1}
 800753e:	d502      	bpl.n	8007546 <WM_InvalidateRect+0x2a>
 8007540:	4628      	mov	r0, r5
 8007542:	f7ff fec3 	bl	80072cc <WM__InvalidateDrawAndDescs>
 8007546:	b15f      	cbz	r7, 8007560 <WM_InvalidateRect+0x44>
 8007548:	6838      	ldr	r0, [r7, #0]
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	ab02      	add	r3, sp, #8
 800754e:	c303      	stmia	r3!, {r0, r1}
 8007550:	9801      	ldr	r0, [sp, #4]
 8007552:	a902      	add	r1, sp, #8
 8007554:	f7ff fe66 	bl	8007224 <WM__Client2Screen>
 8007558:	4620      	mov	r0, r4
 800755a:	a902      	add	r1, sp, #8
 800755c:	f7fd fcb0 	bl	8004ec0 <GUI__IntersectRect>
 8007560:	4620      	mov	r0, r4
 8007562:	4629      	mov	r1, r5
 8007564:	f7ff fdde 	bl	8007124 <WM__ClipAtParentBorders>
 8007568:	b178      	cbz	r0, 800758a <WM_InvalidateRect+0x6e>
 800756a:	f640 0301 	movw	r3, #2049	; 0x801
 800756e:	4033      	ands	r3, r6
 8007570:	2b01      	cmp	r3, #1
 8007572:	d106      	bne.n	8007582 <WM_InvalidateRect+0x66>
 8007574:	9b01      	ldr	r3, [sp, #4]
 8007576:	4620      	mov	r0, r4
 8007578:	6999      	ldr	r1, [r3, #24]
 800757a:	6a1a      	ldr	r2, [r3, #32]
 800757c:	f7ff ffcb 	bl	8007516 <WM__InvalidateRectEx>
 8007580:	e003      	b.n	800758a <WM_InvalidateRect+0x6e>
 8007582:	4628      	mov	r0, r5
 8007584:	4621      	mov	r1, r4
 8007586:	f7ff ff55 	bl	8007434 <WM__Invalidate1Abs>
 800758a:	a801      	add	r0, sp, #4
 800758c:	f7fe fe40 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007590:	b007      	add	sp, #28
 8007592:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007594 <WM_InvalidateWindow>:
 8007594:	2100      	movs	r1, #0
 8007596:	f7ff bfc1 	b.w	800751c <WM_InvalidateRect>

0800759a <WM__SelectTopLevelLayer>:
 800759a:	b508      	push	{r3, lr}
 800759c:	f7ff fee6 	bl	800736c <WM__GetTopLevelLayer>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	db03      	blt.n	80075ac <WM__SelectTopLevelLayer+0x12>
 80075a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80075a8:	f7fd bf3a 	b.w	8005420 <GUI_SelectLayer>
 80075ac:	bd08      	pop	{r3, pc}
	...

080075b0 <WM_SelectWindow>:
 80075b0:	4a0d      	ldr	r2, [pc, #52]	; (80075e8 <WM_SelectWindow+0x38>)
 80075b2:	6813      	ldr	r3, [r2, #0]
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80075b8:	4604      	mov	r4, r0
 80075ba:	4616      	mov	r6, r2
 80075bc:	b908      	cbnz	r0, 80075c2 <WM_SelectWindow+0x12>
 80075be:	4a0b      	ldr	r2, [pc, #44]	; (80075ec <WM_SelectWindow+0x3c>)
 80075c0:	6814      	ldr	r4, [r2, #0]
 80075c2:	649c      	str	r4, [r3, #72]	; 0x48
 80075c4:	4620      	mov	r0, r4
 80075c6:	f7ff ffe8 	bl	800759a <WM__SelectTopLevelLayer>
 80075ca:	f7fd fbad 	bl	8004d28 <LCD_SetClipRectMax>
 80075ce:	4620      	mov	r0, r4
 80075d0:	f7fe fe06 	bl	80061e0 <GUI_ALLOC_h2p>
 80075d4:	6833      	ldr	r3, [r6, #0]
 80075d6:	f9b0 1000 	ldrsh.w	r1, [r0]
 80075da:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80075de:	64d9      	str	r1, [r3, #76]	; 0x4c
 80075e0:	651a      	str	r2, [r3, #80]	; 0x50
 80075e2:	4628      	mov	r0, r5
 80075e4:	bd70      	pop	{r4, r5, r6, pc}
 80075e6:	bf00      	nop
 80075e8:	20000028 	.word	0x20000028
 80075ec:	20028f54 	.word	0x20028f54

080075f0 <WM_CreateWindowAsChild>:
 80075f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075f6:	469b      	mov	fp, r3
 80075f8:	4b4b      	ldr	r3, [pc, #300]	; (8007728 <WM_CreateWindowAsChild+0x138>)
 80075fa:	4607      	mov	r7, r0
 80075fc:	4688      	mov	r8, r1
 80075fe:	4692      	mov	sl, r2
 8007600:	681e      	ldr	r6, [r3, #0]
 8007602:	bb65      	cbnz	r5, 800765e <WM_CreateWindowAsChild+0x6e>
 8007604:	4b49      	ldr	r3, [pc, #292]	; (800772c <WM_CreateWindowAsChild+0x13c>)
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	b363      	cbz	r3, 8007664 <WM_CreateWindowAsChild+0x74>
 800760a:	4b49      	ldr	r3, [pc, #292]	; (8007730 <WM_CreateWindowAsChild+0x140>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	7c5a      	ldrb	r2, [r3, #17]
 8007610:	4b48      	ldr	r3, [pc, #288]	; (8007734 <WM_CreateWindowAsChild+0x144>)
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	d024      	beq.n	8007664 <WM_CreateWindowAsChild+0x74>
 800761a:	b31b      	cbz	r3, 8007664 <WM_CreateWindowAsChild+0x74>
 800761c:	461d      	mov	r5, r3
 800761e:	4628      	mov	r0, r5
 8007620:	f7fe fde8 	bl	80061f4 <GUI_ALLOC_LockH>
 8007624:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007628:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800762c:	9001      	str	r0, [sp, #4]
 800762e:	4417      	add	r7, r2
 8007630:	4498      	add	r8, r3
 8007632:	f1ba 0f00 	cmp.w	sl, #0
 8007636:	d105      	bne.n	8007644 <WM_CreateWindowAsChild+0x54>
 8007638:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 800763c:	ebc2 0a0a 	rsb	sl, r2, sl
 8007640:	f10a 0a01 	add.w	sl, sl, #1
 8007644:	f1bb 0f00 	cmp.w	fp, #0
 8007648:	d105      	bne.n	8007656 <WM_CreateWindowAsChild+0x66>
 800764a:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800764e:	ebc3 0b0b 	rsb	fp, r3, fp
 8007652:	f10b 0b01 	add.w	fp, fp, #1
 8007656:	a801      	add	r0, sp, #4
 8007658:	f7fe fdda 	bl	8006210 <GUI_ALLOC_UnlockH>
 800765c:	e002      	b.n	8007664 <WM_CreateWindowAsChild+0x74>
 800765e:	1c6b      	adds	r3, r5, #1
 8007660:	d1dd      	bne.n	800761e <WM_CreateWindowAsChild+0x2e>
 8007662:	2500      	movs	r5, #0
 8007664:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007666:	302c      	adds	r0, #44	; 0x2c
 8007668:	f7fe ff54 	bl	8006514 <GUI_ALLOC_AllocZero>
 800766c:	4604      	mov	r4, r0
 800766e:	2800      	cmp	r0, #0
 8007670:	d056      	beq.n	8007720 <WM_CreateWindowAsChild+0x130>
 8007672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007674:	431e      	orrs	r6, r3
 8007676:	4b2d      	ldr	r3, [pc, #180]	; (800772c <WM_CreateWindowAsChild+0x13c>)
 8007678:	881a      	ldrh	r2, [r3, #0]
 800767a:	3201      	adds	r2, #1
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	f7fe fdb9 	bl	80061f4 <GUI_ALLOC_LockH>
 8007682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007684:	6103      	str	r3, [r0, #16]
 8007686:	f10d 0908 	add.w	r9, sp, #8
 800768a:	4b2b      	ldr	r3, [pc, #172]	; (8007738 <WM_CreateWindowAsChild+0x148>)
 800768c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800768e:	f849 0d08 	str.w	r0, [r9, #-8]!
 8007692:	4033      	ands	r3, r6
 8007694:	8007      	strh	r7, [r0, #0]
 8007696:	f8a0 8002 	strh.w	r8, [r0, #2]
 800769a:	4457      	add	r7, sl
 800769c:	44d8      	add	r8, fp
 800769e:	4313      	orrs	r3, r2
 80076a0:	3f01      	subs	r7, #1
 80076a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80076a6:	6283      	str	r3, [r0, #40]	; 0x28
 80076a8:	8087      	strh	r7, [r0, #4]
 80076aa:	f8a0 8006 	strh.w	r8, [r0, #6]
 80076ae:	4668      	mov	r0, sp
 80076b0:	f7fe fdae 	bl	8006210 <GUI_ALLOC_UnlockH>
 80076b4:	4b21      	ldr	r3, [pc, #132]	; (800773c <WM_CreateWindowAsChild+0x14c>)
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	b148      	cbz	r0, 80076ce <WM_CreateWindowAsChild+0xde>
 80076ba:	f7fe fd91 	bl	80061e0 <GUI_ALLOC_h2p>
 80076be:	4607      	mov	r7, r0
 80076c0:	4620      	mov	r0, r4
 80076c2:	f7fe fd8d 	bl	80061e0 <GUI_ALLOC_h2p>
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	6143      	str	r3, [r0, #20]
 80076ca:	617c      	str	r4, [r7, #20]
 80076cc:	e000      	b.n	80076d0 <WM_CreateWindowAsChild+0xe0>
 80076ce:	601c      	str	r4, [r3, #0]
 80076d0:	4629      	mov	r1, r5
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7ff fd54 	bl	8007180 <WM__InsertWindowIntoList>
 80076d8:	06b5      	lsls	r5, r6, #26
 80076da:	d502      	bpl.n	80076e2 <WM_CreateWindowAsChild+0xf2>
 80076dc:	4620      	mov	r0, r4
 80076de:	f7ff ff67 	bl	80075b0 <WM_SelectWindow>
 80076e2:	07f0      	lsls	r0, r6, #31
 80076e4:	d503      	bpl.n	80076ee <WM_CreateWindowAsChild+0xfe>
 80076e6:	4b16      	ldr	r3, [pc, #88]	; (8007740 <WM_CreateWindowAsChild+0x150>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	3201      	adds	r2, #1
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	0671      	lsls	r1, r6, #25
 80076f0:	d502      	bpl.n	80076f8 <WM_CreateWindowAsChild+0x108>
 80076f2:	4620      	mov	r0, r4
 80076f4:	f7ff fb98 	bl	8006e28 <WM_BringToBottom>
 80076f8:	07b2      	lsls	r2, r6, #30
 80076fa:	d50d      	bpl.n	8007718 <WM_CreateWindowAsChild+0x128>
 80076fc:	4620      	mov	r0, r4
 80076fe:	f7fe fd79 	bl	80061f4 <GUI_ALLOC_LockH>
 8007702:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007704:	9000      	str	r0, [sp, #0]
 8007706:	f043 0302 	orr.w	r3, r3, #2
 800770a:	6283      	str	r3, [r0, #40]	; 0x28
 800770c:	4668      	mov	r0, sp
 800770e:	f7fe fd7f 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007712:	4620      	mov	r0, r4
 8007714:	f7ff ff3e 	bl	8007594 <WM_InvalidateWindow>
 8007718:	4620      	mov	r0, r4
 800771a:	2101      	movs	r1, #1
 800771c:	f7ff fe0f 	bl	800733e <WM__SendMsgNoData>
 8007720:	4620      	mov	r0, r4
 8007722:	b003      	add	sp, #12
 8007724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007728:	20028f68 	.word	0x20028f68
 800772c:	20028f30 	.word	0x20028f30
 8007730:	20000028 	.word	0x20000028
 8007734:	20028f38 	.word	0x20028f38
 8007738:	003f3f9f 	.word	0x003f3f9f
 800773c:	20028f54 	.word	0x20028f54
 8007740:	20028f88 	.word	0x20028f88

08007744 <WM__GetNextIVR>:
 8007744:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007748:	4f5d      	ldr	r7, [pc, #372]	; (80078c0 <WM__GetNextIVR+0x17c>)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8007750:	2800      	cmp	r0, #0
 8007752:	f000 80b2 	beq.w	80078ba <WM__GetNextIVR+0x176>
 8007756:	4b5b      	ldr	r3, [pc, #364]	; (80078c4 <WM__GetNextIVR+0x180>)
 8007758:	695a      	ldr	r2, [r3, #20]
 800775a:	2a01      	cmp	r2, #1
 800775c:	461c      	mov	r4, r3
 800775e:	dd03      	ble.n	8007768 <WM__GetNextIVR+0x24>
 8007760:	3a01      	subs	r2, #1
 8007762:	615a      	str	r2, [r3, #20]
 8007764:	2000      	movs	r0, #0
 8007766:	e0a8      	b.n	80078ba <WM__GetNextIVR+0x176>
 8007768:	f104 0608 	add.w	r6, r4, #8
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007772:	3301      	adds	r3, #1
 8007774:	ad02      	add	r5, sp, #8
 8007776:	6123      	str	r3, [r4, #16]
 8007778:	e885 0003 	stmia.w	r5, {r0, r1}
 800777c:	b923      	cbnz	r3, 8007788 <WM__GetNextIVR+0x44>
 800777e:	8823      	ldrh	r3, [r4, #0]
 8007780:	f8ad 3008 	strh.w	r3, [sp, #8]
 8007784:	8863      	ldrh	r3, [r4, #2]
 8007786:	e011      	b.n	80077ac <WM__GetNextIVR+0x68>
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	8962      	ldrh	r2, [r4, #10]
 800778c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8007790:	3301      	adds	r3, #1
 8007792:	b29b      	uxth	r3, r3
 8007794:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8007798:	f8ad 3008 	strh.w	r3, [sp, #8]
 800779c:	b21b      	sxth	r3, r3
 800779e:	429a      	cmp	r2, r3
 80077a0:	da06      	bge.n	80077b0 <WM__GetNextIVR+0x6c>
 80077a2:	8823      	ldrh	r3, [r4, #0]
 80077a4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80077a8:	89e3      	ldrh	r3, [r4, #14]
 80077aa:	3301      	adds	r3, #1
 80077ac:	f8ad 300a 	strh.w	r3, [sp, #10]
 80077b0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80077b4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80077b8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80078c4 <WM__GetNextIVR+0x180>
 80077bc:	429a      	cmp	r2, r3
 80077be:	dd04      	ble.n	80077ca <WM__GetNextIVR+0x86>
 80077c0:	6963      	ldr	r3, [r4, #20]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	2000      	movs	r0, #0
 80077c6:	6163      	str	r3, [r4, #20]
 80077c8:	e077      	b.n	80078ba <WM__GetNextIVR+0x176>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80077ce:	f7fe fd11 	bl	80061f4 <GUI_ALLOC_LockH>
 80077d2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80077d6:	f9b8 3000 	ldrsh.w	r3, [r8]
 80077da:	9001      	str	r0, [sp, #4]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d11c      	bne.n	800781a <WM__GetNextIVR+0xd6>
 80077e0:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80077e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80077e8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80077ec:	f8ad 300c 	strh.w	r3, [sp, #12]
 80077f0:	4b33      	ldr	r3, [pc, #204]	; (80078c0 <WM__GetNextIVR+0x17c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077f6:	b15a      	cbz	r2, 8007810 <WM__GetNextIVR+0xcc>
 80077f8:	4610      	mov	r0, r2
 80077fa:	f7fe fcf1 	bl	80061e0 <GUI_ALLOC_h2p>
 80077fe:	4680      	mov	r8, r0
 8007800:	2200      	movs	r2, #0
 8007802:	6a00      	ldr	r0, [r0, #32]
 8007804:	4629      	mov	r1, r5
 8007806:	f7ff fbb7 	bl	8006f78 <_Findy1>
 800780a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800780e:	e7f2      	b.n	80077f6 <WM__GetNextIVR+0xb2>
 8007810:	9b01      	ldr	r3, [sp, #4]
 8007812:	4629      	mov	r1, r5
 8007814:	69d8      	ldr	r0, [r3, #28]
 8007816:	f7ff fbaf 	bl	8006f78 <_Findy1>
 800781a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800781e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007826:	b16a      	cbz	r2, 8007844 <WM__GetNextIVR+0x100>
 8007828:	4610      	mov	r0, r2
 800782a:	f7fe fcd9 	bl	80061e0 <GUI_ALLOC_h2p>
 800782e:	4629      	mov	r1, r5
 8007830:	4680      	mov	r8, r0
 8007832:	2200      	movs	r2, #0
 8007834:	6a00      	ldr	r0, [r0, #32]
 8007836:	f7ff fbf5 	bl	8007024 <_Findx0>
 800783a:	2800      	cmp	r0, #0
 800783c:	d1ed      	bne.n	800781a <WM__GetNextIVR+0xd6>
 800783e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8007842:	e7f0      	b.n	8007826 <WM__GetNextIVR+0xe2>
 8007844:	9b01      	ldr	r3, [sp, #4]
 8007846:	4629      	mov	r1, r5
 8007848:	69d8      	ldr	r0, [r3, #28]
 800784a:	f7ff fbeb 	bl	8007024 <_Findx0>
 800784e:	2800      	cmp	r0, #0
 8007850:	d1e3      	bne.n	800781a <WM__GetNextIVR+0xd6>
 8007852:	88a3      	ldrh	r3, [r4, #4]
 8007854:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8007858:	f8ad 300c 	strh.w	r3, [sp, #12]
 800785c:	b21b      	sxth	r3, r3
 800785e:	429a      	cmp	r2, r3
 8007860:	dd07      	ble.n	8007872 <WM__GetNextIVR+0x12e>
 8007862:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007866:	e886 0003 	stmia.w	r6, {r0, r1}
 800786a:	a801      	add	r0, sp, #4
 800786c:	f7fe fcd0 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007870:	e797      	b.n	80077a2 <WM__GetNextIVR+0x5e>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007876:	b152      	cbz	r2, 800788e <WM__GetNextIVR+0x14a>
 8007878:	4610      	mov	r0, r2
 800787a:	f7fe fcb1 	bl	80061e0 <GUI_ALLOC_h2p>
 800787e:	4607      	mov	r7, r0
 8007880:	2200      	movs	r2, #0
 8007882:	6a00      	ldr	r0, [r0, #32]
 8007884:	4629      	mov	r1, r5
 8007886:	f7ff fc11 	bl	80070ac <_Findx1>
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	e7f3      	b.n	8007876 <WM__GetNextIVR+0x132>
 800788e:	af04      	add	r7, sp, #16
 8007890:	4629      	mov	r1, r5
 8007892:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8007896:	69d8      	ldr	r0, [r3, #28]
 8007898:	f7ff fc08 	bl	80070ac <_Findx1>
 800789c:	4638      	mov	r0, r7
 800789e:	f7fe fcb7 	bl	8006210 <GUI_ALLOC_UnlockH>
 80078a2:	6923      	ldr	r3, [r4, #16]
 80078a4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80078a8:	4293      	cmp	r3, r2
 80078aa:	dc89      	bgt.n	80077c0 <WM__GetNextIVR+0x7c>
 80078ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80078b0:	e886 0003 	stmia.w	r6, {r0, r1}
 80078b4:	f7ff fce6 	bl	8007284 <WM__ActivateClipRect>
 80078b8:	2001      	movs	r0, #1
 80078ba:	b004      	add	sp, #16
 80078bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c0:	20000028 	.word	0x20000028
 80078c4:	20028bfc 	.word	0x20028bfc

080078c8 <WM__InitIVRSearch>:
 80078c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078cc:	4f39      	ldr	r7, [pc, #228]	; (80079b4 <WM__InitIVRSearch+0xec>)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80078d4:	b086      	sub	sp, #24
 80078d6:	4606      	mov	r6, r0
 80078d8:	b912      	cbnz	r2, 80078e0 <WM__InitIVRSearch+0x18>
 80078da:	f7ff fcd3 	bl	8007284 <WM__ActivateClipRect>
 80078de:	e064      	b.n	80079aa <WM__InitIVRSearch+0xe2>
 80078e0:	4d35      	ldr	r5, [pc, #212]	; (80079b8 <WM__InitIVRSearch+0xf0>)
 80078e2:	696a      	ldr	r2, [r5, #20]
 80078e4:	3201      	adds	r2, #1
 80078e6:	2a01      	cmp	r2, #1
 80078e8:	616a      	str	r2, [r5, #20]
 80078ea:	462c      	mov	r4, r5
 80078ec:	dc5d      	bgt.n	80079aa <WM__InitIVRSearch+0xe2>
 80078ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80078f0:	f7fe fc80 	bl	80061f4 <GUI_ALLOC_LockH>
 80078f4:	f04f 32ff 	mov.w	r2, #4294967295
 80078f8:	612a      	str	r2, [r5, #16]
 80078fa:	4a30      	ldr	r2, [pc, #192]	; (80079bc <WM__InitIVRSearch+0xf4>)
 80078fc:	9000      	str	r0, [sp, #0]
 80078fe:	7812      	ldrb	r2, [r2, #0]
 8007900:	b12a      	cbz	r2, 800790e <WM__InitIVRSearch+0x46>
 8007902:	f100 0308 	add.w	r3, r0, #8
 8007906:	aa02      	add	r2, sp, #8
 8007908:	e893 0003 	ldmia.w	r3, {r0, r1}
 800790c:	e005      	b.n	800791a <WM__InitIVRSearch+0x52>
 800790e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007910:	f012 0802 	ands.w	r8, r2, #2
 8007914:	d00a      	beq.n	800792c <WM__InitIVRSearch+0x64>
 8007916:	c803      	ldmia	r0, {r0, r1}
 8007918:	aa02      	add	r2, sp, #8
 800791a:	e882 0003 	stmia.w	r2, {r0, r1}
 800791e:	ad02      	add	r5, sp, #8
 8007920:	b166      	cbz	r6, 800793c <WM__InitIVRSearch+0x74>
 8007922:	4628      	mov	r0, r5
 8007924:	4631      	mov	r1, r6
 8007926:	f7fd facb 	bl	8004ec0 <GUI__IntersectRect>
 800792a:	e007      	b.n	800793c <WM__InitIVRSearch+0x74>
 800792c:	696b      	ldr	r3, [r5, #20]
 800792e:	4668      	mov	r0, sp
 8007930:	3b01      	subs	r3, #1
 8007932:	616b      	str	r3, [r5, #20]
 8007934:	f7fe fc6c 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007938:	4640      	mov	r0, r8
 800793a:	e037      	b.n	80079ac <WM__InitIVRSearch+0xe4>
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	4e20      	ldr	r6, [pc, #128]	; (80079c0 <WM__InitIVRSearch+0xf8>)
 8007940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007942:	b1c2      	cbz	r2, 8007976 <WM__InitIVRSearch+0xae>
 8007944:	9b00      	ldr	r3, [sp, #0]
 8007946:	6810      	ldr	r0, [r2, #0]
 8007948:	6851      	ldr	r1, [r2, #4]
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	ab04      	add	r3, sp, #16
 800794e:	c303      	stmia	r3!, {r0, r1}
 8007950:	6833      	ldr	r3, [r6, #0]
 8007952:	b133      	cbz	r3, 8007962 <WM__InitIVRSearch+0x9a>
 8007954:	a801      	add	r0, sp, #4
 8007956:	f7fe fc5b 	bl	8006210 <GUI_ALLOC_UnlockH>
 800795a:	6830      	ldr	r0, [r6, #0]
 800795c:	f7fe fc4a 	bl	80061f4 <GUI_ALLOC_LockH>
 8007960:	9001      	str	r0, [sp, #4]
 8007962:	9801      	ldr	r0, [sp, #4]
 8007964:	a904      	add	r1, sp, #16
 8007966:	f7ff fc5d 	bl	8007224 <WM__Client2Screen>
 800796a:	4628      	mov	r0, r5
 800796c:	a904      	add	r1, sp, #16
 800796e:	f7fd faa7 	bl	8004ec0 <GUI__IntersectRect>
 8007972:	a801      	add	r0, sp, #4
 8007974:	e000      	b.n	8007978 <WM__InitIVRSearch+0xb0>
 8007976:	4668      	mov	r0, sp
 8007978:	f7fe fc4a 	bl	8006210 <GUI_ALLOC_UnlockH>
 800797c:	6831      	ldr	r1, [r6, #0]
 800797e:	b119      	cbz	r1, 8007988 <WM__InitIVRSearch+0xc0>
 8007980:	4628      	mov	r0, r5
 8007982:	f7ff fbcf 	bl	8007124 <WM__ClipAtParentBorders>
 8007986:	b128      	cbz	r0, 8007994 <WM__InitIVRSearch+0xcc>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	4628      	mov	r0, r5
 800798c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800798e:	f7ff fbc9 	bl	8007124 <WM__ClipAtParentBorders>
 8007992:	b918      	cbnz	r0, 800799c <WM__InitIVRSearch+0xd4>
 8007994:	6963      	ldr	r3, [r4, #20]
 8007996:	3b01      	subs	r3, #1
 8007998:	6163      	str	r3, [r4, #20]
 800799a:	e007      	b.n	80079ac <WM__InitIVRSearch+0xe4>
 800799c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80079a0:	e884 0003 	stmia.w	r4, {r0, r1}
 80079a4:	f7ff fece 	bl	8007744 <WM__GetNextIVR>
 80079a8:	e000      	b.n	80079ac <WM__InitIVRSearch+0xe4>
 80079aa:	2001      	movs	r0, #1
 80079ac:	b006      	add	sp, #24
 80079ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b2:	bf00      	nop
 80079b4:	20000028 	.word	0x20000028
 80079b8:	20028bfc 	.word	0x20028bfc
 80079bc:	20028f64 	.word	0x20028f64
 80079c0:	20028f34 	.word	0x20028f34

080079c4 <WM_Activate>:
 80079c4:	4b02      	ldr	r3, [pc, #8]	; (80079d0 <WM_Activate+0xc>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80079ce:	4770      	bx	lr
 80079d0:	20000028 	.word	0x20000028

080079d4 <WM_DefaultProc>:
 80079d4:	b510      	push	{r4, lr}
 80079d6:	4604      	mov	r4, r0
 80079d8:	6840      	ldr	r0, [r0, #4]
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	68e1      	ldr	r1, [r4, #12]
 80079de:	2b17      	cmp	r3, #23
 80079e0:	d00f      	beq.n	8007a02 <WM_DefaultProc+0x2e>
 80079e2:	dc06      	bgt.n	80079f2 <WM_DefaultProc+0x1e>
 80079e4:	2b0e      	cmp	r3, #14
 80079e6:	d00e      	beq.n	8007a06 <WM_DefaultProc+0x32>
 80079e8:	2b14      	cmp	r3, #20
 80079ea:	d114      	bne.n	8007a16 <WM_DefaultProc+0x42>
 80079ec:	f001 f940 	bl	8008c70 <WM__GetClientRectEx>
 80079f0:	e011      	b.n	8007a16 <WM_DefaultProc+0x42>
 80079f2:	2b22      	cmp	r3, #34	; 0x22
 80079f4:	d00c      	beq.n	8007a10 <WM_DefaultProc+0x3c>
 80079f6:	2b28      	cmp	r3, #40	; 0x28
 80079f8:	d10d      	bne.n	8007a16 <WM_DefaultProc+0x42>
 80079fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079fe:	f7ff bdc9 	b.w	8007594 <WM_InvalidateWindow>
 8007a02:	60e0      	str	r0, [r4, #12]
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	4621      	mov	r1, r4
 8007a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a0c:	f7ff ba4f 	b.w	8006eae <WM_SendToParent>
 8007a10:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007a14:	e000      	b.n	8007a18 <WM_DefaultProc+0x44>
 8007a16:	2300      	movs	r3, #0
 8007a18:	60e3      	str	r3, [r4, #12]
 8007a1a:	bd10      	pop	{r4, pc}

08007a1c <_cbBackWin>:
 8007a1c:	6803      	ldr	r3, [r0, #0]
 8007a1e:	2b0e      	cmp	r3, #14
 8007a20:	b510      	push	{r4, lr}
 8007a22:	4604      	mov	r4, r0
 8007a24:	d002      	beq.n	8007a2c <_cbBackWin+0x10>
 8007a26:	2b0f      	cmp	r3, #15
 8007a28:	d009      	beq.n	8007a3e <_cbBackWin+0x22>
 8007a2a:	e020      	b.n	8007a6e <_cbBackWin+0x52>
 8007a2c:	68c3      	ldr	r3, [r0, #12]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	2a01      	cmp	r2, #1
 8007a32:	d121      	bne.n	8007a78 <_cbBackWin+0x5c>
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a3a:	f001 b8b9 	b.w	8008bb0 <GUI_StoreKey>
 8007a3e:	4a0f      	ldr	r2, [pc, #60]	; (8007a7c <_cbBackWin+0x60>)
 8007a40:	6843      	ldr	r3, [r0, #4]
 8007a42:	6811      	ldr	r1, [r2, #0]
 8007a44:	428b      	cmp	r3, r1
 8007a46:	d006      	beq.n	8007a56 <_cbBackWin+0x3a>
 8007a48:	6852      	ldr	r2, [r2, #4]
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	bf14      	ite	ne
 8007a4e:	f04f 33ff 	movne.w	r3, #4294967295
 8007a52:	2301      	moveq	r3, #1
 8007a54:	e000      	b.n	8007a58 <_cbBackWin+0x3c>
 8007a56:	2300      	movs	r3, #0
 8007a58:	4a09      	ldr	r2, [pc, #36]	; (8007a80 <_cbBackWin+0x64>)
 8007a5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007a5e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007a62:	4298      	cmp	r0, r3
 8007a64:	d003      	beq.n	8007a6e <_cbBackWin+0x52>
 8007a66:	f7fe f807 	bl	8005a78 <GUI_SetBkColor>
 8007a6a:	f7fd fec3 	bl	80057f4 <GUI_Clear>
 8007a6e:	4620      	mov	r0, r4
 8007a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a74:	f7ff bfae 	b.w	80079d4 <WM_DefaultProc>
 8007a78:	bd10      	pop	{r4, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20028f38 	.word	0x20028f38
 8007a80:	20028f6c 	.word	0x20028f6c

08007a84 <WM_Init>:
 8007a84:	b530      	push	{r4, r5, lr}
 8007a86:	4b2b      	ldr	r3, [pc, #172]	; (8007b34 <WM_Init+0xb0>)
 8007a88:	7818      	ldrb	r0, [r3, #0]
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	461d      	mov	r5, r3
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d14d      	bne.n	8007b2e <WM_Init+0xaa>
 8007a92:	4b29      	ldr	r3, [pc, #164]	; (8007b38 <WM_Init+0xb4>)
 8007a94:	6018      	str	r0, [r3, #0]
 8007a96:	4b29      	ldr	r3, [pc, #164]	; (8007b3c <WM_Init+0xb8>)
 8007a98:	6018      	str	r0, [r3, #0]
 8007a9a:	4b29      	ldr	r3, [pc, #164]	; (8007b40 <WM_Init+0xbc>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6458      	str	r0, [r3, #68]	; 0x44
 8007aa0:	4b28      	ldr	r3, [pc, #160]	; (8007b44 <WM_Init+0xc0>)
 8007aa2:	8018      	strh	r0, [r3, #0]
 8007aa4:	4b28      	ldr	r3, [pc, #160]	; (8007b48 <WM_Init+0xc4>)
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	8018      	strh	r0, [r3, #0]
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f7fd fd52 	bl	8005554 <GUI_DEVICE__GetpDriver>
 8007ab0:	b1c0      	cbz	r0, 8007ae4 <WM_Init+0x60>
 8007ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007abc:	2000      	movs	r0, #0
 8007abe:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8007ac2:	4b22      	ldr	r3, [pc, #136]	; (8007b4c <WM_Init+0xc8>)
 8007ac4:	9302      	str	r3, [sp, #8]
 8007ac6:	9003      	str	r0, [sp, #12]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	4601      	mov	r1, r0
 8007acc:	f7ff fd90 	bl	80075f0 <WM_CreateWindowAsChild>
 8007ad0:	4b1f      	ldr	r3, [pc, #124]	; (8007b50 <WM_Init+0xcc>)
 8007ad2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007ad6:	4b1f      	ldr	r3, [pc, #124]	; (8007b54 <WM_Init+0xd0>)
 8007ad8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007adc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8007ae0:	f7ff fd58 	bl	8007594 <WM_InvalidateWindow>
 8007ae4:	3401      	adds	r4, #1
 8007ae6:	2c02      	cmp	r4, #2
 8007ae8:	d1df      	bne.n	8007aaa <WM_Init+0x26>
 8007aea:	481b      	ldr	r0, [pc, #108]	; (8007b58 <WM_Init+0xd4>)
 8007aec:	f001 f8b8 	bl	8008c60 <WM__AddCriticalHandle>
 8007af0:	481a      	ldr	r0, [pc, #104]	; (8007b5c <WM_Init+0xd8>)
 8007af2:	f001 f8b5 	bl	8008c60 <WM__AddCriticalHandle>
 8007af6:	481a      	ldr	r0, [pc, #104]	; (8007b60 <WM_Init+0xdc>)
 8007af8:	f001 f8b2 	bl	8008c60 <WM__AddCriticalHandle>
 8007afc:	4819      	ldr	r0, [pc, #100]	; (8007b64 <WM_Init+0xe0>)
 8007afe:	f001 f8af 	bl	8008c60 <WM__AddCriticalHandle>
 8007b02:	4819      	ldr	r0, [pc, #100]	; (8007b68 <WM_Init+0xe4>)
 8007b04:	f001 f8ac 	bl	8008c60 <WM__AddCriticalHandle>
 8007b08:	4818      	ldr	r0, [pc, #96]	; (8007b6c <WM_Init+0xe8>)
 8007b0a:	f001 f8a9 	bl	8008c60 <WM__AddCriticalHandle>
 8007b0e:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <WM_Init+0xcc>)
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	f7ff fd4d 	bl	80075b0 <WM_SelectWindow>
 8007b16:	f7ff ff55 	bl	80079c4 <WM_Activate>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	702b      	strb	r3, [r5, #0]
 8007b1e:	4814      	ldr	r0, [pc, #80]	; (8007b70 <WM_Init+0xec>)
 8007b20:	4b14      	ldr	r3, [pc, #80]	; (8007b74 <WM_Init+0xf0>)
 8007b22:	6003      	str	r3, [r0, #0]
 8007b24:	b005      	add	sp, #20
 8007b26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b2a:	f7fd be73 	b.w	8005814 <GUI__RegisterExit>
 8007b2e:	b005      	add	sp, #20
 8007b30:	bd30      	pop	{r4, r5, pc}
 8007b32:	bf00      	nop
 8007b34:	20028c18 	.word	0x20028c18
 8007b38:	20028f54 	.word	0x20028f54
 8007b3c:	20028c14 	.word	0x20028c14
 8007b40:	20000028 	.word	0x20000028
 8007b44:	20028f50 	.word	0x20028f50
 8007b48:	20028f30 	.word	0x20028f30
 8007b4c:	08007a1d 	.word	0x08007a1d
 8007b50:	20028f38 	.word	0x20028f38
 8007b54:	20028f6c 	.word	0x20028f6c
 8007b58:	20028fac 	.word	0x20028fac
 8007b5c:	20028f9c 	.word	0x20028f9c
 8007b60:	20028f8c 	.word	0x20028f8c
 8007b64:	20028fb4 	.word	0x20028fb4
 8007b68:	20028fa4 	.word	0x20028fa4
 8007b6c:	20028f94 	.word	0x20028f94
 8007b70:	20028bf0 	.word	0x20028bf0
 8007b74:	08006ecd 	.word	0x08006ecd

08007b78 <GUI_MEMDEV_GetDataPtr>:
 8007b78:	b513      	push	{r0, r1, r4, lr}
 8007b7a:	b150      	cbz	r0, 8007b92 <GUI_MEMDEV_GetDataPtr+0x1a>
 8007b7c:	f7fe fb3a 	bl	80061f4 <GUI_ALLOC_LockH>
 8007b80:	4604      	mov	r4, r0
 8007b82:	a802      	add	r0, sp, #8
 8007b84:	f840 4d04 	str.w	r4, [r0, #-4]!
 8007b88:	f7fe fb42 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007b8c:	f104 0018 	add.w	r0, r4, #24
 8007b90:	e7ff      	b.n	8007b92 <GUI_MEMDEV_GetDataPtr+0x1a>
 8007b92:	b002      	add	sp, #8
 8007b94:	bd10      	pop	{r4, pc}
	...

08007b98 <_GetDevData>:
 8007b98:	4802      	ldr	r0, [pc, #8]	; (8007ba4 <_GetDevData+0xc>)
 8007b9a:	2901      	cmp	r1, #1
 8007b9c:	bf18      	it	ne
 8007b9e:	2000      	movne	r0, #0
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	0800ab34 	.word	0x0800ab34

08007ba8 <_GetDevFunc>:
 8007ba8:	4802      	ldr	r0, [pc, #8]	; (8007bb4 <_GetDevFunc+0xc>)
 8007baa:	2916      	cmp	r1, #22
 8007bac:	bf18      	it	ne
 8007bae:	2000      	movne	r0, #0
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	08008c95 	.word	0x08008c95

08007bb8 <_GetDevProp>:
 8007bb8:	2908      	cmp	r1, #8
 8007bba:	bf0c      	ite	eq
 8007bbc:	2020      	moveq	r0, #32
 8007bbe:	2000      	movne	r0, #0
 8007bc0:	4770      	bx	lr

08007bc2 <_SetOrg>:
 8007bc2:	b508      	push	{r3, lr}
 8007bc4:	6800      	ldr	r0, [r0, #0]
 8007bc6:	68c3      	ldr	r3, [r0, #12]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	4798      	blx	r3
 8007bcc:	bd08      	pop	{r3, pc}

08007bce <_GetRect>:
 8007bce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bd0:	6880      	ldr	r0, [r0, #8]
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	f7fe fb0e 	bl	80061f4 <GUI_ALLOC_LockH>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	a802      	add	r0, sp, #8
 8007bdc:	8899      	ldrh	r1, [r3, #4]
 8007bde:	88da      	ldrh	r2, [r3, #6]
 8007be0:	891d      	ldrh	r5, [r3, #8]
 8007be2:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007be6:	895b      	ldrh	r3, [r3, #10]
 8007be8:	8021      	strh	r1, [r4, #0]
 8007bea:	8062      	strh	r2, [r4, #2]
 8007bec:	4429      	add	r1, r5
 8007bee:	441a      	add	r2, r3
 8007bf0:	3901      	subs	r1, #1
 8007bf2:	3a01      	subs	r2, #1
 8007bf4:	80a1      	strh	r1, [r4, #4]
 8007bf6:	80e2      	strh	r2, [r4, #6]
 8007bf8:	f7fe fb0a 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007bfc:	b003      	add	sp, #12
 8007bfe:	bd30      	pop	{r4, r5, pc}

08007c00 <_XY2PTR>:
 8007c00:	4b0e      	ldr	r3, [pc, #56]	; (8007c3c <_XY2PTR+0x3c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c06:	4605      	mov	r5, r0
 8007c08:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007c0a:	460e      	mov	r6, r1
 8007c0c:	f7fe faf2 	bl	80061f4 <GUI_ALLOC_LockH>
 8007c10:	4603      	mov	r3, r0
 8007c12:	a802      	add	r0, sp, #8
 8007c14:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8007c18:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007c1c:	f103 0118 	add.w	r1, r3, #24
 8007c20:	1b36      	subs	r6, r6, r4
 8007c22:	68dc      	ldr	r4, [r3, #12]
 8007c24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007c28:	fb04 1406 	mla	r4, r4, r6, r1
 8007c2c:	1aed      	subs	r5, r5, r3
 8007c2e:	f7fe faef 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007c32:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8007c36:	4620      	mov	r0, r4
 8007c38:	b002      	add	sp, #8
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	20000028 	.word	0x20000028

08007c40 <_GetPixelIndex>:
 8007c40:	b508      	push	{r3, lr}
 8007c42:	4608      	mov	r0, r1
 8007c44:	4611      	mov	r1, r2
 8007c46:	f7ff ffdb 	bl	8007c00 <_XY2PTR>
 8007c4a:	6800      	ldr	r0, [r0, #0]
 8007c4c:	bd08      	pop	{r3, pc}
	...

08007c50 <_XorPixel>:
 8007c50:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <_XorPixel+0x58>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c56:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007c58:	4615      	mov	r5, r2
 8007c5a:	460e      	mov	r6, r1
 8007c5c:	f7fe faca 	bl	80061f4 <GUI_ALLOC_LockH>
 8007c60:	4629      	mov	r1, r5
 8007c62:	9000      	str	r0, [sp, #0]
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7ff ffcb 	bl	8007c00 <_XY2PTR>
 8007c6a:	9b00      	ldr	r3, [sp, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	4604      	mov	r4, r0
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	4798      	blx	r3
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	4058      	eors	r0, r3
 8007c7a:	9b00      	ldr	r3, [sp, #0]
 8007c7c:	6020      	str	r0, [r4, #0]
 8007c7e:	6958      	ldr	r0, [r3, #20]
 8007c80:	b160      	cbz	r0, 8007c9c <_XorPixel+0x4c>
 8007c82:	f7fe fab7 	bl	80061f4 <GUI_ALLOC_LockH>
 8007c86:	ac02      	add	r4, sp, #8
 8007c88:	6883      	ldr	r3, [r0, #8]
 8007c8a:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4631      	mov	r1, r6
 8007c92:	462a      	mov	r2, r5
 8007c94:	4798      	blx	r3
 8007c96:	4620      	mov	r0, r4
 8007c98:	f7fe faba 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007c9c:	4668      	mov	r0, sp
 8007c9e:	f7fe fab7 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007ca2:	b002      	add	sp, #8
 8007ca4:	bd70      	pop	{r4, r5, r6, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000028 	.word	0x20000028

08007cac <_SetPixelIndex>:
 8007cac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cae:	461c      	mov	r4, r3
 8007cb0:	4b10      	ldr	r3, [pc, #64]	; (8007cf4 <_SetPixelIndex+0x48>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007cb6:	460e      	mov	r6, r1
 8007cb8:	4615      	mov	r5, r2
 8007cba:	f7fe fa9b 	bl	80061f4 <GUI_ALLOC_LockH>
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	9000      	str	r0, [sp, #0]
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f7ff ff9c 	bl	8007c00 <_XY2PTR>
 8007cc8:	9b00      	ldr	r3, [sp, #0]
 8007cca:	6004      	str	r4, [r0, #0]
 8007ccc:	6958      	ldr	r0, [r3, #20]
 8007cce:	b160      	cbz	r0, 8007cea <_SetPixelIndex+0x3e>
 8007cd0:	f7fe fa90 	bl	80061f4 <GUI_ALLOC_LockH>
 8007cd4:	ac02      	add	r4, sp, #8
 8007cd6:	6883      	ldr	r3, [r0, #8]
 8007cd8:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4631      	mov	r1, r6
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	4798      	blx	r3
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f7fe fa93 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007cea:	4668      	mov	r0, sp
 8007cec:	f7fe fa90 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007cf0:	b002      	add	sp, #8
 8007cf2:	bd70      	pop	{r4, r5, r6, pc}
 8007cf4:	20000028 	.word	0x20000028

08007cf8 <_DrawVLine>:
 8007cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cfc:	4d2c      	ldr	r5, [pc, #176]	; (8007db0 <_DrawVLine+0xb8>)
 8007cfe:	461e      	mov	r6, r3
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007d04:	460f      	mov	r7, r1
 8007d06:	4614      	mov	r4, r2
 8007d08:	f7fe fa74 	bl	80061f4 <GUI_ALLOC_LockH>
 8007d0c:	9000      	str	r0, [sp, #0]
 8007d0e:	6940      	ldr	r0, [r0, #20]
 8007d10:	46a9      	mov	r9, r5
 8007d12:	b108      	cbz	r0, 8007d18 <_DrawVLine+0x20>
 8007d14:	f7fe fa6e 	bl	80061f4 <GUI_ALLOC_LockH>
 8007d18:	9001      	str	r0, [sp, #4]
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	f7ff ff6f 	bl	8007c00 <_XY2PTR>
 8007d22:	f8d9 2000 	ldr.w	r2, [r9]
 8007d26:	9b00      	ldr	r3, [sp, #0]
 8007d28:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007d2a:	7c12      	ldrb	r2, [r2, #16]
 8007d2c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8007d30:	f8d1 9000 	ldr.w	r9, [r1]
 8007d34:	07d2      	lsls	r2, r2, #31
 8007d36:	4605      	mov	r5, r0
 8007d38:	d51f      	bpl.n	8007d7a <_DrawVLine+0x82>
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	4798      	blx	r3
 8007d42:	4680      	mov	r8, r0
 8007d44:	9801      	ldr	r0, [sp, #4]
 8007d46:	b128      	cbz	r0, 8007d54 <_DrawVLine+0x5c>
 8007d48:	6882      	ldr	r2, [r0, #8]
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	f8d2 c000 	ldr.w	ip, [r2]
 8007d50:	4622      	mov	r2, r4
 8007d52:	47e0      	blx	ip
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	ea83 0308 	eor.w	r3, r3, r8
 8007d5a:	602b      	str	r3, [r5, #0]
 8007d5c:	9b00      	ldr	r3, [sp, #0]
 8007d5e:	3401      	adds	r4, #1
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	42b4      	cmp	r4, r6
 8007d64:	441d      	add	r5, r3
 8007d66:	dded      	ble.n	8007d44 <_DrawVLine+0x4c>
 8007d68:	4668      	mov	r0, sp
 8007d6a:	f7fe fa51 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	b1d3      	cbz	r3, 8007da8 <_DrawVLine+0xb0>
 8007d72:	a801      	add	r0, sp, #4
 8007d74:	f7fe fa4c 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007d78:	e016      	b.n	8007da8 <_DrawVLine+0xb0>
 8007d7a:	9b01      	ldr	r3, [sp, #4]
 8007d7c:	b163      	cbz	r3, 8007d98 <_DrawVLine+0xa0>
 8007d7e:	9801      	ldr	r0, [sp, #4]
 8007d80:	6883      	ldr	r3, [r0, #8]
 8007d82:	4622      	mov	r2, r4
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4639      	mov	r1, r7
 8007d88:	3401      	adds	r4, #1
 8007d8a:	4798      	blx	r3
 8007d8c:	42b4      	cmp	r4, r6
 8007d8e:	f8c5 9000 	str.w	r9, [r5]
 8007d92:	4445      	add	r5, r8
 8007d94:	ddf3      	ble.n	8007d7e <_DrawVLine+0x86>
 8007d96:	e7e7      	b.n	8007d68 <_DrawVLine+0x70>
 8007d98:	1b34      	subs	r4, r6, r4
 8007d9a:	3401      	adds	r4, #1
 8007d9c:	3c01      	subs	r4, #1
 8007d9e:	f8c5 9000 	str.w	r9, [r5]
 8007da2:	4445      	add	r5, r8
 8007da4:	d1fa      	bne.n	8007d9c <_DrawVLine+0xa4>
 8007da6:	e7df      	b.n	8007d68 <_DrawVLine+0x70>
 8007da8:	b003      	add	sp, #12
 8007daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dae:	bf00      	nop
 8007db0:	20000028 	.word	0x20000028

08007db4 <_FillRect>:
 8007db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db8:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007e68 <_FillRect+0xb4>
 8007dbc:	4614      	mov	r4, r2
 8007dbe:	f8db 2000 	ldr.w	r2, [fp]
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8007dc6:	460f      	mov	r7, r1
 8007dc8:	461d      	mov	r5, r3
 8007dca:	f7fe fa13 	bl	80061f4 <GUI_ALLOC_LockH>
 8007dce:	4621      	mov	r1, r4
 8007dd0:	9002      	str	r0, [sp, #8]
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	f7ff ff14 	bl	8007c00 <_XY2PTR>
 8007dd8:	9a02      	ldr	r2, [sp, #8]
 8007dda:	f8db 3000 	ldr.w	r3, [fp]
 8007dde:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8007de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de4:	4606      	mov	r6, r0
 8007de6:	6950      	ldr	r0, [r2, #20]
 8007de8:	f8d3 a000 	ldr.w	sl, [r3]
 8007dec:	1bed      	subs	r5, r5, r7
 8007dee:	3501      	adds	r5, #1
 8007df0:	b338      	cbz	r0, 8007e42 <_FillRect+0x8e>
 8007df2:	f7fe f9ff 	bl	80061f4 <GUI_ALLOC_LockH>
 8007df6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007df8:	f10d 0810 	add.w	r8, sp, #16
 8007dfc:	1b13      	subs	r3, r2, r4
 8007dfe:	f848 0d04 	str.w	r0, [r8, #-4]!
 8007e02:	3301      	adds	r3, #1
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	4639      	mov	r1, r7
 8007e08:	4622      	mov	r2, r4
 8007e0a:	462b      	mov	r3, r5
 8007e0c:	f001 f81e 	bl	8008e4c <GUI_USAGE_AddRect>
 8007e10:	4640      	mov	r0, r8
 8007e12:	f7fe f9fd 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007e16:	e014      	b.n	8007e42 <_FillRect+0x8e>
 8007e18:	f8db 3000 	ldr.w	r3, [fp]
 8007e1c:	7c1b      	ldrb	r3, [r3, #16]
 8007e1e:	07db      	lsls	r3, r3, #31
 8007e20:	d513      	bpl.n	8007e4a <_FillRect+0x96>
 8007e22:	9b02      	ldr	r3, [sp, #8]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	4798      	blx	r3
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	462b      	mov	r3, r5
 8007e30:	6811      	ldr	r1, [r2, #0]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	ea81 0100 	eor.w	r1, r1, r0
 8007e38:	f842 1b04 	str.w	r1, [r2], #4
 8007e3c:	d1f8      	bne.n	8007e30 <_FillRect+0x7c>
 8007e3e:	444e      	add	r6, r9
 8007e40:	3401      	adds	r4, #1
 8007e42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e44:	429c      	cmp	r4, r3
 8007e46:	dde7      	ble.n	8007e18 <_FillRect+0x64>
 8007e48:	e008      	b.n	8007e5c <_FillRect+0xa8>
 8007e4a:	2d00      	cmp	r5, #0
 8007e4c:	ddf7      	ble.n	8007e3e <_FillRect+0x8a>
 8007e4e:	462b      	mov	r3, r5
 8007e50:	4632      	mov	r2, r6
 8007e52:	3b01      	subs	r3, #1
 8007e54:	f842 ab04 	str.w	sl, [r2], #4
 8007e58:	d1fb      	bne.n	8007e52 <_FillRect+0x9e>
 8007e5a:	e7f0      	b.n	8007e3e <_FillRect+0x8a>
 8007e5c:	a802      	add	r0, sp, #8
 8007e5e:	f7fe f9d7 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007e62:	b005      	add	sp, #20
 8007e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e68:	20000028 	.word	0x20000028

08007e6c <_DrawHLine>:
 8007e6c:	b507      	push	{r0, r1, r2, lr}
 8007e6e:	9200      	str	r2, [sp, #0]
 8007e70:	f7ff ffa0 	bl	8007db4 <_FillRect>
 8007e74:	b003      	add	sp, #12
 8007e76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007e7c <_DrawBitmap>:
 8007e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e80:	4c90      	ldr	r4, [pc, #576]	; (80080c4 <_DrawBitmap+0x248>)
 8007e82:	b091      	sub	sp, #68	; 0x44
 8007e84:	469b      	mov	fp, r3
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	9008      	str	r0, [sp, #32]
 8007e8a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007e8c:	9207      	str	r2, [sp, #28]
 8007e8e:	460e      	mov	r6, r1
 8007e90:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 8007e94:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8007e96:	2800      	cmp	r0, #0
 8007e98:	f000 838b 	beq.w	80085b2 <_DrawBitmap+0x736>
 8007e9c:	f7fe f9aa 	bl	80061f4 <GUI_ALLOC_LockH>
 8007ea0:	900e      	str	r0, [sp, #56]	; 0x38
 8007ea2:	6940      	ldr	r0, [r0, #20]
 8007ea4:	b108      	cbz	r0, 8007eaa <_DrawBitmap+0x2e>
 8007ea6:	f7fe f9a5 	bl	80061f4 <GUI_ALLOC_LockH>
 8007eaa:	900f      	str	r0, [sp, #60]	; 0x3c
 8007eac:	a810      	add	r0, sp, #64	; 0x40
 8007eae:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8007eb6:	f7fe f9ab 	bl	8006210 <GUI_ALLOC_UnlockH>
 8007eba:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8007ebc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007ebe:	4437      	add	r7, r6
 8007ec0:	9704      	str	r7, [sp, #16]
 8007ec2:	b150      	cbz	r0, 8007eda <_DrawBitmap+0x5e>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	7c1b      	ldrb	r3, [r3, #16]
 8007ec8:	079c      	lsls	r4, r3, #30
 8007eca:	d406      	bmi.n	8007eda <_DrawBitmap+0x5e>
 8007ecc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007ece:	9700      	str	r7, [sp, #0]
 8007ed0:	9904      	ldr	r1, [sp, #16]
 8007ed2:	9a07      	ldr	r2, [sp, #28]
 8007ed4:	465b      	mov	r3, fp
 8007ed6:	f000 ffb9 	bl	8008e4c <GUI_USAGE_AddRect>
 8007eda:	9804      	ldr	r0, [sp, #16]
 8007edc:	9907      	ldr	r1, [sp, #28]
 8007ede:	f7ff fe8f 	bl	8007c00 <_XY2PTR>
 8007ee2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007ee4:	2f17      	cmp	r7, #23
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	dd64      	ble.n	8007fb4 <_DrawBitmap+0x138>
 8007eea:	ea4f 078b 	mov.w	r7, fp, lsl #2
 8007eee:	9706      	str	r7, [sp, #24]
 8007ef0:	f04f 0900 	mov.w	r9, #0
 8007ef4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007ef6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007ef8:	45b9      	cmp	r9, r7
 8007efa:	da57      	bge.n	8007fac <_DrawBitmap+0x130>
 8007efc:	b130      	cbz	r0, 8007f0c <_DrawBitmap+0x90>
 8007efe:	6883      	ldr	r3, [r0, #8]
 8007f00:	9a07      	ldr	r2, [sp, #28]
 8007f02:	685c      	ldr	r4, [r3, #4]
 8007f04:	9904      	ldr	r1, [sp, #16]
 8007f06:	444a      	add	r2, r9
 8007f08:	465b      	mov	r3, fp
 8007f0a:	47a0      	blx	r4
 8007f0c:	9f08      	ldr	r7, [sp, #32]
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	68d8      	ldr	r0, [r3, #12]
 8007f12:	b130      	cbz	r0, 8007f22 <_DrawBitmap+0xa6>
 8007f14:	4b6c      	ldr	r3, [pc, #432]	; (80080c8 <_DrawBitmap+0x24c>)
 8007f16:	9a06      	ldr	r2, [sp, #24]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	4651      	mov	r1, sl
 8007f1e:	4798      	blx	r3
 8007f20:	e03d      	b.n	8007f9e <_DrawBitmap+0x122>
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	4798      	blx	r3
 8007f26:	0e00      	lsrs	r0, r0, #24
 8007f28:	9005      	str	r0, [sp, #20]
 8007f2a:	4635      	mov	r5, r6
 8007f2c:	465f      	mov	r7, fp
 8007f2e:	4654      	mov	r4, sl
 8007f30:	463b      	mov	r3, r7
 8007f32:	4622      	mov	r2, r4
 8007f34:	f04f 0800 	mov.w	r8, #0
 8007f38:	f852 1b04 	ldr.w	r1, [r2], #4
 8007f3c:	9805      	ldr	r0, [sp, #20]
 8007f3e:	0e09      	lsrs	r1, r1, #24
 8007f40:	4281      	cmp	r1, r0
 8007f42:	9805      	ldr	r0, [sp, #20]
 8007f44:	bf08      	it	eq
 8007f46:	f108 0801 	addeq.w	r8, r8, #1
 8007f4a:	4281      	cmp	r1, r0
 8007f4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f50:	d012      	beq.n	8007f78 <_DrawBitmap+0xfc>
 8007f52:	f1b8 0f00 	cmp.w	r8, #0
 8007f56:	d012      	beq.n	8007f7e <_DrawBitmap+0x102>
 8007f58:	4a5b      	ldr	r2, [pc, #364]	; (80080c8 <_DrawBitmap+0x24c>)
 8007f5a:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8007f5e:	f8d2 c000 	ldr.w	ip, [r2]
 8007f62:	9303      	str	r3, [sp, #12]
 8007f64:	4628      	mov	r0, r5
 8007f66:	4621      	mov	r1, r4
 8007f68:	461a      	mov	r2, r3
 8007f6a:	47e0      	blx	ip
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	ebc8 0707 	rsb	r7, r8, r7
 8007f72:	441d      	add	r5, r3
 8007f74:	441c      	add	r4, r3
 8007f76:	e010      	b.n	8007f9a <_DrawBitmap+0x11e>
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1dd      	bne.n	8007f38 <_DrawBitmap+0xbc>
 8007f7c:	e7e9      	b.n	8007f52 <_DrawBitmap+0xd6>
 8007f7e:	6820      	ldr	r0, [r4, #0]
 8007f80:	0e02      	lsrs	r2, r0, #24
 8007f82:	2aff      	cmp	r2, #255	; 0xff
 8007f84:	d006      	beq.n	8007f94 <_DrawBitmap+0x118>
 8007f86:	4b51      	ldr	r3, [pc, #324]	; (80080cc <_DrawBitmap+0x250>)
 8007f88:	6829      	ldr	r1, [r5, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	43d2      	mvns	r2, r2
 8007f8e:	b2d2      	uxtb	r2, r2
 8007f90:	4798      	blx	r3
 8007f92:	6028      	str	r0, [r5, #0]
 8007f94:	3504      	adds	r5, #4
 8007f96:	3404      	adds	r4, #4
 8007f98:	3f01      	subs	r7, #1
 8007f9a:	2f00      	cmp	r7, #0
 8007f9c:	d1c8      	bne.n	8007f30 <_DrawBitmap+0xb4>
 8007f9e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8007fa0:	44ba      	add	sl, r7
 8007fa2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007fa4:	f109 0901 	add.w	r9, r9, #1
 8007fa8:	443e      	add	r6, r7
 8007faa:	e7a3      	b.n	8007ef4 <_DrawBitmap+0x78>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	f040 82fd 	bne.w	80085ac <_DrawBitmap+0x730>
 8007fb2:	e2fe      	b.n	80085b2 <_DrawBitmap+0x736>
 8007fb4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007fb6:	2f10      	cmp	r7, #16
 8007fb8:	d134      	bne.n	8008024 <_DrawBitmap+0x1a8>
 8007fba:	1f06      	subs	r6, r0, #4
 8007fbc:	2500      	movs	r5, #0
 8007fbe:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007fc0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007fc2:	42bd      	cmp	r5, r7
 8007fc4:	f280 80a3 	bge.w	800810e <_DrawBitmap+0x292>
 8007fc8:	9f07      	ldr	r7, [sp, #28]
 8007fca:	442f      	add	r7, r5
 8007fcc:	b13c      	cbz	r4, 8007fde <_DrawBitmap+0x162>
 8007fce:	68a3      	ldr	r3, [r4, #8]
 8007fd0:	9904      	ldr	r1, [sp, #16]
 8007fd2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	463a      	mov	r2, r7
 8007fda:	465b      	mov	r3, fp
 8007fdc:	47e0      	blx	ip
 8007fde:	f1aa 0902 	sub.w	r9, sl, #2
 8007fe2:	9605      	str	r6, [sp, #20]
 8007fe4:	46d8      	mov	r8, fp
 8007fe6:	9808      	ldr	r0, [sp, #32]
 8007fe8:	9904      	ldr	r1, [sp, #16]
 8007fea:	6903      	ldr	r3, [r0, #16]
 8007fec:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	4459      	add	r1, fp
 8007ff4:	ebc8 0101 	rsb	r1, r8, r1
 8007ff8:	9103      	str	r1, [sp, #12]
 8007ffa:	4798      	blx	r3
 8007ffc:	9b05      	ldr	r3, [sp, #20]
 8007ffe:	9903      	ldr	r1, [sp, #12]
 8008000:	f843 0f04 	str.w	r0, [r3, #4]!
 8008004:	9305      	str	r3, [sp, #20]
 8008006:	b124      	cbz	r4, 8008012 <_DrawBitmap+0x196>
 8008008:	68a3      	ldr	r3, [r4, #8]
 800800a:	4620      	mov	r0, r4
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	463a      	mov	r2, r7
 8008010:	4798      	blx	r3
 8008012:	f1b8 0801 	subs.w	r8, r8, #1
 8008016:	d1e6      	bne.n	8007fe6 <_DrawBitmap+0x16a>
 8008018:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800801a:	44ba      	add	sl, r7
 800801c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800801e:	3501      	adds	r5, #1
 8008020:	443e      	add	r6, r7
 8008022:	e7cc      	b.n	8007fbe <_DrawBitmap+0x142>
 8008024:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008026:	2f08      	cmp	r7, #8
 8008028:	f100 0604 	add.w	r6, r0, #4
 800802c:	d173      	bne.n	8008116 <_DrawBitmap+0x29a>
 800802e:	9f07      	ldr	r7, [sp, #28]
 8008030:	9907      	ldr	r1, [sp, #28]
 8008032:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008034:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8008036:	1a7b      	subs	r3, r7, r1
 8008038:	4293      	cmp	r3, r2
 800803a:	f1a6 0004 	sub.w	r0, r6, #4
 800803e:	da66      	bge.n	800810e <_DrawBitmap+0x292>
 8008040:	4b20      	ldr	r3, [pc, #128]	; (80080c4 <_DrawBitmap+0x248>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	7c1b      	ldrb	r3, [r3, #16]
 8008046:	b36d      	cbz	r5, 80080a4 <_DrawBitmap+0x228>
 8008048:	f013 0303 	ands.w	r3, r3, #3
 800804c:	d005      	beq.n	800805a <_DrawBitmap+0x1de>
 800804e:	2b02      	cmp	r3, #2
 8008050:	d157      	bne.n	8008102 <_DrawBitmap+0x286>
 8008052:	46b1      	mov	r9, r6
 8008054:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008058:	e01c      	b.n	8008094 <_DrawBitmap+0x218>
 800805a:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800805e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008062:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8008066:	3301      	adds	r3, #1
 8008068:	455b      	cmp	r3, fp
 800806a:	d1f6      	bne.n	800805a <_DrawBitmap+0x1de>
 800806c:	e049      	b.n	8008102 <_DrawBitmap+0x286>
 800806e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008072:	f849 3c04 	str.w	r3, [r9, #-4]
 8008076:	b12c      	cbz	r4, 8008084 <_DrawBitmap+0x208>
 8008078:	68a3      	ldr	r3, [r4, #8]
 800807a:	4620      	mov	r0, r4
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4641      	mov	r1, r8
 8008080:	463a      	mov	r2, r7
 8008082:	4798      	blx	r3
 8008084:	9b04      	ldr	r3, [sp, #16]
 8008086:	f108 0801 	add.w	r8, r8, #1
 800808a:	445b      	add	r3, fp
 800808c:	4543      	cmp	r3, r8
 800808e:	f109 0904 	add.w	r9, r9, #4
 8008092:	d036      	beq.n	8008102 <_DrawBitmap+0x286>
 8008094:	9804      	ldr	r0, [sp, #16]
 8008096:	ebc0 030a 	rsb	r3, r0, sl
 800809a:	f813 3008 	ldrb.w	r3, [r3, r8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0f0      	beq.n	8008084 <_DrawBitmap+0x208>
 80080a2:	e7e4      	b.n	800806e <_DrawBitmap+0x1f2>
 80080a4:	f013 0303 	ands.w	r3, r3, #3
 80080a8:	d005      	beq.n	80080b6 <_DrawBitmap+0x23a>
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d129      	bne.n	8008102 <_DrawBitmap+0x286>
 80080ae:	46b1      	mov	r9, r6
 80080b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80080b4:	e01d      	b.n	80080f2 <_DrawBitmap+0x276>
 80080b6:	4b04      	ldr	r3, [pc, #16]	; (80080c8 <_DrawBitmap+0x24c>)
 80080b8:	4651      	mov	r1, sl
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	465a      	mov	r2, fp
 80080be:	4798      	blx	r3
 80080c0:	e01f      	b.n	8008102 <_DrawBitmap+0x286>
 80080c2:	bf00      	nop
 80080c4:	20000028 	.word	0x20000028
 80080c8:	2000001c 	.word	0x2000001c
 80080cc:	20000020 	.word	0x20000020
 80080d0:	f849 3c04 	str.w	r3, [r9, #-4]
 80080d4:	b12c      	cbz	r4, 80080e2 <_DrawBitmap+0x266>
 80080d6:	68a3      	ldr	r3, [r4, #8]
 80080d8:	4620      	mov	r0, r4
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4641      	mov	r1, r8
 80080de:	463a      	mov	r2, r7
 80080e0:	4798      	blx	r3
 80080e2:	9b04      	ldr	r3, [sp, #16]
 80080e4:	f108 0801 	add.w	r8, r8, #1
 80080e8:	445b      	add	r3, fp
 80080ea:	4543      	cmp	r3, r8
 80080ec:	f109 0904 	add.w	r9, r9, #4
 80080f0:	d007      	beq.n	8008102 <_DrawBitmap+0x286>
 80080f2:	9904      	ldr	r1, [sp, #16]
 80080f4:	ebc1 030a 	rsb	r3, r1, sl
 80080f8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d0f0      	beq.n	80080e2 <_DrawBitmap+0x266>
 8008100:	e7e6      	b.n	80080d0 <_DrawBitmap+0x254>
 8008102:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008106:	4492      	add	sl, r2
 8008108:	3701      	adds	r7, #1
 800810a:	441e      	add	r6, r3
 800810c:	e790      	b.n	8008030 <_DrawBitmap+0x1b4>
 800810e:	2c00      	cmp	r4, #0
 8008110:	f040 824c 	bne.w	80085ac <_DrawBitmap+0x730>
 8008114:	e24d      	b.n	80085b2 <_DrawBitmap+0x736>
 8008116:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8008118:	4bb2      	ldr	r3, [pc, #712]	; (80083e4 <_DrawBitmap+0x568>)
 800811a:	9608      	str	r6, [sp, #32]
 800811c:	007f      	lsls	r7, r7, #1
 800811e:	970c      	str	r7, [sp, #48]	; 0x30
 8008120:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8008122:	00bf      	lsls	r7, r7, #2
 8008124:	970d      	str	r7, [sp, #52]	; 0x34
 8008126:	9f07      	ldr	r7, [sp, #28]
 8008128:	9705      	str	r7, [sp, #20]
 800812a:	2d00      	cmp	r5, #0
 800812c:	bf08      	it	eq
 800812e:	461d      	moveq	r5, r3
 8008130:	9f08      	ldr	r7, [sp, #32]
 8008132:	9807      	ldr	r0, [sp, #28]
 8008134:	1f3c      	subs	r4, r7, #4
 8008136:	9f05      	ldr	r7, [sp, #20]
 8008138:	1a3b      	subs	r3, r7, r0
 800813a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800813c:	42bb      	cmp	r3, r7
 800813e:	f280 8233 	bge.w	80085a8 <_DrawBitmap+0x72c>
 8008142:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008144:	2f02      	cmp	r7, #2
 8008146:	f000 80ad 	beq.w	80082a4 <_DrawBitmap+0x428>
 800814a:	2f04      	cmp	r7, #4
 800814c:	f000 8150 	beq.w	80083f0 <_DrawBitmap+0x574>
 8008150:	2f01      	cmp	r7, #1
 8008152:	f040 821f 	bne.w	8008594 <_DrawBitmap+0x718>
 8008156:	f8df 9294 	ldr.w	r9, [pc, #660]	; 80083ec <_DrawBitmap+0x570>
 800815a:	f8d9 3000 	ldr.w	r3, [r9]
 800815e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008160:	f7fe f848 	bl	80061f4 <GUI_ALLOC_LockH>
 8008164:	f89a 3000 	ldrb.w	r3, [sl]
 8008168:	4a9f      	ldr	r2, [pc, #636]	; (80083e8 <_DrawBitmap+0x56c>)
 800816a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800816c:	5cd6      	ldrb	r6, [r2, r3]
 800816e:	f8d9 3000 	ldr.w	r3, [r9]
 8008172:	900e      	str	r0, [sp, #56]	; 0x38
 8008174:	7c1b      	ldrb	r3, [r3, #16]
 8008176:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800817a:	f003 0303 	and.w	r3, r3, #3
 800817e:	2b02      	cmp	r3, #2
 8008180:	465f      	mov	r7, fp
 8008182:	f1c1 0808 	rsb	r8, r1, #8
 8008186:	fa46 f601 	asr.w	r6, r6, r1
 800818a:	d020      	beq.n	80081ce <_DrawBitmap+0x352>
 800818c:	2b03      	cmp	r3, #3
 800818e:	d061      	beq.n	8008254 <_DrawBitmap+0x3d8>
 8008190:	2b01      	cmp	r3, #1
 8008192:	d05f      	beq.n	8008254 <_DrawBitmap+0x3d8>
 8008194:	4652      	mov	r2, sl
 8008196:	4547      	cmp	r7, r8
 8008198:	bf38      	it	cc
 800819a:	46b8      	movcc	r8, r7
 800819c:	ebc8 0707 	rsb	r7, r8, r7
 80081a0:	4643      	mov	r3, r8
 80081a2:	4621      	mov	r1, r4
 80081a4:	f006 0001 	and.w	r0, r6, #1
 80081a8:	3b01      	subs	r3, #1
 80081aa:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80081ae:	f841 0b04 	str.w	r0, [r1], #4
 80081b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80081b6:	d1f5      	bne.n	80081a4 <_DrawBitmap+0x328>
 80081b8:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 80081bc:	2f00      	cmp	r7, #0
 80081be:	d06d      	beq.n	800829c <_DrawBitmap+0x420>
 80081c0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80081c4:	4988      	ldr	r1, [pc, #544]	; (80083e8 <_DrawBitmap+0x56c>)
 80081c6:	f04f 0808 	mov.w	r8, #8
 80081ca:	5cce      	ldrb	r6, [r1, r3]
 80081cc:	e7e3      	b.n	8008196 <_DrawBitmap+0x31a>
 80081ce:	686b      	ldr	r3, [r5, #4]
 80081d0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80081d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80081d6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80081da:	4547      	cmp	r7, r8
 80081dc:	bf38      	it	cc
 80081de:	46b8      	movcc	r8, r7
 80081e0:	ebc8 0707 	rsb	r7, r8, r7
 80081e4:	f1bc 0f00 	cmp.w	ip, #0
 80081e8:	d026      	beq.n	8008238 <_DrawBitmap+0x3bc>
 80081ea:	b91e      	cbnz	r6, 80081f4 <_DrawBitmap+0x378>
 80081ec:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 80081f0:	44c1      	add	r9, r8
 80081f2:	e025      	b.n	8008240 <_DrawBitmap+0x3c4>
 80081f4:	07f0      	lsls	r0, r6, #31
 80081f6:	d50c      	bpl.n	8008212 <_DrawBitmap+0x396>
 80081f8:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80081fc:	9a05      	ldr	r2, [sp, #20]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f8cd c00c 	str.w	ip, [sp, #12]
 8008204:	4660      	mov	r0, ip
 8008206:	4649      	mov	r1, r9
 8008208:	4798      	blx	r3
 800820a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800820c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	f1b8 0801 	subs.w	r8, r8, #1
 8008216:	f109 0901 	add.w	r9, r9, #1
 800821a:	f104 0404 	add.w	r4, r4, #4
 800821e:	d00f      	beq.n	8008240 <_DrawBitmap+0x3c4>
 8008220:	0876      	lsrs	r6, r6, #1
 8008222:	e7e2      	b.n	80081ea <_DrawBitmap+0x36e>
 8008224:	07f1      	lsls	r1, r6, #31
 8008226:	bf44      	itt	mi
 8008228:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800822a:	6023      	strmi	r3, [r4, #0]
 800822c:	f1b8 0801 	subs.w	r8, r8, #1
 8008230:	f104 0404 	add.w	r4, r4, #4
 8008234:	d004      	beq.n	8008240 <_DrawBitmap+0x3c4>
 8008236:	0876      	lsrs	r6, r6, #1
 8008238:	2e00      	cmp	r6, #0
 800823a:	d1f3      	bne.n	8008224 <_DrawBitmap+0x3a8>
 800823c:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8008240:	b367      	cbz	r7, 800829c <_DrawBitmap+0x420>
 8008242:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008244:	4a68      	ldr	r2, [pc, #416]	; (80083e8 <_DrawBitmap+0x56c>)
 8008246:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800824a:	9009      	str	r0, [sp, #36]	; 0x24
 800824c:	5cd6      	ldrb	r6, [r2, r3]
 800824e:	f04f 0808 	mov.w	r8, #8
 8008252:	e7c2      	b.n	80081da <_DrawBitmap+0x35e>
 8008254:	6803      	ldr	r3, [r0, #0]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	4798      	blx	r3
 800825c:	4651      	mov	r1, sl
 800825e:	4547      	cmp	r7, r8
 8008260:	bf38      	it	cc
 8008262:	46b8      	movcc	r8, r7
 8008264:	ebc8 0707 	rsb	r7, r8, r7
 8008268:	1d23      	adds	r3, r4, #4
 800826a:	46c6      	mov	lr, r8
 800826c:	07f2      	lsls	r2, r6, #31
 800826e:	d504      	bpl.n	800827a <_DrawBitmap+0x3fe>
 8008270:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8008274:	4042      	eors	r2, r0
 8008276:	f843 2c04 	str.w	r2, [r3, #-4]
 800827a:	f1be 0e01 	subs.w	lr, lr, #1
 800827e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008282:	f103 0304 	add.w	r3, r3, #4
 8008286:	d1f1      	bne.n	800826c <_DrawBitmap+0x3f0>
 8008288:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800828c:	b137      	cbz	r7, 800829c <_DrawBitmap+0x420>
 800828e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008292:	4a55      	ldr	r2, [pc, #340]	; (80083e8 <_DrawBitmap+0x56c>)
 8008294:	f04f 0808 	mov.w	r8, #8
 8008298:	5cd6      	ldrb	r6, [r2, r3]
 800829a:	e7e0      	b.n	800825e <_DrawBitmap+0x3e2>
 800829c:	a80e      	add	r0, sp, #56	; 0x38
 800829e:	f7fd ffb7 	bl	8006210 <GUI_ALLOC_UnlockH>
 80082a2:	e177      	b.n	8008594 <_DrawBitmap+0x718>
 80082a4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80082a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082a8:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 80082ac:	f1c7 0604 	rsb	r6, r7, #4
 80082b0:	f89a 7000 	ldrb.w	r7, [sl]
 80082b4:	409f      	lsls	r7, r3
 80082b6:	4b4d      	ldr	r3, [pc, #308]	; (80083ec <_DrawBitmap+0x570>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	7c1b      	ldrb	r3, [r3, #16]
 80082bc:	f003 0303 	and.w	r3, r3, #3
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	b2f6      	uxtb	r6, r6
 80082c4:	b2ff      	uxtb	r7, r7
 80082c6:	d066      	beq.n	8008396 <_DrawBitmap+0x51a>
 80082c8:	d308      	bcc.n	80082dc <_DrawBitmap+0x460>
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	f040 8162 	bne.w	8008594 <_DrawBitmap+0x718>
 80082d0:	9804      	ldr	r0, [sp, #16]
 80082d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80082d6:	46d8      	mov	r8, fp
 80082d8:	9006      	str	r0, [sp, #24]
 80082da:	e03e      	b.n	800835a <_DrawBitmap+0x4de>
 80082dc:	4652      	mov	r2, sl
 80082de:	465b      	mov	r3, fp
 80082e0:	429e      	cmp	r6, r3
 80082e2:	bfc8      	it	gt
 80082e4:	b2de      	uxtbgt	r6, r3
 80082e6:	1b9b      	subs	r3, r3, r6
 80082e8:	4631      	mov	r1, r6
 80082ea:	4620      	mov	r0, r4
 80082ec:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 80082f0:	3901      	subs	r1, #1
 80082f2:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 80082f6:	f840 cb04 	str.w	ip, [r0], #4
 80082fa:	00bf      	lsls	r7, r7, #2
 80082fc:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8008300:	b2ff      	uxtb	r7, r7
 8008302:	d1f3      	bne.n	80082ec <_DrawBitmap+0x470>
 8008304:	3e01      	subs	r6, #1
 8008306:	b2f6      	uxtb	r6, r6
 8008308:	3601      	adds	r6, #1
 800830a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 8140 	beq.w	8008594 <_DrawBitmap+0x718>
 8008314:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8008318:	2604      	movs	r6, #4
 800831a:	e7e1      	b.n	80082e0 <_DrawBitmap+0x464>
 800831c:	9906      	ldr	r1, [sp, #24]
 800831e:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 8008322:	4449      	add	r1, r9
 8008324:	d122      	bne.n	800836c <_DrawBitmap+0x4f0>
 8008326:	f109 0901 	add.w	r9, r9, #1
 800832a:	fa5f f289 	uxtb.w	r2, r9
 800832e:	00bf      	lsls	r7, r7, #2
 8008330:	4296      	cmp	r6, r2
 8008332:	b2ff      	uxtb	r7, r7
 8008334:	d1f2      	bne.n	800831c <_DrawBitmap+0x4a0>
 8008336:	9f06      	ldr	r7, [sp, #24]
 8008338:	3e01      	subs	r6, #1
 800833a:	b2f6      	uxtb	r6, r6
 800833c:	1c7b      	adds	r3, r7, #1
 800833e:	1c72      	adds	r2, r6, #1
 8008340:	199e      	adds	r6, r3, r6
 8008342:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8008346:	9606      	str	r6, [sp, #24]
 8008348:	f1b8 0f00 	cmp.w	r8, #0
 800834c:	f000 8122 	beq.w	8008594 <_DrawBitmap+0x718>
 8008350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008352:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008356:	9309      	str	r3, [sp, #36]	; 0x24
 8008358:	2604      	movs	r6, #4
 800835a:	4546      	cmp	r6, r8
 800835c:	bfc8      	it	gt
 800835e:	fa5f f688 	uxtbgt.w	r6, r8
 8008362:	ebc6 0808 	rsb	r8, r6, r8
 8008366:	f04f 0900 	mov.w	r9, #0
 800836a:	e7d7      	b.n	800831c <_DrawBitmap+0x4a0>
 800836c:	09ba      	lsrs	r2, r7, #6
 800836e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008372:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 8008376:	f1bc 0f00 	cmp.w	ip, #0
 800837a:	d0d4      	beq.n	8008326 <_DrawBitmap+0x4aa>
 800837c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8008380:	6812      	ldr	r2, [r2, #0]
 8008382:	920b      	str	r2, [sp, #44]	; 0x2c
 8008384:	4660      	mov	r0, ip
 8008386:	f8cd c00c 	str.w	ip, [sp, #12]
 800838a:	9a05      	ldr	r2, [sp, #20]
 800838c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800838e:	4798      	blx	r3
 8008390:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008394:	e7c7      	b.n	8008326 <_DrawBitmap+0x4aa>
 8008396:	4650      	mov	r0, sl
 8008398:	465b      	mov	r3, fp
 800839a:	429e      	cmp	r6, r3
 800839c:	bfc8      	it	gt
 800839e:	b2de      	uxtbgt	r6, r3
 80083a0:	1b9b      	subs	r3, r3, r6
 80083a2:	1d22      	adds	r2, r4, #4
 80083a4:	46b4      	mov	ip, r6
 80083a6:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 80083aa:	d005      	beq.n	80083b8 <_DrawBitmap+0x53c>
 80083ac:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80083b0:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 80083b4:	f842 1c04 	str.w	r1, [r2, #-4]
 80083b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80083bc:	00bf      	lsls	r7, r7, #2
 80083be:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 80083c2:	b2ff      	uxtb	r7, r7
 80083c4:	f102 0204 	add.w	r2, r2, #4
 80083c8:	d1ed      	bne.n	80083a6 <_DrawBitmap+0x52a>
 80083ca:	3e01      	subs	r6, #1
 80083cc:	b2f6      	uxtb	r6, r6
 80083ce:	3601      	adds	r6, #1
 80083d0:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 80dd 	beq.w	8008594 <_DrawBitmap+0x718>
 80083da:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 80083de:	2604      	movs	r6, #4
 80083e0:	e7db      	b.n	800839a <_DrawBitmap+0x51e>
 80083e2:	bf00      	nop
 80083e4:	0800aaf4 	.word	0x0800aaf4
 80083e8:	0800a8f0 	.word	0x0800a8f0
 80083ec:	20000028 	.word	0x20000028
 80083f0:	4a71      	ldr	r2, [pc, #452]	; (80085b8 <_DrawBitmap+0x73c>)
 80083f2:	f89a 3000 	ldrb.w	r3, [sl]
 80083f6:	6812      	ldr	r2, [r2, #0]
 80083f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80083fa:	7c12      	ldrb	r2, [r2, #16]
 80083fc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80083fe:	f002 0203 	and.w	r2, r2, #3
 8008402:	4083      	lsls	r3, r0
 8008404:	2a01      	cmp	r2, #1
 8008406:	b2de      	uxtb	r6, r3
 8008408:	f000 809c 	beq.w	8008544 <_DrawBitmap+0x6c8>
 800840c:	d302      	bcc.n	8008414 <_DrawBitmap+0x598>
 800840e:	2a02      	cmp	r2, #2
 8008410:	d035      	beq.n	800847e <_DrawBitmap+0x602>
 8008412:	e0bf      	b.n	8008594 <_DrawBitmap+0x718>
 8008414:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8008416:	b15f      	cbz	r7, 8008430 <_DrawBitmap+0x5b4>
 8008418:	0936      	lsrs	r6, r6, #4
 800841a:	f10a 0201 	add.w	r2, sl, #1
 800841e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8008422:	6023      	str	r3, [r4, #0]
 8008424:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8008428:	9c08      	ldr	r4, [sp, #32]
 800842a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800842e:	e001      	b.n	8008434 <_DrawBitmap+0x5b8>
 8008430:	465b      	mov	r3, fp
 8008432:	4652      	mov	r2, sl
 8008434:	2b01      	cmp	r3, #1
 8008436:	dd1a      	ble.n	800846e <_DrawBitmap+0x5f2>
 8008438:	1058      	asrs	r0, r3, #1
 800843a:	f104 0108 	add.w	r1, r4, #8
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	eb02 0800 	add.w	r8, r2, r0
 8008446:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800844a:	f006 060f 	and.w	r6, r6, #15
 800844e:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 8008452:	f841 7c08 	str.w	r7, [r1, #-8]
 8008456:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800845a:	f841 6c04 	str.w	r6, [r1, #-4]
 800845e:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8008462:	4542      	cmp	r2, r8
 8008464:	f101 0108 	add.w	r1, r1, #8
 8008468:	d1ed      	bne.n	8008446 <_DrawBitmap+0x5ca>
 800846a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 8090 	beq.w	8008594 <_DrawBitmap+0x718>
 8008474:	0936      	lsrs	r6, r6, #4
 8008476:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800847a:	6023      	str	r3, [r4, #0]
 800847c:	e08a      	b.n	8008594 <_DrawBitmap+0x718>
 800847e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8008480:	b1c0      	cbz	r0, 80084b4 <_DrawBitmap+0x638>
 8008482:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8008486:	d00a      	beq.n	800849e <_DrawBitmap+0x622>
 8008488:	0936      	lsrs	r6, r6, #4
 800848a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800848e:	6023      	str	r3, [r4, #0]
 8008490:	b12f      	cbz	r7, 800849e <_DrawBitmap+0x622>
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	9904      	ldr	r1, [sp, #16]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	9a05      	ldr	r2, [sp, #20]
 800849a:	4638      	mov	r0, r7
 800849c:	4798      	blx	r3
 800849e:	9904      	ldr	r1, [sp, #16]
 80084a0:	9c08      	ldr	r4, [sp, #32]
 80084a2:	f89a 6001 	ldrb.w	r6, [sl, #1]
 80084a6:	f101 0801 	add.w	r8, r1, #1
 80084aa:	f10b 3cff 	add.w	ip, fp, #4294967295
 80084ae:	f10a 0901 	add.w	r9, sl, #1
 80084b2:	e011      	b.n	80084d8 <_DrawBitmap+0x65c>
 80084b4:	46dc      	mov	ip, fp
 80084b6:	46d1      	mov	r9, sl
 80084b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80084bc:	e00c      	b.n	80084d8 <_DrawBitmap+0x65c>
 80084be:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 80084c2:	d10d      	bne.n	80084e0 <_DrawBitmap+0x664>
 80084c4:	f016 060f 	ands.w	r6, r6, #15
 80084c8:	d11b      	bne.n	8008502 <_DrawBitmap+0x686>
 80084ca:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 80084ce:	3408      	adds	r4, #8
 80084d0:	f108 0802 	add.w	r8, r8, #2
 80084d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80084d8:	f1bc 0f01 	cmp.w	ip, #1
 80084dc:	dcef      	bgt.n	80084be <_DrawBitmap+0x642>
 80084de:	e021      	b.n	8008524 <_DrawBitmap+0x6a8>
 80084e0:	0933      	lsrs	r3, r6, #4
 80084e2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80084e6:	6023      	str	r3, [r4, #0]
 80084e8:	2f00      	cmp	r7, #0
 80084ea:	d0eb      	beq.n	80084c4 <_DrawBitmap+0x648>
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	9a05      	ldr	r2, [sp, #20]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f8cd c00c 	str.w	ip, [sp, #12]
 80084f6:	4638      	mov	r0, r7
 80084f8:	4641      	mov	r1, r8
 80084fa:	4798      	blx	r3
 80084fc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008500:	e7e0      	b.n	80084c4 <_DrawBitmap+0x648>
 8008502:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8008506:	6063      	str	r3, [r4, #4]
 8008508:	2f00      	cmp	r7, #0
 800850a:	d0de      	beq.n	80084ca <_DrawBitmap+0x64e>
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	9a05      	ldr	r2, [sp, #20]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f8cd c00c 	str.w	ip, [sp, #12]
 8008516:	4638      	mov	r0, r7
 8008518:	f108 0101 	add.w	r1, r8, #1
 800851c:	4798      	blx	r3
 800851e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008522:	e7d2      	b.n	80084ca <_DrawBitmap+0x64e>
 8008524:	f1bc 0f00 	cmp.w	ip, #0
 8008528:	d034      	beq.n	8008594 <_DrawBitmap+0x718>
 800852a:	0936      	lsrs	r6, r6, #4
 800852c:	d032      	beq.n	8008594 <_DrawBitmap+0x718>
 800852e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8008532:	6023      	str	r3, [r4, #0]
 8008534:	b377      	cbz	r7, 8008594 <_DrawBitmap+0x718>
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	9a05      	ldr	r2, [sp, #20]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4638      	mov	r0, r7
 800853e:	4641      	mov	r1, r8
 8008540:	4798      	blx	r3
 8008542:	e027      	b.n	8008594 <_DrawBitmap+0x718>
 8008544:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8008546:	f1c7 0302 	rsb	r3, r7, #2
 800854a:	b2db      	uxtb	r3, r3
 800854c:	4657      	mov	r7, sl
 800854e:	465a      	mov	r2, fp
 8008550:	4293      	cmp	r3, r2
 8008552:	bfc8      	it	gt
 8008554:	b2d3      	uxtbgt	r3, r2
 8008556:	1ad2      	subs	r2, r2, r3
 8008558:	1d20      	adds	r0, r4, #4
 800855a:	469c      	mov	ip, r3
 800855c:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8008560:	d005      	beq.n	800856e <_DrawBitmap+0x6f2>
 8008562:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8008566:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800856a:	f840 1c04 	str.w	r1, [r0, #-4]
 800856e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008572:	0136      	lsls	r6, r6, #4
 8008574:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 8008578:	b2f6      	uxtb	r6, r6
 800857a:	f100 0004 	add.w	r0, r0, #4
 800857e:	d1ed      	bne.n	800855c <_DrawBitmap+0x6e0>
 8008580:	3b01      	subs	r3, #1
 8008582:	b2db      	uxtb	r3, r3
 8008584:	3301      	adds	r3, #1
 8008586:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800858a:	b11a      	cbz	r2, 8008594 <_DrawBitmap+0x718>
 800858c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8008590:	2302      	movs	r3, #2
 8008592:	e7dd      	b.n	8008550 <_DrawBitmap+0x6d4>
 8008594:	9b05      	ldr	r3, [sp, #20]
 8008596:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8008598:	3301      	adds	r3, #1
 800859a:	44ba      	add	sl, r7
 800859c:	9305      	str	r3, [sp, #20]
 800859e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80085a0:	9b08      	ldr	r3, [sp, #32]
 80085a2:	443b      	add	r3, r7
 80085a4:	9308      	str	r3, [sp, #32]
 80085a6:	e5c3      	b.n	8008130 <_DrawBitmap+0x2b4>
 80085a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085aa:	b113      	cbz	r3, 80085b2 <_DrawBitmap+0x736>
 80085ac:	a80f      	add	r0, sp, #60	; 0x3c
 80085ae:	f7fd fe2f 	bl	8006210 <GUI_ALLOC_UnlockH>
 80085b2:	b011      	add	sp, #68	; 0x44
 80085b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	20000028 	.word	0x20000028

080085bc <GUI_MEMDEV_Delete>:
 80085bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085be:	4604      	mov	r4, r0
 80085c0:	b1d0      	cbz	r0, 80085f8 <GUI_MEMDEV_Delete+0x3c>
 80085c2:	4b0e      	ldr	r3, [pc, #56]	; (80085fc <GUI_MEMDEV_Delete+0x40>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c8:	4283      	cmp	r3, r0
 80085ca:	d101      	bne.n	80085d0 <GUI_MEMDEV_Delete+0x14>
 80085cc:	f7fd fa4b 	bl	8005a66 <GUI_SelectLCD>
 80085d0:	4620      	mov	r0, r4
 80085d2:	f7fd fe0f 	bl	80061f4 <GUI_ALLOC_LockH>
 80085d6:	9001      	str	r0, [sp, #4]
 80085d8:	6940      	ldr	r0, [r0, #20]
 80085da:	b108      	cbz	r0, 80085e0 <GUI_MEMDEV_Delete+0x24>
 80085dc:	f000 fc22 	bl	8008e24 <GUI_USAGE_DecUseCnt>
 80085e0:	ad02      	add	r5, sp, #8
 80085e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80085e6:	6818      	ldr	r0, [r3, #0]
 80085e8:	f7fc ffc4 	bl	8005574 <GUI_DEVICE_Delete>
 80085ec:	4628      	mov	r0, r5
 80085ee:	f7fd fe0f 	bl	8006210 <GUI_ALLOC_UnlockH>
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7fd fe2c 	bl	8006250 <GUI_ALLOC_Free>
 80085f8:	b003      	add	sp, #12
 80085fa:	bd30      	pop	{r4, r5, pc}
 80085fc:	20000028 	.word	0x20000028

08008600 <LCD_UpdateColorIndices>:
 8008600:	b510      	push	{r4, lr}
 8008602:	4c07      	ldr	r4, [pc, #28]	; (8008620 <LCD_UpdateColorIndices+0x20>)
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008608:	f7fc fbf2 	bl	8004df0 <LCD_Color2Index>
 800860c:	f7fc fc10 	bl	8004e30 <LCD_SetColorIndex>
 8008610:	6823      	ldr	r3, [r4, #0]
 8008612:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008614:	f7fc fbec 	bl	8004df0 <LCD_Color2Index>
 8008618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800861c:	f7fc bc24 	b.w	8004e68 <LCD_SetBkColorIndex>
 8008620:	20000028 	.word	0x20000028

08008624 <LCD_SetClipRectEx>:
 8008624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008626:	4c09      	ldr	r4, [pc, #36]	; (800864c <LCD_SetClipRectEx+0x28>)
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	7c5a      	ldrb	r2, [r3, #17]
 800862c:	4b08      	ldr	r3, [pc, #32]	; (8008650 <LCD_SetClipRectEx+0x2c>)
 800862e:	4605      	mov	r5, r0
 8008630:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008634:	68c2      	ldr	r2, [r0, #12]
 8008636:	4669      	mov	r1, sp
 8008638:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800863a:	4790      	blx	r2
 800863c:	6820      	ldr	r0, [r4, #0]
 800863e:	4629      	mov	r1, r5
 8008640:	466a      	mov	r2, sp
 8008642:	3008      	adds	r0, #8
 8008644:	f7fc fc5a 	bl	8004efc <GUI__IntersectRects>
 8008648:	b003      	add	sp, #12
 800864a:	bd30      	pop	{r4, r5, pc}
 800864c:	20000028 	.word	0x20000028
 8008650:	20028e60 	.word	0x20028e60

08008654 <LCD_SelectLCD>:
 8008654:	b510      	push	{r4, lr}
 8008656:	4b0d      	ldr	r3, [pc, #52]	; (800868c <LCD_SelectLCD+0x38>)
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	7c51      	ldrb	r1, [r2, #17]
 800865c:	4a0c      	ldr	r2, [pc, #48]	; (8008690 <LCD_SelectLCD+0x3c>)
 800865e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8008662:	461c      	mov	r4, r3
 8008664:	b140      	cbz	r0, 8008678 <LCD_SelectLCD+0x24>
 8008666:	68c3      	ldr	r3, [r0, #12]
 8008668:	b113      	cbz	r3, 8008670 <LCD_SelectLCD+0x1c>
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b04      	cmp	r3, #4
 800866e:	d001      	beq.n	8008674 <LCD_SelectLCD+0x20>
 8008670:	6800      	ldr	r0, [r0, #0]
 8008672:	e7f7      	b.n	8008664 <LCD_SelectLCD+0x10>
 8008674:	f7fc ffa6 	bl	80055c4 <GUI_DEVICE_Unlink>
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	2200      	movs	r2, #0
 800867c:	661a      	str	r2, [r3, #96]	; 0x60
 800867e:	f103 0208 	add.w	r2, r3, #8
 8008682:	615a      	str	r2, [r3, #20]
 8008684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008688:	f7fc bb4e 	b.w	8004d28 <LCD_SetClipRectMax>
 800868c:	20000028 	.word	0x20000028
 8008690:	20028e60 	.word	0x20028e60

08008694 <LCD_ReadRectEx>:
 8008694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008698:	b087      	sub	sp, #28
 800869a:	4617      	mov	r7, r2
 800869c:	9304      	str	r3, [sp, #16]
 800869e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80086a6:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80086aa:	4606      	mov	r6, r0
 80086ac:	460d      	mov	r5, r1
 80086ae:	b973      	cbnz	r3, 80086ce <LCD_ReadRectEx+0x3a>
 80086b0:	4b71      	ldr	r3, [pc, #452]	; (8008878 <LCD_ReadRectEx+0x1e4>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	7c58      	ldrb	r0, [r3, #17]
 80086b6:	f7fc f89b 	bl	80047f0 <GUI_GetBitsPerPixelEx>
 80086ba:	2808      	cmp	r0, #8
 80086bc:	4682      	mov	sl, r0
 80086be:	dd15      	ble.n	80086ec <LCD_ReadRectEx+0x58>
 80086c0:	2810      	cmp	r0, #16
 80086c2:	bfcc      	ite	gt
 80086c4:	f04f 0904 	movgt.w	r9, #4
 80086c8:	f04f 0902 	movle.w	r9, #2
 80086cc:	e010      	b.n	80086f0 <LCD_ReadRectEx+0x5c>
 80086ce:	a811      	add	r0, sp, #68	; 0x44
 80086d0:	2101      	movs	r1, #1
 80086d2:	4798      	blx	r3
 80086d4:	4684      	mov	ip, r0
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d0ea      	beq.n	80086b0 <LCD_ReadRectEx+0x1c>
 80086da:	9b04      	ldr	r3, [sp, #16]
 80086dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80086de:	e88d 0018 	stmia.w	sp, {r3, r4}
 80086e2:	4631      	mov	r1, r6
 80086e4:	462a      	mov	r2, r5
 80086e6:	463b      	mov	r3, r7
 80086e8:	47e0      	blx	ip
 80086ea:	e0c1      	b.n	8008870 <LCD_ReadRectEx+0x1dc>
 80086ec:	f04f 0901 	mov.w	r9, #1
 80086f0:	f04f 0b00 	mov.w	fp, #0
 80086f4:	9b04      	ldr	r3, [sp, #16]
 80086f6:	429d      	cmp	r5, r3
 80086f8:	f300 80ba 	bgt.w	8008870 <LCD_ReadRectEx+0x1dc>
 80086fc:	f1b9 0f02 	cmp.w	r9, #2
 8008700:	d009      	beq.n	8008716 <LCD_ReadRectEx+0x82>
 8008702:	f1b9 0f04 	cmp.w	r9, #4
 8008706:	d004      	beq.n	8008712 <LCD_ReadRectEx+0x7e>
 8008708:	f1b9 0f01 	cmp.w	r9, #1
 800870c:	f040 80ae 	bne.w	800886c <LCD_ReadRectEx+0x1d8>
 8008710:	e003      	b.n	800871a <LCD_ReadRectEx+0x86>
 8008712:	46b4      	mov	ip, r6
 8008714:	e09b      	b.n	800884e <LCD_ReadRectEx+0x1ba>
 8008716:	46b4      	mov	ip, r6
 8008718:	e08a      	b.n	8008830 <LCD_ReadRectEx+0x19c>
 800871a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800871e:	2a07      	cmp	r2, #7
 8008720:	f200 80a4 	bhi.w	800886c <LCD_ReadRectEx+0x1d8>
 8008724:	e8df f002 	tbb	[pc, r2]
 8008728:	0606080a 	.word	0x0606080a
 800872c:	04040404 	.word	0x04040404
 8008730:	46b4      	mov	ip, r6
 8008732:	e066      	b.n	8008802 <LCD_ReadRectEx+0x16e>
 8008734:	46b4      	mov	ip, r6
 8008736:	e047      	b.n	80087c8 <LCD_ReadRectEx+0x134>
 8008738:	46b4      	mov	ip, r6
 800873a:	e022      	b.n	8008782 <LCD_ReadRectEx+0xee>
 800873c:	46b4      	mov	ip, r6
 800873e:	45bc      	cmp	ip, r7
 8008740:	f300 8094 	bgt.w	800886c <LCD_ReadRectEx+0x1d8>
 8008744:	4661      	mov	r1, ip
 8008746:	462a      	mov	r2, r5
 8008748:	f8cd c00c 	str.w	ip, [sp, #12]
 800874c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800874e:	47c0      	blx	r8
 8008750:	f1cb 0207 	rsb	r2, fp, #7
 8008754:	fa00 f202 	lsl.w	r2, r0, r2
 8008758:	f64f 717f 	movw	r1, #65407	; 0xff7f
 800875c:	7820      	ldrb	r0, [r4, #0]
 800875e:	fa41 f10b 	asr.w	r1, r1, fp
 8008762:	4001      	ands	r1, r0
 8008764:	430a      	orrs	r2, r1
 8008766:	7022      	strb	r2, [r4, #0]
 8008768:	f10b 0301 	add.w	r3, fp, #1
 800876c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008770:	f023 0207 	bic.w	r2, r3, #7
 8008774:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8008778:	fa43 fb02 	asr.w	fp, r3, r2
 800877c:	f10c 0c01 	add.w	ip, ip, #1
 8008780:	e7dd      	b.n	800873e <LCD_ReadRectEx+0xaa>
 8008782:	45bc      	cmp	ip, r7
 8008784:	dc72      	bgt.n	800886c <LCD_ReadRectEx+0x1d8>
 8008786:	4661      	mov	r1, ip
 8008788:	462a      	mov	r2, r5
 800878a:	f8cd c00c 	str.w	ip, [sp, #12]
 800878e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008790:	47c0      	blx	r8
 8008792:	ea4f 024b 	mov.w	r2, fp, lsl #1
 8008796:	f1c2 0106 	rsb	r1, r2, #6
 800879a:	fa00 f101 	lsl.w	r1, r0, r1
 800879e:	f64f 703f 	movw	r0, #65343	; 0xff3f
 80087a2:	fa40 f202 	asr.w	r2, r0, r2
 80087a6:	7820      	ldrb	r0, [r4, #0]
 80087a8:	4002      	ands	r2, r0
 80087aa:	4311      	orrs	r1, r2
 80087ac:	7021      	strb	r1, [r4, #0]
 80087ae:	f10b 0301 	add.w	r3, fp, #1
 80087b2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80087b6:	f023 0203 	bic.w	r2, r3, #3
 80087ba:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 80087be:	fa43 fb02 	asr.w	fp, r3, r2
 80087c2:	f10c 0c01 	add.w	ip, ip, #1
 80087c6:	e7dc      	b.n	8008782 <LCD_ReadRectEx+0xee>
 80087c8:	45bc      	cmp	ip, r7
 80087ca:	dc4f      	bgt.n	800886c <LCD_ReadRectEx+0x1d8>
 80087cc:	4661      	mov	r1, ip
 80087ce:	462a      	mov	r2, r5
 80087d0:	f8cd c00c 	str.w	ip, [sp, #12]
 80087d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80087d6:	47c0      	blx	r8
 80087d8:	ea4f 028b 	mov.w	r2, fp, lsl #2
 80087dc:	f1c2 0104 	rsb	r1, r2, #4
 80087e0:	fa00 f101 	lsl.w	r1, r0, r1
 80087e4:	200f      	movs	r0, #15
 80087e6:	fa00 f202 	lsl.w	r2, r0, r2
 80087ea:	7820      	ldrb	r0, [r4, #0]
 80087ec:	4002      	ands	r2, r0
 80087ee:	4311      	orrs	r1, r2
 80087f0:	7021      	strb	r1, [r4, #0]
 80087f2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80087f6:	445c      	add	r4, fp
 80087f8:	f10c 0c01 	add.w	ip, ip, #1
 80087fc:	f08b 0b01 	eor.w	fp, fp, #1
 8008800:	e7e2      	b.n	80087c8 <LCD_ReadRectEx+0x134>
 8008802:	4273      	negs	r3, r6
 8008804:	1ba2      	subs	r2, r4, r6
 8008806:	45bc      	cmp	ip, r7
 8008808:	9305      	str	r3, [sp, #20]
 800880a:	4462      	add	r2, ip
 800880c:	dc0e      	bgt.n	800882c <LCD_ReadRectEx+0x198>
 800880e:	4661      	mov	r1, ip
 8008810:	462a      	mov	r2, r5
 8008812:	f8cd c00c 	str.w	ip, [sp, #12]
 8008816:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008818:	47c0      	blx	r8
 800881a:	9a05      	ldr	r2, [sp, #20]
 800881c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008820:	4422      	add	r2, r4
 8008822:	f802 000c 	strb.w	r0, [r2, ip]
 8008826:	f10c 0c01 	add.w	ip, ip, #1
 800882a:	e7ea      	b.n	8008802 <LCD_ReadRectEx+0x16e>
 800882c:	4614      	mov	r4, r2
 800882e:	e01d      	b.n	800886c <LCD_ReadRectEx+0x1d8>
 8008830:	45bc      	cmp	ip, r7
 8008832:	dc1b      	bgt.n	800886c <LCD_ReadRectEx+0x1d8>
 8008834:	4661      	mov	r1, ip
 8008836:	f8cd c00c 	str.w	ip, [sp, #12]
 800883a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800883c:	462a      	mov	r2, r5
 800883e:	47c0      	blx	r8
 8008840:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008844:	f824 0b02 	strh.w	r0, [r4], #2
 8008848:	f10c 0c01 	add.w	ip, ip, #1
 800884c:	e7f0      	b.n	8008830 <LCD_ReadRectEx+0x19c>
 800884e:	45bc      	cmp	ip, r7
 8008850:	dc0c      	bgt.n	800886c <LCD_ReadRectEx+0x1d8>
 8008852:	4661      	mov	r1, ip
 8008854:	f8cd c00c 	str.w	ip, [sp, #12]
 8008858:	9811      	ldr	r0, [sp, #68]	; 0x44
 800885a:	462a      	mov	r2, r5
 800885c:	47c0      	blx	r8
 800885e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008862:	f844 0b04 	str.w	r0, [r4], #4
 8008866:	f10c 0c01 	add.w	ip, ip, #1
 800886a:	e7f0      	b.n	800884e <LCD_ReadRectEx+0x1ba>
 800886c:	3501      	adds	r5, #1
 800886e:	e741      	b.n	80086f4 <LCD_ReadRectEx+0x60>
 8008870:	b007      	add	sp, #28
 8008872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008876:	bf00      	nop
 8008878:	20000028 	.word	0x20000028

0800887c <GUI_ReadRectEx>:
 800887c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800887e:	4d16      	ldr	r5, [pc, #88]	; (80088d8 <GUI_ReadRectEx+0x5c>)
 8008880:	9e05      	ldr	r6, [sp, #20]
 8008882:	682d      	ldr	r5, [r5, #0]
 8008884:	9c06      	ldr	r4, [sp, #24]
 8008886:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 800888a:	42b8      	cmp	r0, r7
 800888c:	bfb8      	it	lt
 800888e:	4638      	movlt	r0, r7
 8008890:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8008894:	42ba      	cmp	r2, r7
 8008896:	bfa8      	it	ge
 8008898:	463a      	movge	r2, r7
 800889a:	4282      	cmp	r2, r0
 800889c:	db1b      	blt.n	80088d6 <GUI_ReadRectEx+0x5a>
 800889e:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 80088a2:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 80088a6:	42b9      	cmp	r1, r7
 80088a8:	bfb8      	it	lt
 80088aa:	4639      	movlt	r1, r7
 80088ac:	42ab      	cmp	r3, r5
 80088ae:	bfa8      	it	ge
 80088b0:	462b      	movge	r3, r5
 80088b2:	428b      	cmp	r3, r1
 80088b4:	db0f      	blt.n	80088d6 <GUI_ReadRectEx+0x5a>
 80088b6:	68e5      	ldr	r5, [r4, #12]
 80088b8:	682d      	ldr	r5, [r5, #0]
 80088ba:	f035 0704 	bics.w	r7, r5, #4
 80088be:	d105      	bne.n	80088cc <GUI_ReadRectEx+0x50>
 80088c0:	9605      	str	r6, [sp, #20]
 80088c2:	9406      	str	r4, [sp, #24]
 80088c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80088c8:	f7ff bee4 	b.w	8008694 <LCD_ReadRectEx>
 80088cc:	6825      	ldr	r5, [r4, #0]
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	d0f6      	beq.n	80088c0 <GUI_ReadRectEx+0x44>
 80088d2:	462c      	mov	r4, r5
 80088d4:	e7ef      	b.n	80088b6 <GUI_ReadRectEx+0x3a>
 80088d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088d8:	20000028 	.word	0x20000028

080088dc <LCD_GetNumLayers>:
 80088dc:	b510      	push	{r4, lr}
 80088de:	2000      	movs	r0, #0
 80088e0:	f7fc fe38 	bl	8005554 <GUI_DEVICE__GetpDriver>
 80088e4:	1c04      	adds	r4, r0, #0
 80088e6:	f04f 0001 	mov.w	r0, #1
 80088ea:	bf18      	it	ne
 80088ec:	2401      	movne	r4, #1
 80088ee:	f7fc fe31 	bl	8005554 <GUI_DEVICE__GetpDriver>
 80088f2:	b100      	cbz	r0, 80088f6 <LCD_GetNumLayers+0x1a>
 80088f4:	3401      	adds	r4, #1
 80088f6:	4620      	mov	r0, r4
 80088f8:	bd10      	pop	{r4, pc}
	...

080088fc <LCD_GetBkColorIndex>:
 80088fc:	4b02      	ldr	r3, [pc, #8]	; (8008908 <LCD_GetBkColorIndex+0xc>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	20000028 	.word	0x20000028

0800890c <LCD_GetColorIndex>:
 800890c:	4b02      	ldr	r3, [pc, #8]	; (8008918 <LCD_GetColorIndex+0xc>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008912:	6818      	ldr	r0, [r3, #0]
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	20000028 	.word	0x20000028

0800891c <GUI__ManageCacheEx>:
 800891c:	2801      	cmp	r0, #1
 800891e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008920:	4604      	mov	r4, r0
 8008922:	460d      	mov	r5, r1
 8008924:	dc65      	bgt.n	80089f2 <GUI__ManageCacheEx+0xd6>
 8008926:	4b34      	ldr	r3, [pc, #208]	; (80089f8 <GUI__ManageCacheEx+0xdc>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	b103      	cbz	r3, 800892e <GUI__ManageCacheEx+0x12>
 800892c:	4798      	blx	r3
 800892e:	2d01      	cmp	r5, #1
 8008930:	d004      	beq.n	800893c <GUI__ManageCacheEx+0x20>
 8008932:	2d02      	cmp	r5, #2
 8008934:	d021      	beq.n	800897a <GUI__ManageCacheEx+0x5e>
 8008936:	2d00      	cmp	r5, #0
 8008938:	d15b      	bne.n	80089f2 <GUI__ManageCacheEx+0xd6>
 800893a:	e035      	b.n	80089a8 <GUI__ManageCacheEx+0x8c>
 800893c:	4e2f      	ldr	r6, [pc, #188]	; (80089fc <GUI__ManageCacheEx+0xe0>)
 800893e:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 8008942:	b9b7      	cbnz	r7, 8008972 <GUI__ManageCacheEx+0x56>
 8008944:	4620      	mov	r0, r4
 8008946:	f7fc fe05 	bl	8005554 <GUI_DEVICE__GetpDriver>
 800894a:	9001      	str	r0, [sp, #4]
 800894c:	2800      	cmp	r0, #0
 800894e:	d050      	beq.n	80089f2 <GUI__ManageCacheEx+0xd6>
 8008950:	68c3      	ldr	r3, [r0, #12]
 8008952:	210d      	movs	r1, #13
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	a801      	add	r0, sp, #4
 8008958:	4798      	blx	r3
 800895a:	4603      	mov	r3, r0
 800895c:	2800      	cmp	r0, #0
 800895e:	d048      	beq.n	80089f2 <GUI__ManageCacheEx+0xd6>
 8008960:	9801      	ldr	r0, [sp, #4]
 8008962:	4629      	mov	r1, r5
 8008964:	4798      	blx	r3
 8008966:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800896a:	3301      	adds	r3, #1
 800896c:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 8008970:	e018      	b.n	80089a4 <GUI__ManageCacheEx+0x88>
 8008972:	3701      	adds	r7, #1
 8008974:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8008978:	e03b      	b.n	80089f2 <GUI__ManageCacheEx+0xd6>
 800897a:	4620      	mov	r0, r4
 800897c:	f7fc fdea 	bl	8005554 <GUI_DEVICE__GetpDriver>
 8008980:	9001      	str	r0, [sp, #4]
 8008982:	2800      	cmp	r0, #0
 8008984:	d035      	beq.n	80089f2 <GUI__ManageCacheEx+0xd6>
 8008986:	68c3      	ldr	r3, [r0, #12]
 8008988:	210d      	movs	r1, #13
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	a801      	add	r0, sp, #4
 800898e:	4798      	blx	r3
 8008990:	4604      	mov	r4, r0
 8008992:	2800      	cmp	r0, #0
 8008994:	d02d      	beq.n	80089f2 <GUI__ManageCacheEx+0xd6>
 8008996:	4b1a      	ldr	r3, [pc, #104]	; (8008a00 <GUI__ManageCacheEx+0xe4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	b103      	cbz	r3, 800899e <GUI__ManageCacheEx+0x82>
 800899c:	4798      	blx	r3
 800899e:	9801      	ldr	r0, [sp, #4]
 80089a0:	2102      	movs	r1, #2
 80089a2:	47a0      	blx	r4
 80089a4:	2000      	movs	r0, #0
 80089a6:	e025      	b.n	80089f4 <GUI__ManageCacheEx+0xd8>
 80089a8:	4d14      	ldr	r5, [pc, #80]	; (80089fc <GUI__ManageCacheEx+0xe0>)
 80089aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d001      	beq.n	80089b6 <GUI__ManageCacheEx+0x9a>
 80089b2:	2001      	movs	r0, #1
 80089b4:	e015      	b.n	80089e2 <GUI__ManageCacheEx+0xc6>
 80089b6:	4620      	mov	r0, r4
 80089b8:	f7fc fdcc 	bl	8005554 <GUI_DEVICE__GetpDriver>
 80089bc:	9001      	str	r0, [sp, #4]
 80089be:	2800      	cmp	r0, #0
 80089c0:	d0f7      	beq.n	80089b2 <GUI__ManageCacheEx+0x96>
 80089c2:	68c3      	ldr	r3, [r0, #12]
 80089c4:	210d      	movs	r1, #13
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	a801      	add	r0, sp, #4
 80089ca:	4798      	blx	r3
 80089cc:	4606      	mov	r6, r0
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d0ef      	beq.n	80089b2 <GUI__ManageCacheEx+0x96>
 80089d2:	4b0b      	ldr	r3, [pc, #44]	; (8008a00 <GUI__ManageCacheEx+0xe4>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	b103      	cbz	r3, 80089da <GUI__ManageCacheEx+0xbe>
 80089d8:	4798      	blx	r3
 80089da:	9801      	ldr	r0, [sp, #4]
 80089dc:	2100      	movs	r1, #0
 80089de:	47b0      	blx	r6
 80089e0:	2000      	movs	r0, #0
 80089e2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bf18      	it	ne
 80089ea:	3b01      	subne	r3, #1
 80089ec:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 80089f0:	e000      	b.n	80089f4 <GUI__ManageCacheEx+0xd8>
 80089f2:	2001      	movs	r0, #1
 80089f4:	b003      	add	sp, #12
 80089f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089f8:	20028c28 	.word	0x20028c28
 80089fc:	20028c20 	.word	0x20028c20
 8008a00:	20028c1c 	.word	0x20028c1c

08008a04 <GUI__ManageCache>:
 8008a04:	4b02      	ldr	r3, [pc, #8]	; (8008a10 <GUI__ManageCache+0xc>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4601      	mov	r1, r0
 8008a0a:	7c58      	ldrb	r0, [r3, #17]
 8008a0c:	f7ff bf86 	b.w	800891c <GUI__ManageCacheEx>
 8008a10:	20000028 	.word	0x20000028

08008a14 <GUI__ExpandPixelIndicesEx>:
 8008a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a18:	1e0c      	subs	r4, r1, #0
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	f340 80b3 	ble.w	8008b86 <GUI__ExpandPixelIndicesEx+0x172>
 8008a20:	2a08      	cmp	r2, #8
 8008a22:	685f      	ldr	r7, [r3, #4]
 8008a24:	dd04      	ble.n	8008a30 <GUI__ExpandPixelIndicesEx+0x1c>
 8008a26:	2a10      	cmp	r2, #16
 8008a28:	f340 8098 	ble.w	8008b5c <GUI__ExpandPixelIndicesEx+0x148>
 8008a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a30:	3a01      	subs	r2, #1
 8008a32:	2a07      	cmp	r2, #7
 8008a34:	f200 80a7 	bhi.w	8008b86 <GUI__ExpandPixelIndicesEx+0x172>
 8008a38:	e8df f002 	tbb	[pc, r2]
 8008a3c:	58a52d04 	.word	0x58a52d04
 8008a40:	83a5a5a5 	.word	0x83a5a5a5
 8008a44:	1e66      	subs	r6, r4, #1
 8008a46:	10f2      	asrs	r2, r6, #3
 8008a48:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	eb05 0802 	add.w	r8, r5, r2
 8008a52:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8008a56:	f006 0607 	and.w	r6, r6, #7
 8008a5a:	f815 a002 	ldrb.w	sl, [r5, r2]
 8008a5e:	2580      	movs	r5, #128	; 0x80
 8008a60:	4135      	asrs	r5, r6
 8008a62:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a66:	b2ed      	uxtb	r5, r5
 8008a68:	f1c6 0307 	rsb	r3, r6, #7
 8008a6c:	ea0a 0005 	and.w	r0, sl, r5
 8008a70:	4118      	asrs	r0, r3
 8008a72:	47b8      	blx	r7
 8008a74:	f849 0904 	str.w	r0, [r9], #-4
 8008a78:	b936      	cbnz	r6, 8008a88 <GUI__ExpandPixelIndicesEx+0x74>
 8008a7a:	f898 a000 	ldrb.w	sl, [r8]
 8008a7e:	2501      	movs	r5, #1
 8008a80:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a84:	2607      	movs	r6, #7
 8008a86:	e002      	b.n	8008a8e <GUI__ExpandPixelIndicesEx+0x7a>
 8008a88:	006d      	lsls	r5, r5, #1
 8008a8a:	3e01      	subs	r6, #1
 8008a8c:	b2ed      	uxtb	r5, r5
 8008a8e:	3c01      	subs	r4, #1
 8008a90:	d1ea      	bne.n	8008a68 <GUI__ExpandPixelIndicesEx+0x54>
 8008a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a96:	1e66      	subs	r6, r4, #1
 8008a98:	10b2      	asrs	r2, r6, #2
 8008a9a:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	f006 0603 	and.w	r6, r6, #3
 8008aa4:	eb05 0802 	add.w	r8, r5, r2
 8008aa8:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8008aac:	f815 a002 	ldrb.w	sl, [r5, r2]
 8008ab0:	0073      	lsls	r3, r6, #1
 8008ab2:	25c0      	movs	r5, #192	; 0xc0
 8008ab4:	411d      	asrs	r5, r3
 8008ab6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008aba:	b2ed      	uxtb	r5, r5
 8008abc:	0073      	lsls	r3, r6, #1
 8008abe:	f1c3 0306 	rsb	r3, r3, #6
 8008ac2:	ea0a 0005 	and.w	r0, sl, r5
 8008ac6:	4118      	asrs	r0, r3
 8008ac8:	47b8      	blx	r7
 8008aca:	f849 0904 	str.w	r0, [r9], #-4
 8008ace:	b936      	cbnz	r6, 8008ade <GUI__ExpandPixelIndicesEx+0xca>
 8008ad0:	2503      	movs	r5, #3
 8008ad2:	f898 a000 	ldrb.w	sl, [r8]
 8008ad6:	462e      	mov	r6, r5
 8008ad8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008adc:	e002      	b.n	8008ae4 <GUI__ExpandPixelIndicesEx+0xd0>
 8008ade:	00ad      	lsls	r5, r5, #2
 8008ae0:	3e01      	subs	r6, #1
 8008ae2:	b2ed      	uxtb	r5, r5
 8008ae4:	3c01      	subs	r4, #1
 8008ae6:	d1e9      	bne.n	8008abc <GUI__ExpandPixelIndicesEx+0xa8>
 8008ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aec:	1e66      	subs	r6, r4, #1
 8008aee:	1072      	asrs	r2, r6, #1
 8008af0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8008af4:	3b01      	subs	r3, #1
 8008af6:	f006 0601 	and.w	r6, r6, #1
 8008afa:	eb05 0802 	add.w	r8, r5, r2
 8008afe:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8008b02:	f815 a002 	ldrb.w	sl, [r5, r2]
 8008b06:	00b3      	lsls	r3, r6, #2
 8008b08:	25f0      	movs	r5, #240	; 0xf0
 8008b0a:	411d      	asrs	r5, r3
 8008b0c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b10:	b2ed      	uxtb	r5, r5
 8008b12:	00b3      	lsls	r3, r6, #2
 8008b14:	f1c3 0304 	rsb	r3, r3, #4
 8008b18:	ea0a 0005 	and.w	r0, sl, r5
 8008b1c:	4118      	asrs	r0, r3
 8008b1e:	47b8      	blx	r7
 8008b20:	f849 0904 	str.w	r0, [r9], #-4
 8008b24:	b936      	cbnz	r6, 8008b34 <GUI__ExpandPixelIndicesEx+0x120>
 8008b26:	f898 a000 	ldrb.w	sl, [r8]
 8008b2a:	250f      	movs	r5, #15
 8008b2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b30:	2601      	movs	r6, #1
 8008b32:	e002      	b.n	8008b3a <GUI__ExpandPixelIndicesEx+0x126>
 8008b34:	012d      	lsls	r5, r5, #4
 8008b36:	b2ed      	uxtb	r5, r5
 8008b38:	2600      	movs	r6, #0
 8008b3a:	3c01      	subs	r4, #1
 8008b3c:	d1e9      	bne.n	8008b12 <GUI__ExpandPixelIndicesEx+0xfe>
 8008b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b42:	192e      	adds	r6, r5, r4
 8008b44:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8008b48:	1b34      	subs	r4, r6, r4
 8008b4a:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8008b4e:	47b8      	blx	r7
 8008b50:	42a6      	cmp	r6, r4
 8008b52:	f845 0d04 	str.w	r0, [r5, #-4]!
 8008b56:	d1f8      	bne.n	8008b4a <GUI__ExpandPixelIndicesEx+0x136>
 8008b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5c:	695e      	ldr	r6, [r3, #20]
 8008b5e:	b12e      	cbz	r6, 8008b6c <GUI__ExpandPixelIndicesEx+0x158>
 8008b60:	4629      	mov	r1, r5
 8008b62:	4622      	mov	r2, r4
 8008b64:	2302      	movs	r3, #2
 8008b66:	47b0      	blx	r6
 8008b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6c:	0064      	lsls	r4, r4, #1
 8008b6e:	4425      	add	r5, r4
 8008b70:	192e      	adds	r6, r5, r4
 8008b72:	1b2c      	subs	r4, r5, r4
 8008b74:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 8008b78:	47b8      	blx	r7
 8008b7a:	42a5      	cmp	r5, r4
 8008b7c:	f846 0d04 	str.w	r0, [r6, #-4]!
 8008b80:	d1f8      	bne.n	8008b74 <GUI__ExpandPixelIndicesEx+0x160>
 8008b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08008b8c <GUI_SignalEvent>:
 8008b8c:	b508      	push	{r3, lr}
 8008b8e:	4b02      	ldr	r3, [pc, #8]	; (8008b98 <GUI_SignalEvent+0xc>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	b103      	cbz	r3, 8008b96 <GUI_SignalEvent+0xa>
 8008b94:	4798      	blx	r3
 8008b96:	bd08      	pop	{r3, pc}
 8008b98:	20028c2c 	.word	0x20028c2c

08008b9c <_GetCharCode>:
 8008b9c:	7800      	ldrb	r0, [r0, #0]
 8008b9e:	4770      	bx	lr

08008ba0 <_GetCharSize>:
 8008ba0:	2001      	movs	r0, #1
 8008ba2:	4770      	bx	lr

08008ba4 <_CalcSizeOfChar>:
 8008ba4:	2001      	movs	r0, #1
 8008ba6:	4770      	bx	lr

08008ba8 <_Encode>:
 8008ba8:	7001      	strb	r1, [r0, #0]
 8008baa:	2001      	movs	r0, #1
 8008bac:	4770      	bx	lr
	...

08008bb0 <GUI_StoreKey>:
 8008bb0:	4b02      	ldr	r3, [pc, #8]	; (8008bbc <GUI_StoreKey+0xc>)
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	b902      	cbnz	r2, 8008bb8 <GUI_StoreKey+0x8>
 8008bb6:	6018      	str	r0, [r3, #0]
 8008bb8:	f7ff bfe8 	b.w	8008b8c <GUI_SignalEvent>
 8008bbc:	20028c30 	.word	0x20028c30

08008bc0 <LCD_Index2Color_M888>:
 8008bc0:	b2c2      	uxtb	r2, r0
 8008bc2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8008bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8008bce:	4318      	orrs	r0, r3
 8008bd0:	4770      	bx	lr

08008bd2 <LCD_Index2Color_M8888I>:
 8008bd2:	43c3      	mvns	r3, r0
 8008bd4:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8008bd8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	b2c2      	uxtb	r2, r0
 8008be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008be4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8008be8:	4318      	orrs	r0, r3
 8008bea:	4770      	bx	lr

08008bec <WM__GetFirstSibling>:
 8008bec:	b508      	push	{r3, lr}
 8008bee:	f7fe f913 	bl	8006e18 <WM_GetParent>
 8008bf2:	b118      	cbz	r0, 8008bfc <WM__GetFirstSibling+0x10>
 8008bf4:	f7fd faf4 	bl	80061e0 <GUI_ALLOC_h2p>
 8008bf8:	69c0      	ldr	r0, [r0, #28]
 8008bfa:	bd08      	pop	{r3, pc}
 8008bfc:	bd08      	pop	{r3, pc}

08008bfe <WM__GetPrevSibling>:
 8008bfe:	b538      	push	{r3, r4, r5, lr}
 8008c00:	4605      	mov	r5, r0
 8008c02:	f7ff fff3 	bl	8008bec <WM__GetFirstSibling>
 8008c06:	4604      	mov	r4, r0
 8008c08:	b154      	cbz	r4, 8008c20 <WM__GetPrevSibling+0x22>
 8008c0a:	42ac      	cmp	r4, r5
 8008c0c:	d007      	beq.n	8008c1e <WM__GetPrevSibling+0x20>
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f7fd fae6 	bl	80061e0 <GUI_ALLOC_h2p>
 8008c14:	6a03      	ldr	r3, [r0, #32]
 8008c16:	42ab      	cmp	r3, r5
 8008c18:	d002      	beq.n	8008c20 <WM__GetPrevSibling+0x22>
 8008c1a:	461c      	mov	r4, r3
 8008c1c:	e7f4      	b.n	8008c08 <WM__GetPrevSibling+0xa>
 8008c1e:	2400      	movs	r4, #0
 8008c20:	4620      	mov	r0, r4
 8008c22:	bd38      	pop	{r3, r4, r5, pc}

08008c24 <WM__SendMessage>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	4c0d      	ldr	r4, [pc, #52]	; (8008c5c <WM__SendMessage+0x38>)
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	2b13      	cmp	r3, #19
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	460d      	mov	r5, r1
 8008c30:	dc12      	bgt.n	8008c58 <WM__SendMessage+0x34>
 8008c32:	f7fd fad5 	bl	80061e0 <GUI_ALLOC_h2p>
 8008c36:	6903      	ldr	r3, [r0, #16]
 8008c38:	606e      	str	r6, [r5, #4]
 8008c3a:	b143      	cbz	r3, 8008c4e <WM__SendMessage+0x2a>
 8008c3c:	6822      	ldr	r2, [r4, #0]
 8008c3e:	4628      	mov	r0, r5
 8008c40:	3201      	adds	r2, #1
 8008c42:	6022      	str	r2, [r4, #0]
 8008c44:	4798      	blx	r3
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	6023      	str	r3, [r4, #0]
 8008c4c:	bd70      	pop	{r4, r5, r6, pc}
 8008c4e:	4628      	mov	r0, r5
 8008c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c54:	f7fe bebe 	b.w	80079d4 <WM_DefaultProc>
 8008c58:	bd70      	pop	{r4, r5, r6, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20028c34 	.word	0x20028c34

08008c60 <WM__AddCriticalHandle>:
 8008c60:	4b02      	ldr	r3, [pc, #8]	; (8008c6c <WM__AddCriticalHandle+0xc>)
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	6002      	str	r2, [r0, #0]
 8008c66:	6018      	str	r0, [r3, #0]
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	20028f74 	.word	0x20028f74

08008c70 <WM__GetClientRectEx>:
 8008c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c72:	460d      	mov	r5, r1
 8008c74:	b158      	cbz	r0, 8008c8e <WM__GetClientRectEx+0x1e>
 8008c76:	b151      	cbz	r1, 8008c8e <WM__GetClientRectEx+0x1e>
 8008c78:	f7fd fabc 	bl	80061f4 <GUI_ALLOC_LockH>
 8008c7c:	ac02      	add	r4, sp, #8
 8008c7e:	4629      	mov	r1, r5
 8008c80:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008c84:	f7fe fb66 	bl	8007354 <WM__GetClientRectWin>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f7fd fac1 	bl	8006210 <GUI_ALLOC_UnlockH>
 8008c8e:	b003      	add	sp, #12
 8008c90:	bd30      	pop	{r4, r5, pc}
	...

08008c94 <GUI_MEMDEV__WriteToActiveAlpha>:
 8008c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c98:	4d5f      	ldr	r5, [pc, #380]	; (8008e18 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 8008c9a:	4f60      	ldr	r7, [pc, #384]	; (8008e1c <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	7c5b      	ldrb	r3, [r3, #17]
 8008ca0:	b091      	sub	sp, #68	; 0x44
 8008ca2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8008ca6:	900d      	str	r0, [sp, #52]	; 0x34
 8008ca8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8008cac:	460e      	mov	r6, r1
 8008cae:	4614      	mov	r4, r2
 8008cb0:	f7fd faa0 	bl	80061f4 <GUI_ALLOC_LockH>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	a810      	add	r0, sp, #64	; 0x40
 8008cb8:	6813      	ldr	r3, [r2, #0]
 8008cba:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	f8b2 a008 	ldrh.w	sl, [r2, #8]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 8008cca:	9309      	str	r3, [sp, #36]	; 0x24
 8008ccc:	f7fd faa0 	bl	8006210 <GUI_ALLOC_UnlockH>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	7c5b      	ldrb	r3, [r3, #17]
 8008cd4:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8008cd8:	68c3      	ldr	r3, [r0, #12]
 8008cda:	2108      	movs	r1, #8
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cde:	4798      	blx	r3
 8008ce0:	2817      	cmp	r0, #23
 8008ce2:	bf88      	it	hi
 8008ce4:	2020      	movhi	r0, #32
 8008ce6:	9008      	str	r0, [sp, #32]
 8008ce8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008cec:	f8d8 2000 	ldr.w	r2, [r8]
 8008cf0:	910a      	str	r1, [sp, #40]	; 0x28
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	920b      	str	r2, [sp, #44]	; 0x2c
 8008cf6:	f7fc fb3d 	bl	8005374 <GUI__AllocAlphaBuffer>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f040 8089 	bne.w	8008e12 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8008d00:	682a      	ldr	r2, [r5, #0]
 8008d02:	fa0f f78a 	sxth.w	r7, sl
 8008d06:	19f5      	adds	r5, r6, r7
 8008d08:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8008d0c:	3d01      	subs	r5, #1
 8008d0e:	1aed      	subs	r5, r5, r3
 8008d10:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8008d14:	2d00      	cmp	r5, #0
 8008d16:	bfcc      	ite	gt
 8008d18:	ebc5 0507 	rsbgt	r5, r5, r7
 8008d1c:	463d      	movle	r5, r7
 8008d1e:	42b3      	cmp	r3, r6
 8008d20:	bfc3      	ittte	gt
 8008d22:	ebc6 0103 	rsbgt	r1, r6, r3
 8008d26:	ebc1 0505 	rsbgt	r5, r1, r5
 8008d2a:	461e      	movgt	r6, r3
 8008d2c:	2100      	movle	r1, #0
 8008d2e:	2d00      	cmp	r5, #0
 8008d30:	dd6f      	ble.n	8008e12 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8008d32:	fa0f f389 	sxth.w	r3, r9
 8008d36:	18e0      	adds	r0, r4, r3
 8008d38:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 8008d3c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8008d40:	3801      	subs	r0, #1
 8008d42:	ebcc 0000 	rsb	r0, ip, r0
 8008d46:	2800      	cmp	r0, #0
 8008d48:	bfc8      	it	gt
 8008d4a:	ebc0 0303 	rsbgt	r3, r0, r3
 8008d4e:	4294      	cmp	r4, r2
 8008d50:	bfbd      	ittte	lt
 8008d52:	ebc4 0b02 	rsblt	fp, r4, r2
 8008d56:	ebcb 0303 	rsblt	r3, fp, r3
 8008d5a:	4614      	movlt	r4, r2
 8008d5c:	f04f 0b00 	movge.w	fp, #0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	dd56      	ble.n	8008e12 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8008d64:	fb07 1b0b 	mla	fp, r7, fp, r1
 8008d68:	18e3      	adds	r3, r4, r3
 8008d6a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8008d6e:	930c      	str	r3, [sp, #48]	; 0x30
 8008d70:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008d72:	f7fe ff01 	bl	8007b78 <GUI_MEMDEV_GetDataPtr>
 8008d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	ab0f      	add	r3, sp, #60	; 0x3c
 8008d7c:	eb00 020b 	add.w	r2, r0, fp
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	4630      	mov	r0, r6
 8008d84:	4621      	mov	r1, r4
 8008d86:	462b      	mov	r3, r5
 8008d88:	f7fc fa0a 	bl	80051a0 <GUI__DoAlphaBlending>
 8008d8c:	4681      	mov	r9, r0
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d03f      	beq.n	8008e12 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8008d92:	4b23      	ldr	r3, [pc, #140]	; (8008e20 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 8008d94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d96:	4299      	cmp	r1, r3
 8008d98:	d01e      	beq.n	8008dd8 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	9a08      	ldr	r2, [sp, #32]
 8008d9e:	4643      	mov	r3, r8
 8008da0:	f000 f93d 	bl	800901e <GUI__CompactPixelIndicesEx>
 8008da4:	b9c0      	cbnz	r0, 8008dd8 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8008da6:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8008daa:	f1bc 0f00 	cmp.w	ip, #0
 8008dae:	d006      	beq.n	8008dbe <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 8008db0:	4648      	mov	r0, r9
 8008db2:	4649      	mov	r1, r9
 8008db4:	fa0f f28a 	sxth.w	r2, sl
 8008db8:	2304      	movs	r3, #4
 8008dba:	47e0      	blx	ip
 8008dbc:	e00c      	b.n	8008dd8 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8008dbe:	464a      	mov	r2, r9
 8008dc0:	463b      	mov	r3, r7
 8008dc2:	6810      	ldr	r0, [r2, #0]
 8008dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dc6:	9206      	str	r2, [sp, #24]
 8008dc8:	9307      	str	r3, [sp, #28]
 8008dca:	4788      	blx	r1
 8008dcc:	9b07      	ldr	r3, [sp, #28]
 8008dce:	9a06      	ldr	r2, [sp, #24]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	f842 0b04 	str.w	r0, [r2], #4
 8008dd6:	d1f4      	bne.n	8008dc2 <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 8008dd8:	9a08      	ldr	r2, [sp, #32]
 8008dda:	9202      	str	r2, [sp, #8]
 8008ddc:	2301      	movs	r3, #1
 8008dde:	2200      	movs	r2, #0
 8008de0:	f104 0c01 	add.w	ip, r4, #1
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	9203      	str	r2, [sp, #12]
 8008dea:	9205      	str	r2, [sp, #20]
 8008dec:	f8cd 9010 	str.w	r9, [sp, #16]
 8008df0:	4630      	mov	r0, r6
 8008df2:	4621      	mov	r1, r4
 8008df4:	462a      	mov	r2, r5
 8008df6:	f8cd c01c 	str.w	ip, [sp, #28]
 8008dfa:	f7fb fe89 	bl	8004b10 <LCD_DrawBitmap>
 8008dfe:	2304      	movs	r3, #4
 8008e00:	fb1a bb03 	smlabb	fp, sl, r3, fp
 8008e04:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e0a:	459c      	cmp	ip, r3
 8008e0c:	d001      	beq.n	8008e12 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8008e0e:	4664      	mov	r4, ip
 8008e10:	e7ae      	b.n	8008d70 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 8008e12:	b011      	add	sp, #68	; 0x44
 8008e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e18:	20000028 	.word	0x20000028
 8008e1c:	20028e60 	.word	0x20028e60
 8008e20:	080066f7 	.word	0x080066f7

08008e24 <GUI_USAGE_DecUseCnt>:
 8008e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e26:	4605      	mov	r5, r0
 8008e28:	f7fd f9e4 	bl	80061f4 <GUI_ALLOC_LockH>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	a802      	add	r0, sp, #8
 8008e30:	8994      	ldrh	r4, [r2, #12]
 8008e32:	f840 2d04 	str.w	r2, [r0, #-4]!
 8008e36:	3c01      	subs	r4, #1
 8008e38:	b2a4      	uxth	r4, r4
 8008e3a:	8194      	strh	r4, [r2, #12]
 8008e3c:	f7fd f9e8 	bl	8006210 <GUI_ALLOC_UnlockH>
 8008e40:	b914      	cbnz	r4, 8008e48 <GUI_USAGE_DecUseCnt+0x24>
 8008e42:	4628      	mov	r0, r5
 8008e44:	f7fd fa04 	bl	8006250 <GUI_ALLOC_Free>
 8008e48:	b003      	add	sp, #12
 8008e4a:	bd30      	pop	{r4, r5, pc}

08008e4c <GUI_USAGE_AddRect>:
 8008e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e50:	4605      	mov	r5, r0
 8008e52:	4688      	mov	r8, r1
 8008e54:	4617      	mov	r7, r2
 8008e56:	4699      	mov	r9, r3
 8008e58:	68a8      	ldr	r0, [r5, #8]
 8008e5a:	464b      	mov	r3, r9
 8008e5c:	6846      	ldr	r6, [r0, #4]
 8008e5e:	4641      	mov	r1, r8
 8008e60:	4628      	mov	r0, r5
 8008e62:	1c54      	adds	r4, r2, #1
 8008e64:	47b0      	blx	r6
 8008e66:	9b08      	ldr	r3, [sp, #32]
 8008e68:	443b      	add	r3, r7
 8008e6a:	42a3      	cmp	r3, r4
 8008e6c:	d001      	beq.n	8008e72 <GUI_USAGE_AddRect+0x26>
 8008e6e:	4622      	mov	r2, r4
 8008e70:	e7f2      	b.n	8008e58 <GUI_USAGE_AddRect+0xc>
 8008e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008e76 <GUI__ConvertColor2Index>:
 8008e76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e7a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e7e:	681e      	ldr	r6, [r3, #0]
 8008e80:	f1b8 0f00 	cmp.w	r8, #0
 8008e84:	bf08      	it	eq
 8008e86:	4680      	moveq	r8, r0
 8008e88:	2a08      	cmp	r2, #8
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	460d      	mov	r5, r1
 8008e8e:	dd05      	ble.n	8008e9c <GUI__ConvertColor2Index+0x26>
 8008e90:	2a10      	cmp	r2, #16
 8008e92:	f340 80b6 	ble.w	8009002 <GUI__ConvertColor2Index+0x18c>
 8008e96:	2000      	movs	r0, #0
 8008e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e9c:	3a01      	subs	r2, #1
 8008e9e:	2a07      	cmp	r2, #7
 8008ea0:	f200 80a4 	bhi.w	8008fec <GUI__ConvertColor2Index+0x176>
 8008ea4:	e8df f002 	tbb	[pc, r2]
 8008ea8:	87a26111 	.word	0x87a26111
 8008eac:	92a2a2a2 	.word	0x92a2a2a2
 8008eb0:	69e0      	ldr	r0, [r4, #28]
 8008eb2:	47b0      	blx	r6
 8008eb4:	4338      	orrs	r0, r7
 8008eb6:	f104 0920 	add.w	r9, r4, #32
 8008eba:	b2c7      	uxtb	r7, r0
 8008ebc:	3d08      	subs	r5, #8
 8008ebe:	f808 7b01 	strb.w	r7, [r8], #1
 8008ec2:	2d00      	cmp	r5, #0
 8008ec4:	f000 8092 	beq.w	8008fec <GUI__ConvertColor2Index+0x176>
 8008ec8:	464c      	mov	r4, r9
 8008eca:	6820      	ldr	r0, [r4, #0]
 8008ecc:	47b0      	blx	r6
 8008ece:	2d01      	cmp	r5, #1
 8008ed0:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8008ed4:	b2c7      	uxtb	r7, r0
 8008ed6:	f000 808c 	beq.w	8008ff2 <GUI__ConvertColor2Index+0x17c>
 8008eda:	6860      	ldr	r0, [r4, #4]
 8008edc:	47b0      	blx	r6
 8008ede:	2d02      	cmp	r5, #2
 8008ee0:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 8008ee4:	b2c7      	uxtb	r7, r0
 8008ee6:	d102      	bne.n	8008eee <GUI__ConvertColor2Index+0x78>
 8008ee8:	f104 0908 	add.w	r9, r4, #8
 8008eec:	e083      	b.n	8008ff6 <GUI__ConvertColor2Index+0x180>
 8008eee:	68a0      	ldr	r0, [r4, #8]
 8008ef0:	47b0      	blx	r6
 8008ef2:	2d03      	cmp	r5, #3
 8008ef4:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 8008ef8:	b2c7      	uxtb	r7, r0
 8008efa:	d102      	bne.n	8008f02 <GUI__ConvertColor2Index+0x8c>
 8008efc:	f104 090c 	add.w	r9, r4, #12
 8008f00:	e079      	b.n	8008ff6 <GUI__ConvertColor2Index+0x180>
 8008f02:	68e0      	ldr	r0, [r4, #12]
 8008f04:	47b0      	blx	r6
 8008f06:	2d04      	cmp	r5, #4
 8008f08:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8008f0c:	b2c7      	uxtb	r7, r0
 8008f0e:	d102      	bne.n	8008f16 <GUI__ConvertColor2Index+0xa0>
 8008f10:	f104 0910 	add.w	r9, r4, #16
 8008f14:	e06f      	b.n	8008ff6 <GUI__ConvertColor2Index+0x180>
 8008f16:	6920      	ldr	r0, [r4, #16]
 8008f18:	47b0      	blx	r6
 8008f1a:	2d05      	cmp	r5, #5
 8008f1c:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8008f20:	b2c7      	uxtb	r7, r0
 8008f22:	d102      	bne.n	8008f2a <GUI__ConvertColor2Index+0xb4>
 8008f24:	f104 0914 	add.w	r9, r4, #20
 8008f28:	e065      	b.n	8008ff6 <GUI__ConvertColor2Index+0x180>
 8008f2a:	6960      	ldr	r0, [r4, #20]
 8008f2c:	47b0      	blx	r6
 8008f2e:	2d06      	cmp	r5, #6
 8008f30:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8008f34:	b2c7      	uxtb	r7, r0
 8008f36:	d102      	bne.n	8008f3e <GUI__ConvertColor2Index+0xc8>
 8008f38:	f104 0918 	add.w	r9, r4, #24
 8008f3c:	e05b      	b.n	8008ff6 <GUI__ConvertColor2Index+0x180>
 8008f3e:	69a0      	ldr	r0, [r4, #24]
 8008f40:	47b0      	blx	r6
 8008f42:	2d07      	cmp	r5, #7
 8008f44:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8008f48:	b2c7      	uxtb	r7, r0
 8008f4a:	d1b1      	bne.n	8008eb0 <GUI__ConvertColor2Index+0x3a>
 8008f4c:	f104 091c 	add.w	r9, r4, #28
 8008f50:	e051      	b.n	8008ff6 <GUI__ConvertColor2Index+0x180>
 8008f52:	68e0      	ldr	r0, [r4, #12]
 8008f54:	47b0      	blx	r6
 8008f56:	4338      	orrs	r0, r7
 8008f58:	f104 0910 	add.w	r9, r4, #16
 8008f5c:	b2c7      	uxtb	r7, r0
 8008f5e:	3d04      	subs	r5, #4
 8008f60:	f808 7b01 	strb.w	r7, [r8], #1
 8008f64:	2d00      	cmp	r5, #0
 8008f66:	d041      	beq.n	8008fec <GUI__ConvertColor2Index+0x176>
 8008f68:	464c      	mov	r4, r9
 8008f6a:	6820      	ldr	r0, [r4, #0]
 8008f6c:	47b0      	blx	r6
 8008f6e:	2d01      	cmp	r5, #1
 8008f70:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8008f74:	b2c7      	uxtb	r7, r0
 8008f76:	d040      	beq.n	8008ffa <GUI__ConvertColor2Index+0x184>
 8008f78:	6860      	ldr	r0, [r4, #4]
 8008f7a:	47b0      	blx	r6
 8008f7c:	2d02      	cmp	r5, #2
 8008f7e:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8008f82:	b2c7      	uxtb	r7, r0
 8008f84:	d102      	bne.n	8008f8c <GUI__ConvertColor2Index+0x116>
 8008f86:	f104 0908 	add.w	r9, r4, #8
 8008f8a:	e038      	b.n	8008ffe <GUI__ConvertColor2Index+0x188>
 8008f8c:	68a0      	ldr	r0, [r4, #8]
 8008f8e:	47b0      	blx	r6
 8008f90:	2d03      	cmp	r5, #3
 8008f92:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8008f96:	b2c7      	uxtb	r7, r0
 8008f98:	d1db      	bne.n	8008f52 <GUI__ConvertColor2Index+0xdc>
 8008f9a:	f104 090c 	add.w	r9, r4, #12
 8008f9e:	e02e      	b.n	8008ffe <GUI__ConvertColor2Index+0x188>
 8008fa0:	6860      	ldr	r0, [r4, #4]
 8008fa2:	47b0      	blx	r6
 8008fa4:	4338      	orrs	r0, r7
 8008fa6:	f104 0908 	add.w	r9, r4, #8
 8008faa:	b2c7      	uxtb	r7, r0
 8008fac:	3d02      	subs	r5, #2
 8008fae:	f808 7b01 	strb.w	r7, [r8], #1
 8008fb2:	b1dd      	cbz	r5, 8008fec <GUI__ConvertColor2Index+0x176>
 8008fb4:	464c      	mov	r4, r9
 8008fb6:	6820      	ldr	r0, [r4, #0]
 8008fb8:	47b0      	blx	r6
 8008fba:	2d01      	cmp	r5, #1
 8008fbc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8008fc0:	b2c7      	uxtb	r7, r0
 8008fc2:	d1ed      	bne.n	8008fa0 <GUI__ConvertColor2Index+0x12a>
 8008fc4:	f104 0904 	add.w	r9, r4, #4
 8008fc8:	2500      	movs	r5, #0
 8008fca:	e7f0      	b.n	8008fae <GUI__ConvertColor2Index+0x138>
 8008fcc:	691f      	ldr	r7, [r3, #16]
 8008fce:	b12f      	cbz	r7, 8008fdc <GUI__ConvertColor2Index+0x166>
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	4641      	mov	r1, r8
 8008fd4:	462a      	mov	r2, r5
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	47b8      	blx	r7
 8008fda:	e007      	b.n	8008fec <GUI__ConvertColor2Index+0x176>
 8008fdc:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8008fe0:	47b0      	blx	r6
 8008fe2:	f808 0007 	strb.w	r0, [r8, r7]
 8008fe6:	3701      	adds	r7, #1
 8008fe8:	42bd      	cmp	r5, r7
 8008fea:	d1f7      	bne.n	8008fdc <GUI__ConvertColor2Index+0x166>
 8008fec:	2001      	movs	r0, #1
 8008fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff2:	f104 0904 	add.w	r9, r4, #4
 8008ff6:	2500      	movs	r5, #0
 8008ff8:	e761      	b.n	8008ebe <GUI__ConvertColor2Index+0x48>
 8008ffa:	f104 0904 	add.w	r9, r4, #4
 8008ffe:	2500      	movs	r5, #0
 8009000:	e7ae      	b.n	8008f60 <GUI__ConvertColor2Index+0xea>
 8009002:	691f      	ldr	r7, [r3, #16]
 8009004:	b11f      	cbz	r7, 800900e <GUI__ConvertColor2Index+0x198>
 8009006:	4641      	mov	r1, r8
 8009008:	462a      	mov	r2, r5
 800900a:	2302      	movs	r3, #2
 800900c:	e7e4      	b.n	8008fd8 <GUI__ConvertColor2Index+0x162>
 800900e:	f854 0b04 	ldr.w	r0, [r4], #4
 8009012:	47b0      	blx	r6
 8009014:	3d01      	subs	r5, #1
 8009016:	f828 0b02 	strh.w	r0, [r8], #2
 800901a:	d1f8      	bne.n	800900e <GUI__ConvertColor2Index+0x198>
 800901c:	e7e6      	b.n	8008fec <GUI__ConvertColor2Index+0x176>

0800901e <GUI__CompactPixelIndicesEx>:
 800901e:	b513      	push	{r0, r1, r4, lr}
 8009020:	2400      	movs	r4, #0
 8009022:	9400      	str	r4, [sp, #0]
 8009024:	f7ff ff27 	bl	8008e76 <GUI__ConvertColor2Index>
 8009028:	b002      	add	sp, #8
 800902a:	bd10      	pop	{r4, pc}

0800902c <__libc_init_array>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	4e0d      	ldr	r6, [pc, #52]	; (8009064 <__libc_init_array+0x38>)
 8009030:	4c0d      	ldr	r4, [pc, #52]	; (8009068 <__libc_init_array+0x3c>)
 8009032:	1ba4      	subs	r4, r4, r6
 8009034:	10a4      	asrs	r4, r4, #2
 8009036:	2500      	movs	r5, #0
 8009038:	42a5      	cmp	r5, r4
 800903a:	d109      	bne.n	8009050 <__libc_init_array+0x24>
 800903c:	4e0b      	ldr	r6, [pc, #44]	; (800906c <__libc_init_array+0x40>)
 800903e:	4c0c      	ldr	r4, [pc, #48]	; (8009070 <__libc_init_array+0x44>)
 8009040:	f000 f846 	bl	80090d0 <_init>
 8009044:	1ba4      	subs	r4, r4, r6
 8009046:	10a4      	asrs	r4, r4, #2
 8009048:	2500      	movs	r5, #0
 800904a:	42a5      	cmp	r5, r4
 800904c:	d105      	bne.n	800905a <__libc_init_array+0x2e>
 800904e:	bd70      	pop	{r4, r5, r6, pc}
 8009050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009054:	4798      	blx	r3
 8009056:	3501      	adds	r5, #1
 8009058:	e7ee      	b.n	8009038 <__libc_init_array+0xc>
 800905a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800905e:	4798      	blx	r3
 8009060:	3501      	adds	r5, #1
 8009062:	e7f2      	b.n	800904a <__libc_init_array+0x1e>
 8009064:	0800be9c 	.word	0x0800be9c
 8009068:	0800be9c 	.word	0x0800be9c
 800906c:	0800be9c 	.word	0x0800be9c
 8009070:	0800bea0 	.word	0x0800bea0

08009074 <memcpy>:
 8009074:	b510      	push	{r4, lr}
 8009076:	1e43      	subs	r3, r0, #1
 8009078:	440a      	add	r2, r1
 800907a:	4291      	cmp	r1, r2
 800907c:	d100      	bne.n	8009080 <memcpy+0xc>
 800907e:	bd10      	pop	{r4, pc}
 8009080:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009088:	e7f7      	b.n	800907a <memcpy+0x6>

0800908a <memmove>:
 800908a:	4288      	cmp	r0, r1
 800908c:	b510      	push	{r4, lr}
 800908e:	eb01 0302 	add.w	r3, r1, r2
 8009092:	d803      	bhi.n	800909c <memmove+0x12>
 8009094:	1e42      	subs	r2, r0, #1
 8009096:	4299      	cmp	r1, r3
 8009098:	d10c      	bne.n	80090b4 <memmove+0x2a>
 800909a:	bd10      	pop	{r4, pc}
 800909c:	4298      	cmp	r0, r3
 800909e:	d2f9      	bcs.n	8009094 <memmove+0xa>
 80090a0:	1881      	adds	r1, r0, r2
 80090a2:	1ad2      	subs	r2, r2, r3
 80090a4:	42d3      	cmn	r3, r2
 80090a6:	d100      	bne.n	80090aa <memmove+0x20>
 80090a8:	bd10      	pop	{r4, pc}
 80090aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80090b2:	e7f7      	b.n	80090a4 <memmove+0x1a>
 80090b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80090bc:	e7eb      	b.n	8009096 <memmove+0xc>

080090be <memset>:
 80090be:	4402      	add	r2, r0
 80090c0:	4603      	mov	r3, r0
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d100      	bne.n	80090c8 <memset+0xa>
 80090c6:	4770      	bx	lr
 80090c8:	f803 1b01 	strb.w	r1, [r3], #1
 80090cc:	e7f9      	b.n	80090c2 <memset+0x4>
	...

080090d0 <_init>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	bf00      	nop
 80090d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d6:	bc08      	pop	{r3}
 80090d8:	469e      	mov	lr, r3
 80090da:	4770      	bx	lr

080090dc <_fini>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	bf00      	nop
 80090e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e2:	bc08      	pop	{r3}
 80090e4:	469e      	mov	lr, r3
 80090e6:	4770      	bx	lr
